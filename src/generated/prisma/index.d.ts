
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model exercise
 * 
 */
export type exercise = $Result.DefaultSelection<Prisma.$exercisePayload>
/**
 * Model submission
 * 
 */
export type submission = $Result.DefaultSelection<Prisma.$submissionPayload>
/**
 * Model testcase
 * 
 */
export type testcase = $Result.DefaultSelection<Prisma.$testcasePayload>
/**
 * Model testcaseresult
 * 
 */
export type testcaseresult = $Result.DefaultSelection<Prisma.$testcaseresultPayload>
/**
 * Model topic
 * 
 */
export type topic = $Result.DefaultSelection<Prisma.$topicPayload>
/**
 * Model user
 * 
 */
export type user = $Result.DefaultSelection<Prisma.$userPayload>
/**
 * Model friendship
 * 
 */
export type friendship = $Result.DefaultSelection<Prisma.$friendshipPayload>
/**
 * Model chapter
 * 
 */
export type chapter = $Result.DefaultSelection<Prisma.$chapterPayload>
/**
 * Model comment
 * 
 */
export type comment = $Result.DefaultSelection<Prisma.$commentPayload>
/**
 * Model commentlike
 * 
 */
export type commentlike = $Result.DefaultSelection<Prisma.$commentlikePayload>
/**
 * Model exerciselike
 * 
 */
export type exerciselike = $Result.DefaultSelection<Prisma.$exerciselikePayload>
/**
 * Model lesson
 * 
 */
export type lesson = $Result.DefaultSelection<Prisma.$lessonPayload>
/**
 * Model notification
 * 
 */
export type notification = $Result.DefaultSelection<Prisma.$notificationPayload>
/**
 * Model studyplan
 * 
 */
export type studyplan = $Result.DefaultSelection<Prisma.$studyplanPayload>
/**
 * Model studyplanitem
 * 
 */
export type studyplanitem = $Result.DefaultSelection<Prisma.$studyplanitemPayload>
/**
 * Model exerciseprogress
 * 
 */
export type exerciseprogress = $Result.DefaultSelection<Prisma.$exerciseprogressPayload>
/**
 * Model studyplanprogress
 * 
 */
export type studyplanprogress = $Result.DefaultSelection<Prisma.$studyplanprogressPayload>
/**
 * Model list
 * 
 */
export type list = $Result.DefaultSelection<Prisma.$listPayload>
/**
 * Model listitem
 * 
 */
export type listitem = $Result.DefaultSelection<Prisma.$listitemPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const exercise_Difficulty: {
  Easy: 'Easy',
  Medium: 'Medium',
  Hard: 'Hard'
};

export type exercise_Difficulty = (typeof exercise_Difficulty)[keyof typeof exercise_Difficulty]


export const user_Role: {
  User: 'User',
  Admin: 'Admin'
};

export type user_Role = (typeof user_Role)[keyof typeof user_Role]


export const submission_Result: {
  Pass: 'Pass',
  Fail: 'Fail',
  Pending: 'Pending'
};

export type submission_Result = (typeof submission_Result)[keyof typeof submission_Result]


export const friendship_status: {
  Pending: 'Pending',
  Accepted: 'Accepted'
};

export type friendship_status = (typeof friendship_status)[keyof typeof friendship_status]


export const testcaseresult_Result: {
  Correct: 'Correct',
  Partial: 'Partial',
  Wrong: 'Wrong',
  Error: 'Error',
  Pending: 'Pending'
};

export type testcaseresult_Result = (typeof testcaseresult_Result)[keyof typeof testcaseresult_Result]


export const notification_Type: {
  Comment: 'Comment',
  Friendship: 'Friendship',
  Like: 'Like'
};

export type notification_Type = (typeof notification_Type)[keyof typeof notification_Type]


export const exerciseprogress_Status: {
  Attempting: 'Attempting',
  Solved: 'Solved'
};

export type exerciseprogress_Status = (typeof exerciseprogress_Status)[keyof typeof exerciseprogress_Status]


export const studyplanprogress_Status: {
  InProgress: 'InProgress',
  Completed: 'Completed'
};

export type studyplanprogress_Status = (typeof studyplanprogress_Status)[keyof typeof studyplanprogress_Status]

}

export type exercise_Difficulty = $Enums.exercise_Difficulty

export const exercise_Difficulty: typeof $Enums.exercise_Difficulty

export type user_Role = $Enums.user_Role

export const user_Role: typeof $Enums.user_Role

export type submission_Result = $Enums.submission_Result

export const submission_Result: typeof $Enums.submission_Result

export type friendship_status = $Enums.friendship_status

export const friendship_status: typeof $Enums.friendship_status

export type testcaseresult_Result = $Enums.testcaseresult_Result

export const testcaseresult_Result: typeof $Enums.testcaseresult_Result

export type notification_Type = $Enums.notification_Type

export const notification_Type: typeof $Enums.notification_Type

export type exerciseprogress_Status = $Enums.exerciseprogress_Status

export const exerciseprogress_Status: typeof $Enums.exerciseprogress_Status

export type studyplanprogress_Status = $Enums.studyplanprogress_Status

export const studyplanprogress_Status: typeof $Enums.studyplanprogress_Status

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Exercises
 * const exercises = await prisma.exercise.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Exercises
   * const exercises = await prisma.exercise.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.exercise`: Exposes CRUD operations for the **exercise** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Exercises
    * const exercises = await prisma.exercise.findMany()
    * ```
    */
  get exercise(): Prisma.exerciseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.submission`: Exposes CRUD operations for the **submission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Submissions
    * const submissions = await prisma.submission.findMany()
    * ```
    */
  get submission(): Prisma.submissionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.testcase`: Exposes CRUD operations for the **testcase** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Testcases
    * const testcases = await prisma.testcase.findMany()
    * ```
    */
  get testcase(): Prisma.testcaseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.testcaseresult`: Exposes CRUD operations for the **testcaseresult** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Testcaseresults
    * const testcaseresults = await prisma.testcaseresult.findMany()
    * ```
    */
  get testcaseresult(): Prisma.testcaseresultDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.topic`: Exposes CRUD operations for the **topic** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Topics
    * const topics = await prisma.topic.findMany()
    * ```
    */
  get topic(): Prisma.topicDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.friendship`: Exposes CRUD operations for the **friendship** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Friendships
    * const friendships = await prisma.friendship.findMany()
    * ```
    */
  get friendship(): Prisma.friendshipDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.chapter`: Exposes CRUD operations for the **chapter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chapters
    * const chapters = await prisma.chapter.findMany()
    * ```
    */
  get chapter(): Prisma.chapterDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.commentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.commentlike`: Exposes CRUD operations for the **commentlike** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Commentlikes
    * const commentlikes = await prisma.commentlike.findMany()
    * ```
    */
  get commentlike(): Prisma.commentlikeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.exerciselike`: Exposes CRUD operations for the **exerciselike** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Exerciselikes
    * const exerciselikes = await prisma.exerciselike.findMany()
    * ```
    */
  get exerciselike(): Prisma.exerciselikeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.lesson`: Exposes CRUD operations for the **lesson** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lessons
    * const lessons = await prisma.lesson.findMany()
    * ```
    */
  get lesson(): Prisma.lessonDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.notificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.studyplan`: Exposes CRUD operations for the **studyplan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Studyplans
    * const studyplans = await prisma.studyplan.findMany()
    * ```
    */
  get studyplan(): Prisma.studyplanDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.studyplanitem`: Exposes CRUD operations for the **studyplanitem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Studyplanitems
    * const studyplanitems = await prisma.studyplanitem.findMany()
    * ```
    */
  get studyplanitem(): Prisma.studyplanitemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.exerciseprogress`: Exposes CRUD operations for the **exerciseprogress** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Exerciseprogresses
    * const exerciseprogresses = await prisma.exerciseprogress.findMany()
    * ```
    */
  get exerciseprogress(): Prisma.exerciseprogressDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.studyplanprogress`: Exposes CRUD operations for the **studyplanprogress** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Studyplanprogresses
    * const studyplanprogresses = await prisma.studyplanprogress.findMany()
    * ```
    */
  get studyplanprogress(): Prisma.studyplanprogressDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.list`: Exposes CRUD operations for the **list** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lists
    * const lists = await prisma.list.findMany()
    * ```
    */
  get list(): Prisma.listDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.listitem`: Exposes CRUD operations for the **listitem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Listitems
    * const listitems = await prisma.listitem.findMany()
    * ```
    */
  get listitem(): Prisma.listitemDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    exercise: 'exercise',
    submission: 'submission',
    testcase: 'testcase',
    testcaseresult: 'testcaseresult',
    topic: 'topic',
    user: 'user',
    friendship: 'friendship',
    chapter: 'chapter',
    comment: 'comment',
    commentlike: 'commentlike',
    exerciselike: 'exerciselike',
    lesson: 'lesson',
    notification: 'notification',
    studyplan: 'studyplan',
    studyplanitem: 'studyplanitem',
    exerciseprogress: 'exerciseprogress',
    studyplanprogress: 'studyplanprogress',
    list: 'list',
    listitem: 'listitem'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "exercise" | "submission" | "testcase" | "testcaseresult" | "topic" | "user" | "friendship" | "chapter" | "comment" | "commentlike" | "exerciselike" | "lesson" | "notification" | "studyplan" | "studyplanitem" | "exerciseprogress" | "studyplanprogress" | "list" | "listitem"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      exercise: {
        payload: Prisma.$exercisePayload<ExtArgs>
        fields: Prisma.exerciseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.exerciseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercisePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.exerciseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercisePayload>
          }
          findFirst: {
            args: Prisma.exerciseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercisePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.exerciseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercisePayload>
          }
          findMany: {
            args: Prisma.exerciseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercisePayload>[]
          }
          create: {
            args: Prisma.exerciseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercisePayload>
          }
          createMany: {
            args: Prisma.exerciseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.exerciseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercisePayload>
          }
          update: {
            args: Prisma.exerciseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercisePayload>
          }
          deleteMany: {
            args: Prisma.exerciseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.exerciseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.exerciseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercisePayload>
          }
          aggregate: {
            args: Prisma.ExerciseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExercise>
          }
          groupBy: {
            args: Prisma.exerciseGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExerciseGroupByOutputType>[]
          }
          count: {
            args: Prisma.exerciseCountArgs<ExtArgs>
            result: $Utils.Optional<ExerciseCountAggregateOutputType> | number
          }
        }
      }
      submission: {
        payload: Prisma.$submissionPayload<ExtArgs>
        fields: Prisma.submissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.submissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$submissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.submissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$submissionPayload>
          }
          findFirst: {
            args: Prisma.submissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$submissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.submissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$submissionPayload>
          }
          findMany: {
            args: Prisma.submissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$submissionPayload>[]
          }
          create: {
            args: Prisma.submissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$submissionPayload>
          }
          createMany: {
            args: Prisma.submissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.submissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$submissionPayload>
          }
          update: {
            args: Prisma.submissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$submissionPayload>
          }
          deleteMany: {
            args: Prisma.submissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.submissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.submissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$submissionPayload>
          }
          aggregate: {
            args: Prisma.SubmissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubmission>
          }
          groupBy: {
            args: Prisma.submissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubmissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.submissionCountArgs<ExtArgs>
            result: $Utils.Optional<SubmissionCountAggregateOutputType> | number
          }
        }
      }
      testcase: {
        payload: Prisma.$testcasePayload<ExtArgs>
        fields: Prisma.testcaseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.testcaseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$testcasePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.testcaseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$testcasePayload>
          }
          findFirst: {
            args: Prisma.testcaseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$testcasePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.testcaseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$testcasePayload>
          }
          findMany: {
            args: Prisma.testcaseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$testcasePayload>[]
          }
          create: {
            args: Prisma.testcaseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$testcasePayload>
          }
          createMany: {
            args: Prisma.testcaseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.testcaseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$testcasePayload>
          }
          update: {
            args: Prisma.testcaseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$testcasePayload>
          }
          deleteMany: {
            args: Prisma.testcaseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.testcaseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.testcaseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$testcasePayload>
          }
          aggregate: {
            args: Prisma.TestcaseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTestcase>
          }
          groupBy: {
            args: Prisma.testcaseGroupByArgs<ExtArgs>
            result: $Utils.Optional<TestcaseGroupByOutputType>[]
          }
          count: {
            args: Prisma.testcaseCountArgs<ExtArgs>
            result: $Utils.Optional<TestcaseCountAggregateOutputType> | number
          }
        }
      }
      testcaseresult: {
        payload: Prisma.$testcaseresultPayload<ExtArgs>
        fields: Prisma.testcaseresultFieldRefs
        operations: {
          findUnique: {
            args: Prisma.testcaseresultFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$testcaseresultPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.testcaseresultFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$testcaseresultPayload>
          }
          findFirst: {
            args: Prisma.testcaseresultFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$testcaseresultPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.testcaseresultFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$testcaseresultPayload>
          }
          findMany: {
            args: Prisma.testcaseresultFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$testcaseresultPayload>[]
          }
          create: {
            args: Prisma.testcaseresultCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$testcaseresultPayload>
          }
          createMany: {
            args: Prisma.testcaseresultCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.testcaseresultDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$testcaseresultPayload>
          }
          update: {
            args: Prisma.testcaseresultUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$testcaseresultPayload>
          }
          deleteMany: {
            args: Prisma.testcaseresultDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.testcaseresultUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.testcaseresultUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$testcaseresultPayload>
          }
          aggregate: {
            args: Prisma.TestcaseresultAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTestcaseresult>
          }
          groupBy: {
            args: Prisma.testcaseresultGroupByArgs<ExtArgs>
            result: $Utils.Optional<TestcaseresultGroupByOutputType>[]
          }
          count: {
            args: Prisma.testcaseresultCountArgs<ExtArgs>
            result: $Utils.Optional<TestcaseresultCountAggregateOutputType> | number
          }
        }
      }
      topic: {
        payload: Prisma.$topicPayload<ExtArgs>
        fields: Prisma.topicFieldRefs
        operations: {
          findUnique: {
            args: Prisma.topicFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$topicPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.topicFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$topicPayload>
          }
          findFirst: {
            args: Prisma.topicFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$topicPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.topicFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$topicPayload>
          }
          findMany: {
            args: Prisma.topicFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$topicPayload>[]
          }
          create: {
            args: Prisma.topicCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$topicPayload>
          }
          createMany: {
            args: Prisma.topicCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.topicDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$topicPayload>
          }
          update: {
            args: Prisma.topicUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$topicPayload>
          }
          deleteMany: {
            args: Prisma.topicDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.topicUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.topicUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$topicPayload>
          }
          aggregate: {
            args: Prisma.TopicAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTopic>
          }
          groupBy: {
            args: Prisma.topicGroupByArgs<ExtArgs>
            result: $Utils.Optional<TopicGroupByOutputType>[]
          }
          count: {
            args: Prisma.topicCountArgs<ExtArgs>
            result: $Utils.Optional<TopicCountAggregateOutputType> | number
          }
        }
      }
      user: {
        payload: Prisma.$userPayload<ExtArgs>
        fields: Prisma.userFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findFirst: {
            args: Prisma.userFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findMany: {
            args: Prisma.userFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>[]
          }
          create: {
            args: Prisma.userCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          createMany: {
            args: Prisma.userCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.userDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          update: {
            args: Prisma.userUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          deleteMany: {
            args: Prisma.userDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.userUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.userUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.userGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.userCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      friendship: {
        payload: Prisma.$friendshipPayload<ExtArgs>
        fields: Prisma.friendshipFieldRefs
        operations: {
          findUnique: {
            args: Prisma.friendshipFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$friendshipPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.friendshipFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$friendshipPayload>
          }
          findFirst: {
            args: Prisma.friendshipFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$friendshipPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.friendshipFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$friendshipPayload>
          }
          findMany: {
            args: Prisma.friendshipFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$friendshipPayload>[]
          }
          create: {
            args: Prisma.friendshipCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$friendshipPayload>
          }
          createMany: {
            args: Prisma.friendshipCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.friendshipDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$friendshipPayload>
          }
          update: {
            args: Prisma.friendshipUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$friendshipPayload>
          }
          deleteMany: {
            args: Prisma.friendshipDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.friendshipUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.friendshipUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$friendshipPayload>
          }
          aggregate: {
            args: Prisma.FriendshipAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFriendship>
          }
          groupBy: {
            args: Prisma.friendshipGroupByArgs<ExtArgs>
            result: $Utils.Optional<FriendshipGroupByOutputType>[]
          }
          count: {
            args: Prisma.friendshipCountArgs<ExtArgs>
            result: $Utils.Optional<FriendshipCountAggregateOutputType> | number
          }
        }
      }
      chapter: {
        payload: Prisma.$chapterPayload<ExtArgs>
        fields: Prisma.chapterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.chapterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chapterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.chapterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chapterPayload>
          }
          findFirst: {
            args: Prisma.chapterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chapterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.chapterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chapterPayload>
          }
          findMany: {
            args: Prisma.chapterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chapterPayload>[]
          }
          create: {
            args: Prisma.chapterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chapterPayload>
          }
          createMany: {
            args: Prisma.chapterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.chapterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chapterPayload>
          }
          update: {
            args: Prisma.chapterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chapterPayload>
          }
          deleteMany: {
            args: Prisma.chapterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.chapterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.chapterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chapterPayload>
          }
          aggregate: {
            args: Prisma.ChapterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChapter>
          }
          groupBy: {
            args: Prisma.chapterGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChapterGroupByOutputType>[]
          }
          count: {
            args: Prisma.chapterCountArgs<ExtArgs>
            result: $Utils.Optional<ChapterCountAggregateOutputType> | number
          }
        }
      }
      comment: {
        payload: Prisma.$commentPayload<ExtArgs>
        fields: Prisma.commentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.commentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.commentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commentPayload>
          }
          findFirst: {
            args: Prisma.commentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.commentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commentPayload>
          }
          findMany: {
            args: Prisma.commentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commentPayload>[]
          }
          create: {
            args: Prisma.commentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commentPayload>
          }
          createMany: {
            args: Prisma.commentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.commentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commentPayload>
          }
          update: {
            args: Prisma.commentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commentPayload>
          }
          deleteMany: {
            args: Prisma.commentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.commentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.commentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.commentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.commentCountArgs<ExtArgs>
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
      commentlike: {
        payload: Prisma.$commentlikePayload<ExtArgs>
        fields: Prisma.commentlikeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.commentlikeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commentlikePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.commentlikeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commentlikePayload>
          }
          findFirst: {
            args: Prisma.commentlikeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commentlikePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.commentlikeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commentlikePayload>
          }
          findMany: {
            args: Prisma.commentlikeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commentlikePayload>[]
          }
          create: {
            args: Prisma.commentlikeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commentlikePayload>
          }
          createMany: {
            args: Prisma.commentlikeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.commentlikeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commentlikePayload>
          }
          update: {
            args: Prisma.commentlikeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commentlikePayload>
          }
          deleteMany: {
            args: Prisma.commentlikeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.commentlikeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.commentlikeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commentlikePayload>
          }
          aggregate: {
            args: Prisma.CommentlikeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCommentlike>
          }
          groupBy: {
            args: Prisma.commentlikeGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommentlikeGroupByOutputType>[]
          }
          count: {
            args: Prisma.commentlikeCountArgs<ExtArgs>
            result: $Utils.Optional<CommentlikeCountAggregateOutputType> | number
          }
        }
      }
      exerciselike: {
        payload: Prisma.$exerciselikePayload<ExtArgs>
        fields: Prisma.exerciselikeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.exerciselikeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exerciselikePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.exerciselikeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exerciselikePayload>
          }
          findFirst: {
            args: Prisma.exerciselikeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exerciselikePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.exerciselikeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exerciselikePayload>
          }
          findMany: {
            args: Prisma.exerciselikeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exerciselikePayload>[]
          }
          create: {
            args: Prisma.exerciselikeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exerciselikePayload>
          }
          createMany: {
            args: Prisma.exerciselikeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.exerciselikeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exerciselikePayload>
          }
          update: {
            args: Prisma.exerciselikeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exerciselikePayload>
          }
          deleteMany: {
            args: Prisma.exerciselikeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.exerciselikeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.exerciselikeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exerciselikePayload>
          }
          aggregate: {
            args: Prisma.ExerciselikeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExerciselike>
          }
          groupBy: {
            args: Prisma.exerciselikeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExerciselikeGroupByOutputType>[]
          }
          count: {
            args: Prisma.exerciselikeCountArgs<ExtArgs>
            result: $Utils.Optional<ExerciselikeCountAggregateOutputType> | number
          }
        }
      }
      lesson: {
        payload: Prisma.$lessonPayload<ExtArgs>
        fields: Prisma.lessonFieldRefs
        operations: {
          findUnique: {
            args: Prisma.lessonFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lessonPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.lessonFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lessonPayload>
          }
          findFirst: {
            args: Prisma.lessonFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lessonPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.lessonFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lessonPayload>
          }
          findMany: {
            args: Prisma.lessonFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lessonPayload>[]
          }
          create: {
            args: Prisma.lessonCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lessonPayload>
          }
          createMany: {
            args: Prisma.lessonCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.lessonDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lessonPayload>
          }
          update: {
            args: Prisma.lessonUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lessonPayload>
          }
          deleteMany: {
            args: Prisma.lessonDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.lessonUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.lessonUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lessonPayload>
          }
          aggregate: {
            args: Prisma.LessonAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLesson>
          }
          groupBy: {
            args: Prisma.lessonGroupByArgs<ExtArgs>
            result: $Utils.Optional<LessonGroupByOutputType>[]
          }
          count: {
            args: Prisma.lessonCountArgs<ExtArgs>
            result: $Utils.Optional<LessonCountAggregateOutputType> | number
          }
        }
      }
      notification: {
        payload: Prisma.$notificationPayload<ExtArgs>
        fields: Prisma.notificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.notificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.notificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationPayload>
          }
          findFirst: {
            args: Prisma.notificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.notificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationPayload>
          }
          findMany: {
            args: Prisma.notificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationPayload>[]
          }
          create: {
            args: Prisma.notificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationPayload>
          }
          createMany: {
            args: Prisma.notificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.notificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationPayload>
          }
          update: {
            args: Prisma.notificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationPayload>
          }
          deleteMany: {
            args: Prisma.notificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.notificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.notificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.notificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.notificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      studyplan: {
        payload: Prisma.$studyplanPayload<ExtArgs>
        fields: Prisma.studyplanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.studyplanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studyplanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.studyplanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studyplanPayload>
          }
          findFirst: {
            args: Prisma.studyplanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studyplanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.studyplanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studyplanPayload>
          }
          findMany: {
            args: Prisma.studyplanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studyplanPayload>[]
          }
          create: {
            args: Prisma.studyplanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studyplanPayload>
          }
          createMany: {
            args: Prisma.studyplanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.studyplanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studyplanPayload>
          }
          update: {
            args: Prisma.studyplanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studyplanPayload>
          }
          deleteMany: {
            args: Prisma.studyplanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.studyplanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.studyplanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studyplanPayload>
          }
          aggregate: {
            args: Prisma.StudyplanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudyplan>
          }
          groupBy: {
            args: Prisma.studyplanGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudyplanGroupByOutputType>[]
          }
          count: {
            args: Prisma.studyplanCountArgs<ExtArgs>
            result: $Utils.Optional<StudyplanCountAggregateOutputType> | number
          }
        }
      }
      studyplanitem: {
        payload: Prisma.$studyplanitemPayload<ExtArgs>
        fields: Prisma.studyplanitemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.studyplanitemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studyplanitemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.studyplanitemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studyplanitemPayload>
          }
          findFirst: {
            args: Prisma.studyplanitemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studyplanitemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.studyplanitemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studyplanitemPayload>
          }
          findMany: {
            args: Prisma.studyplanitemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studyplanitemPayload>[]
          }
          create: {
            args: Prisma.studyplanitemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studyplanitemPayload>
          }
          createMany: {
            args: Prisma.studyplanitemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.studyplanitemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studyplanitemPayload>
          }
          update: {
            args: Prisma.studyplanitemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studyplanitemPayload>
          }
          deleteMany: {
            args: Prisma.studyplanitemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.studyplanitemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.studyplanitemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studyplanitemPayload>
          }
          aggregate: {
            args: Prisma.StudyplanitemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudyplanitem>
          }
          groupBy: {
            args: Prisma.studyplanitemGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudyplanitemGroupByOutputType>[]
          }
          count: {
            args: Prisma.studyplanitemCountArgs<ExtArgs>
            result: $Utils.Optional<StudyplanitemCountAggregateOutputType> | number
          }
        }
      }
      exerciseprogress: {
        payload: Prisma.$exerciseprogressPayload<ExtArgs>
        fields: Prisma.exerciseprogressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.exerciseprogressFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exerciseprogressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.exerciseprogressFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exerciseprogressPayload>
          }
          findFirst: {
            args: Prisma.exerciseprogressFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exerciseprogressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.exerciseprogressFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exerciseprogressPayload>
          }
          findMany: {
            args: Prisma.exerciseprogressFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exerciseprogressPayload>[]
          }
          create: {
            args: Prisma.exerciseprogressCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exerciseprogressPayload>
          }
          createMany: {
            args: Prisma.exerciseprogressCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.exerciseprogressDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exerciseprogressPayload>
          }
          update: {
            args: Prisma.exerciseprogressUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exerciseprogressPayload>
          }
          deleteMany: {
            args: Prisma.exerciseprogressDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.exerciseprogressUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.exerciseprogressUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exerciseprogressPayload>
          }
          aggregate: {
            args: Prisma.ExerciseprogressAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExerciseprogress>
          }
          groupBy: {
            args: Prisma.exerciseprogressGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExerciseprogressGroupByOutputType>[]
          }
          count: {
            args: Prisma.exerciseprogressCountArgs<ExtArgs>
            result: $Utils.Optional<ExerciseprogressCountAggregateOutputType> | number
          }
        }
      }
      studyplanprogress: {
        payload: Prisma.$studyplanprogressPayload<ExtArgs>
        fields: Prisma.studyplanprogressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.studyplanprogressFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studyplanprogressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.studyplanprogressFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studyplanprogressPayload>
          }
          findFirst: {
            args: Prisma.studyplanprogressFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studyplanprogressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.studyplanprogressFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studyplanprogressPayload>
          }
          findMany: {
            args: Prisma.studyplanprogressFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studyplanprogressPayload>[]
          }
          create: {
            args: Prisma.studyplanprogressCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studyplanprogressPayload>
          }
          createMany: {
            args: Prisma.studyplanprogressCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.studyplanprogressDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studyplanprogressPayload>
          }
          update: {
            args: Prisma.studyplanprogressUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studyplanprogressPayload>
          }
          deleteMany: {
            args: Prisma.studyplanprogressDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.studyplanprogressUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.studyplanprogressUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studyplanprogressPayload>
          }
          aggregate: {
            args: Prisma.StudyplanprogressAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudyplanprogress>
          }
          groupBy: {
            args: Prisma.studyplanprogressGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudyplanprogressGroupByOutputType>[]
          }
          count: {
            args: Prisma.studyplanprogressCountArgs<ExtArgs>
            result: $Utils.Optional<StudyplanprogressCountAggregateOutputType> | number
          }
        }
      }
      list: {
        payload: Prisma.$listPayload<ExtArgs>
        fields: Prisma.listFieldRefs
        operations: {
          findUnique: {
            args: Prisma.listFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$listPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.listFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$listPayload>
          }
          findFirst: {
            args: Prisma.listFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$listPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.listFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$listPayload>
          }
          findMany: {
            args: Prisma.listFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$listPayload>[]
          }
          create: {
            args: Prisma.listCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$listPayload>
          }
          createMany: {
            args: Prisma.listCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.listDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$listPayload>
          }
          update: {
            args: Prisma.listUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$listPayload>
          }
          deleteMany: {
            args: Prisma.listDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.listUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.listUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$listPayload>
          }
          aggregate: {
            args: Prisma.ListAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateList>
          }
          groupBy: {
            args: Prisma.listGroupByArgs<ExtArgs>
            result: $Utils.Optional<ListGroupByOutputType>[]
          }
          count: {
            args: Prisma.listCountArgs<ExtArgs>
            result: $Utils.Optional<ListCountAggregateOutputType> | number
          }
        }
      }
      listitem: {
        payload: Prisma.$listitemPayload<ExtArgs>
        fields: Prisma.listitemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.listitemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$listitemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.listitemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$listitemPayload>
          }
          findFirst: {
            args: Prisma.listitemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$listitemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.listitemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$listitemPayload>
          }
          findMany: {
            args: Prisma.listitemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$listitemPayload>[]
          }
          create: {
            args: Prisma.listitemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$listitemPayload>
          }
          createMany: {
            args: Prisma.listitemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.listitemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$listitemPayload>
          }
          update: {
            args: Prisma.listitemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$listitemPayload>
          }
          deleteMany: {
            args: Prisma.listitemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.listitemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.listitemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$listitemPayload>
          }
          aggregate: {
            args: Prisma.ListitemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateListitem>
          }
          groupBy: {
            args: Prisma.listitemGroupByArgs<ExtArgs>
            result: $Utils.Optional<ListitemGroupByOutputType>[]
          }
          count: {
            args: Prisma.listitemCountArgs<ExtArgs>
            result: $Utils.Optional<ListitemCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    exercise?: exerciseOmit
    submission?: submissionOmit
    testcase?: testcaseOmit
    testcaseresult?: testcaseresultOmit
    topic?: topicOmit
    user?: userOmit
    friendship?: friendshipOmit
    chapter?: chapterOmit
    comment?: commentOmit
    commentlike?: commentlikeOmit
    exerciselike?: exerciselikeOmit
    lesson?: lessonOmit
    notification?: notificationOmit
    studyplan?: studyplanOmit
    studyplanitem?: studyplanitemOmit
    exerciseprogress?: exerciseprogressOmit
    studyplanprogress?: studyplanprogressOmit
    list?: listOmit
    listitem?: listitemOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ExerciseCountOutputType
   */

  export type ExerciseCountOutputType = {
    comment: number
    exerciselike: number
    exerciseprogress: number
    listitem: number
    submission: number
    testcase: number
  }

  export type ExerciseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comment?: boolean | ExerciseCountOutputTypeCountCommentArgs
    exerciselike?: boolean | ExerciseCountOutputTypeCountExerciselikeArgs
    exerciseprogress?: boolean | ExerciseCountOutputTypeCountExerciseprogressArgs
    listitem?: boolean | ExerciseCountOutputTypeCountListitemArgs
    submission?: boolean | ExerciseCountOutputTypeCountSubmissionArgs
    testcase?: boolean | ExerciseCountOutputTypeCountTestcaseArgs
  }

  // Custom InputTypes
  /**
   * ExerciseCountOutputType without action
   */
  export type ExerciseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseCountOutputType
     */
    select?: ExerciseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ExerciseCountOutputType without action
   */
  export type ExerciseCountOutputTypeCountCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: commentWhereInput
  }

  /**
   * ExerciseCountOutputType without action
   */
  export type ExerciseCountOutputTypeCountExerciselikeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: exerciselikeWhereInput
  }

  /**
   * ExerciseCountOutputType without action
   */
  export type ExerciseCountOutputTypeCountExerciseprogressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: exerciseprogressWhereInput
  }

  /**
   * ExerciseCountOutputType without action
   */
  export type ExerciseCountOutputTypeCountListitemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: listitemWhereInput
  }

  /**
   * ExerciseCountOutputType without action
   */
  export type ExerciseCountOutputTypeCountSubmissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: submissionWhereInput
  }

  /**
   * ExerciseCountOutputType without action
   */
  export type ExerciseCountOutputTypeCountTestcaseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: testcaseWhereInput
  }


  /**
   * Count Type SubmissionCountOutputType
   */

  export type SubmissionCountOutputType = {
    testcaseresult: number
  }

  export type SubmissionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    testcaseresult?: boolean | SubmissionCountOutputTypeCountTestcaseresultArgs
  }

  // Custom InputTypes
  /**
   * SubmissionCountOutputType without action
   */
  export type SubmissionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionCountOutputType
     */
    select?: SubmissionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SubmissionCountOutputType without action
   */
  export type SubmissionCountOutputTypeCountTestcaseresultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: testcaseresultWhereInput
  }


  /**
   * Count Type TestcaseCountOutputType
   */

  export type TestcaseCountOutputType = {
    testcaseresult: number
  }

  export type TestcaseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    testcaseresult?: boolean | TestcaseCountOutputTypeCountTestcaseresultArgs
  }

  // Custom InputTypes
  /**
   * TestcaseCountOutputType without action
   */
  export type TestcaseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestcaseCountOutputType
     */
    select?: TestcaseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TestcaseCountOutputType without action
   */
  export type TestcaseCountOutputTypeCountTestcaseresultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: testcaseresultWhereInput
  }


  /**
   * Count Type TopicCountOutputType
   */

  export type TopicCountOutputType = {
    exercise: number
  }

  export type TopicCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercise?: boolean | TopicCountOutputTypeCountExerciseArgs
  }

  // Custom InputTypes
  /**
   * TopicCountOutputType without action
   */
  export type TopicCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopicCountOutputType
     */
    select?: TopicCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TopicCountOutputType without action
   */
  export type TopicCountOutputTypeCountExerciseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: exerciseWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    comment: number
    commentlike: number
    exerciselike: number
    exerciseprogress: number
    friendship_friendship_requesterTouser: number
    friendship_friendship_addresseeTouser: number
    list: number
    notification_notification_UIDTouser: number
    notification_notification_FromUserTouser: number
    studyplanprogress: number
    submission: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comment?: boolean | UserCountOutputTypeCountCommentArgs
    commentlike?: boolean | UserCountOutputTypeCountCommentlikeArgs
    exerciselike?: boolean | UserCountOutputTypeCountExerciselikeArgs
    exerciseprogress?: boolean | UserCountOutputTypeCountExerciseprogressArgs
    friendship_friendship_requesterTouser?: boolean | UserCountOutputTypeCountFriendship_friendship_requesterTouserArgs
    friendship_friendship_addresseeTouser?: boolean | UserCountOutputTypeCountFriendship_friendship_addresseeTouserArgs
    list?: boolean | UserCountOutputTypeCountListArgs
    notification_notification_UIDTouser?: boolean | UserCountOutputTypeCountNotification_notification_UIDTouserArgs
    notification_notification_FromUserTouser?: boolean | UserCountOutputTypeCountNotification_notification_FromUserTouserArgs
    studyplanprogress?: boolean | UserCountOutputTypeCountStudyplanprogressArgs
    submission?: boolean | UserCountOutputTypeCountSubmissionArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: commentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentlikeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: commentlikeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountExerciselikeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: exerciselikeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountExerciseprogressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: exerciseprogressWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFriendship_friendship_requesterTouserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: friendshipWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFriendship_friendship_addresseeTouserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: friendshipWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountListArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: listWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotification_notification_UIDTouserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: notificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotification_notification_FromUserTouserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: notificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountStudyplanprogressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: studyplanprogressWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSubmissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: submissionWhereInput
  }


  /**
   * Count Type ChapterCountOutputType
   */

  export type ChapterCountOutputType = {
    lesson: number
  }

  export type ChapterCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lesson?: boolean | ChapterCountOutputTypeCountLessonArgs
  }

  // Custom InputTypes
  /**
   * ChapterCountOutputType without action
   */
  export type ChapterCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChapterCountOutputType
     */
    select?: ChapterCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChapterCountOutputType without action
   */
  export type ChapterCountOutputTypeCountLessonArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: lessonWhereInput
  }


  /**
   * Count Type CommentCountOutputType
   */

  export type CommentCountOutputType = {
    commentlike: number
    notification: number
  }

  export type CommentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    commentlike?: boolean | CommentCountOutputTypeCountCommentlikeArgs
    notification?: boolean | CommentCountOutputTypeCountNotificationArgs
  }

  // Custom InputTypes
  /**
   * CommentCountOutputType without action
   */
  export type CommentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentCountOutputType
     */
    select?: CommentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CommentCountOutputType without action
   */
  export type CommentCountOutputTypeCountCommentlikeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: commentlikeWhereInput
  }

  /**
   * CommentCountOutputType without action
   */
  export type CommentCountOutputTypeCountNotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: notificationWhereInput
  }


  /**
   * Count Type LessonCountOutputType
   */

  export type LessonCountOutputType = {
    comment: number
  }

  export type LessonCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comment?: boolean | LessonCountOutputTypeCountCommentArgs
  }

  // Custom InputTypes
  /**
   * LessonCountOutputType without action
   */
  export type LessonCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonCountOutputType
     */
    select?: LessonCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LessonCountOutputType without action
   */
  export type LessonCountOutputTypeCountCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: commentWhereInput
  }


  /**
   * Count Type StudyplanCountOutputType
   */

  export type StudyplanCountOutputType = {
    studyplanitem: number
    studyplanprogress: number
  }

  export type StudyplanCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    studyplanitem?: boolean | StudyplanCountOutputTypeCountStudyplanitemArgs
    studyplanprogress?: boolean | StudyplanCountOutputTypeCountStudyplanprogressArgs
  }

  // Custom InputTypes
  /**
   * StudyplanCountOutputType without action
   */
  export type StudyplanCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyplanCountOutputType
     */
    select?: StudyplanCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StudyplanCountOutputType without action
   */
  export type StudyplanCountOutputTypeCountStudyplanitemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: studyplanitemWhereInput
  }

  /**
   * StudyplanCountOutputType without action
   */
  export type StudyplanCountOutputTypeCountStudyplanprogressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: studyplanprogressWhereInput
  }


  /**
   * Count Type StudyplanitemCountOutputType
   */

  export type StudyplanitemCountOutputType = {
    exercise: number
  }

  export type StudyplanitemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercise?: boolean | StudyplanitemCountOutputTypeCountExerciseArgs
  }

  // Custom InputTypes
  /**
   * StudyplanitemCountOutputType without action
   */
  export type StudyplanitemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyplanitemCountOutputType
     */
    select?: StudyplanitemCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StudyplanitemCountOutputType without action
   */
  export type StudyplanitemCountOutputTypeCountExerciseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: exerciseWhereInput
  }


  /**
   * Count Type ListCountOutputType
   */

  export type ListCountOutputType = {
    listitem: number
  }

  export type ListCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    listitem?: boolean | ListCountOutputTypeCountListitemArgs
  }

  // Custom InputTypes
  /**
   * ListCountOutputType without action
   */
  export type ListCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListCountOutputType
     */
    select?: ListCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ListCountOutputType without action
   */
  export type ListCountOutputTypeCountListitemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: listitemWhereInput
  }


  /**
   * Models
   */

  /**
   * Model exercise
   */

  export type AggregateExercise = {
    _count: ExerciseCountAggregateOutputType | null
    _avg: ExerciseAvgAggregateOutputType | null
    _sum: ExerciseSumAggregateOutputType | null
    _min: ExerciseMinAggregateOutputType | null
    _max: ExerciseMaxAggregateOutputType | null
  }

  export type ExerciseAvgAggregateOutputType = {
    EID: number | null
    TpID: number | null
    SPIID: number | null
  }

  export type ExerciseSumAggregateOutputType = {
    EID: number | null
    TpID: number | null
    SPIID: number | null
  }

  export type ExerciseMinAggregateOutputType = {
    EID: number | null
    TpID: number | null
    SPIID: number | null
    Name: string | null
    Slug: string | null
    Content: string | null
    Difficulty: $Enums.exercise_Difficulty | null
    template: string | null
  }

  export type ExerciseMaxAggregateOutputType = {
    EID: number | null
    TpID: number | null
    SPIID: number | null
    Name: string | null
    Slug: string | null
    Content: string | null
    Difficulty: $Enums.exercise_Difficulty | null
    template: string | null
  }

  export type ExerciseCountAggregateOutputType = {
    EID: number
    TpID: number
    SPIID: number
    Name: number
    Slug: number
    Content: number
    Difficulty: number
    template: number
    _all: number
  }


  export type ExerciseAvgAggregateInputType = {
    EID?: true
    TpID?: true
    SPIID?: true
  }

  export type ExerciseSumAggregateInputType = {
    EID?: true
    TpID?: true
    SPIID?: true
  }

  export type ExerciseMinAggregateInputType = {
    EID?: true
    TpID?: true
    SPIID?: true
    Name?: true
    Slug?: true
    Content?: true
    Difficulty?: true
    template?: true
  }

  export type ExerciseMaxAggregateInputType = {
    EID?: true
    TpID?: true
    SPIID?: true
    Name?: true
    Slug?: true
    Content?: true
    Difficulty?: true
    template?: true
  }

  export type ExerciseCountAggregateInputType = {
    EID?: true
    TpID?: true
    SPIID?: true
    Name?: true
    Slug?: true
    Content?: true
    Difficulty?: true
    template?: true
    _all?: true
  }

  export type ExerciseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which exercise to aggregate.
     */
    where?: exerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of exercises to fetch.
     */
    orderBy?: exerciseOrderByWithRelationInput | exerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: exerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned exercises
    **/
    _count?: true | ExerciseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExerciseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExerciseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExerciseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExerciseMaxAggregateInputType
  }

  export type GetExerciseAggregateType<T extends ExerciseAggregateArgs> = {
        [P in keyof T & keyof AggregateExercise]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExercise[P]>
      : GetScalarType<T[P], AggregateExercise[P]>
  }




  export type exerciseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: exerciseWhereInput
    orderBy?: exerciseOrderByWithAggregationInput | exerciseOrderByWithAggregationInput[]
    by: ExerciseScalarFieldEnum[] | ExerciseScalarFieldEnum
    having?: exerciseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExerciseCountAggregateInputType | true
    _avg?: ExerciseAvgAggregateInputType
    _sum?: ExerciseSumAggregateInputType
    _min?: ExerciseMinAggregateInputType
    _max?: ExerciseMaxAggregateInputType
  }

  export type ExerciseGroupByOutputType = {
    EID: number
    TpID: number | null
    SPIID: number | null
    Name: string
    Slug: string
    Content: string
    Difficulty: $Enums.exercise_Difficulty
    template: string | null
    _count: ExerciseCountAggregateOutputType | null
    _avg: ExerciseAvgAggregateOutputType | null
    _sum: ExerciseSumAggregateOutputType | null
    _min: ExerciseMinAggregateOutputType | null
    _max: ExerciseMaxAggregateOutputType | null
  }

  type GetExerciseGroupByPayload<T extends exerciseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExerciseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExerciseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExerciseGroupByOutputType[P]>
            : GetScalarType<T[P], ExerciseGroupByOutputType[P]>
        }
      >
    >


  export type exerciseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    EID?: boolean
    TpID?: boolean
    SPIID?: boolean
    Name?: boolean
    Slug?: boolean
    Content?: boolean
    Difficulty?: boolean
    template?: boolean
    comment?: boolean | exercise$commentArgs<ExtArgs>
    topic?: boolean | exercise$topicArgs<ExtArgs>
    studyplanitem?: boolean | exercise$studyplanitemArgs<ExtArgs>
    exerciselike?: boolean | exercise$exerciselikeArgs<ExtArgs>
    exerciseprogress?: boolean | exercise$exerciseprogressArgs<ExtArgs>
    listitem?: boolean | exercise$listitemArgs<ExtArgs>
    submission?: boolean | exercise$submissionArgs<ExtArgs>
    testcase?: boolean | exercise$testcaseArgs<ExtArgs>
    _count?: boolean | ExerciseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exercise"]>



  export type exerciseSelectScalar = {
    EID?: boolean
    TpID?: boolean
    SPIID?: boolean
    Name?: boolean
    Slug?: boolean
    Content?: boolean
    Difficulty?: boolean
    template?: boolean
  }

  export type exerciseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"EID" | "TpID" | "SPIID" | "Name" | "Slug" | "Content" | "Difficulty" | "template", ExtArgs["result"]["exercise"]>
  export type exerciseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comment?: boolean | exercise$commentArgs<ExtArgs>
    topic?: boolean | exercise$topicArgs<ExtArgs>
    studyplanitem?: boolean | exercise$studyplanitemArgs<ExtArgs>
    exerciselike?: boolean | exercise$exerciselikeArgs<ExtArgs>
    exerciseprogress?: boolean | exercise$exerciseprogressArgs<ExtArgs>
    listitem?: boolean | exercise$listitemArgs<ExtArgs>
    submission?: boolean | exercise$submissionArgs<ExtArgs>
    testcase?: boolean | exercise$testcaseArgs<ExtArgs>
    _count?: boolean | ExerciseCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $exercisePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "exercise"
    objects: {
      comment: Prisma.$commentPayload<ExtArgs>[]
      topic: Prisma.$topicPayload<ExtArgs> | null
      studyplanitem: Prisma.$studyplanitemPayload<ExtArgs> | null
      exerciselike: Prisma.$exerciselikePayload<ExtArgs>[]
      exerciseprogress: Prisma.$exerciseprogressPayload<ExtArgs>[]
      listitem: Prisma.$listitemPayload<ExtArgs>[]
      submission: Prisma.$submissionPayload<ExtArgs>[]
      testcase: Prisma.$testcasePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      EID: number
      TpID: number | null
      SPIID: number | null
      Name: string
      Slug: string
      Content: string
      Difficulty: $Enums.exercise_Difficulty
      template: string | null
    }, ExtArgs["result"]["exercise"]>
    composites: {}
  }

  type exerciseGetPayload<S extends boolean | null | undefined | exerciseDefaultArgs> = $Result.GetResult<Prisma.$exercisePayload, S>

  type exerciseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<exerciseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ExerciseCountAggregateInputType | true
    }

  export interface exerciseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['exercise'], meta: { name: 'exercise' } }
    /**
     * Find zero or one Exercise that matches the filter.
     * @param {exerciseFindUniqueArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends exerciseFindUniqueArgs>(args: SelectSubset<T, exerciseFindUniqueArgs<ExtArgs>>): Prisma__exerciseClient<$Result.GetResult<Prisma.$exercisePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Exercise that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {exerciseFindUniqueOrThrowArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends exerciseFindUniqueOrThrowArgs>(args: SelectSubset<T, exerciseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__exerciseClient<$Result.GetResult<Prisma.$exercisePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Exercise that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exerciseFindFirstArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends exerciseFindFirstArgs>(args?: SelectSubset<T, exerciseFindFirstArgs<ExtArgs>>): Prisma__exerciseClient<$Result.GetResult<Prisma.$exercisePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Exercise that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exerciseFindFirstOrThrowArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends exerciseFindFirstOrThrowArgs>(args?: SelectSubset<T, exerciseFindFirstOrThrowArgs<ExtArgs>>): Prisma__exerciseClient<$Result.GetResult<Prisma.$exercisePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Exercises that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exerciseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Exercises
     * const exercises = await prisma.exercise.findMany()
     * 
     * // Get first 10 Exercises
     * const exercises = await prisma.exercise.findMany({ take: 10 })
     * 
     * // Only select the `EID`
     * const exerciseWithEIDOnly = await prisma.exercise.findMany({ select: { EID: true } })
     * 
     */
    findMany<T extends exerciseFindManyArgs>(args?: SelectSubset<T, exerciseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$exercisePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Exercise.
     * @param {exerciseCreateArgs} args - Arguments to create a Exercise.
     * @example
     * // Create one Exercise
     * const Exercise = await prisma.exercise.create({
     *   data: {
     *     // ... data to create a Exercise
     *   }
     * })
     * 
     */
    create<T extends exerciseCreateArgs>(args: SelectSubset<T, exerciseCreateArgs<ExtArgs>>): Prisma__exerciseClient<$Result.GetResult<Prisma.$exercisePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Exercises.
     * @param {exerciseCreateManyArgs} args - Arguments to create many Exercises.
     * @example
     * // Create many Exercises
     * const exercise = await prisma.exercise.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends exerciseCreateManyArgs>(args?: SelectSubset<T, exerciseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Exercise.
     * @param {exerciseDeleteArgs} args - Arguments to delete one Exercise.
     * @example
     * // Delete one Exercise
     * const Exercise = await prisma.exercise.delete({
     *   where: {
     *     // ... filter to delete one Exercise
     *   }
     * })
     * 
     */
    delete<T extends exerciseDeleteArgs>(args: SelectSubset<T, exerciseDeleteArgs<ExtArgs>>): Prisma__exerciseClient<$Result.GetResult<Prisma.$exercisePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Exercise.
     * @param {exerciseUpdateArgs} args - Arguments to update one Exercise.
     * @example
     * // Update one Exercise
     * const exercise = await prisma.exercise.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends exerciseUpdateArgs>(args: SelectSubset<T, exerciseUpdateArgs<ExtArgs>>): Prisma__exerciseClient<$Result.GetResult<Prisma.$exercisePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Exercises.
     * @param {exerciseDeleteManyArgs} args - Arguments to filter Exercises to delete.
     * @example
     * // Delete a few Exercises
     * const { count } = await prisma.exercise.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends exerciseDeleteManyArgs>(args?: SelectSubset<T, exerciseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exerciseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Exercises
     * const exercise = await prisma.exercise.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends exerciseUpdateManyArgs>(args: SelectSubset<T, exerciseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Exercise.
     * @param {exerciseUpsertArgs} args - Arguments to update or create a Exercise.
     * @example
     * // Update or create a Exercise
     * const exercise = await prisma.exercise.upsert({
     *   create: {
     *     // ... data to create a Exercise
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Exercise we want to update
     *   }
     * })
     */
    upsert<T extends exerciseUpsertArgs>(args: SelectSubset<T, exerciseUpsertArgs<ExtArgs>>): Prisma__exerciseClient<$Result.GetResult<Prisma.$exercisePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Exercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exerciseCountArgs} args - Arguments to filter Exercises to count.
     * @example
     * // Count the number of Exercises
     * const count = await prisma.exercise.count({
     *   where: {
     *     // ... the filter for the Exercises we want to count
     *   }
     * })
    **/
    count<T extends exerciseCountArgs>(
      args?: Subset<T, exerciseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExerciseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Exercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExerciseAggregateArgs>(args: Subset<T, ExerciseAggregateArgs>): Prisma.PrismaPromise<GetExerciseAggregateType<T>>

    /**
     * Group by Exercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exerciseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends exerciseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: exerciseGroupByArgs['orderBy'] }
        : { orderBy?: exerciseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, exerciseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExerciseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the exercise model
   */
  readonly fields: exerciseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for exercise.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__exerciseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    comment<T extends exercise$commentArgs<ExtArgs> = {}>(args?: Subset<T, exercise$commentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$commentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    topic<T extends exercise$topicArgs<ExtArgs> = {}>(args?: Subset<T, exercise$topicArgs<ExtArgs>>): Prisma__topicClient<$Result.GetResult<Prisma.$topicPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    studyplanitem<T extends exercise$studyplanitemArgs<ExtArgs> = {}>(args?: Subset<T, exercise$studyplanitemArgs<ExtArgs>>): Prisma__studyplanitemClient<$Result.GetResult<Prisma.$studyplanitemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    exerciselike<T extends exercise$exerciselikeArgs<ExtArgs> = {}>(args?: Subset<T, exercise$exerciselikeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$exerciselikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    exerciseprogress<T extends exercise$exerciseprogressArgs<ExtArgs> = {}>(args?: Subset<T, exercise$exerciseprogressArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$exerciseprogressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    listitem<T extends exercise$listitemArgs<ExtArgs> = {}>(args?: Subset<T, exercise$listitemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$listitemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    submission<T extends exercise$submissionArgs<ExtArgs> = {}>(args?: Subset<T, exercise$submissionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$submissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    testcase<T extends exercise$testcaseArgs<ExtArgs> = {}>(args?: Subset<T, exercise$testcaseArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$testcasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the exercise model
   */
  interface exerciseFieldRefs {
    readonly EID: FieldRef<"exercise", 'Int'>
    readonly TpID: FieldRef<"exercise", 'Int'>
    readonly SPIID: FieldRef<"exercise", 'Int'>
    readonly Name: FieldRef<"exercise", 'String'>
    readonly Slug: FieldRef<"exercise", 'String'>
    readonly Content: FieldRef<"exercise", 'String'>
    readonly Difficulty: FieldRef<"exercise", 'exercise_Difficulty'>
    readonly template: FieldRef<"exercise", 'String'>
  }
    

  // Custom InputTypes
  /**
   * exercise findUnique
   */
  export type exerciseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise
     */
    select?: exerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise
     */
    omit?: exerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciseInclude<ExtArgs> | null
    /**
     * Filter, which exercise to fetch.
     */
    where: exerciseWhereUniqueInput
  }

  /**
   * exercise findUniqueOrThrow
   */
  export type exerciseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise
     */
    select?: exerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise
     */
    omit?: exerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciseInclude<ExtArgs> | null
    /**
     * Filter, which exercise to fetch.
     */
    where: exerciseWhereUniqueInput
  }

  /**
   * exercise findFirst
   */
  export type exerciseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise
     */
    select?: exerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise
     */
    omit?: exerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciseInclude<ExtArgs> | null
    /**
     * Filter, which exercise to fetch.
     */
    where?: exerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of exercises to fetch.
     */
    orderBy?: exerciseOrderByWithRelationInput | exerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for exercises.
     */
    cursor?: exerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of exercises.
     */
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }

  /**
   * exercise findFirstOrThrow
   */
  export type exerciseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise
     */
    select?: exerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise
     */
    omit?: exerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciseInclude<ExtArgs> | null
    /**
     * Filter, which exercise to fetch.
     */
    where?: exerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of exercises to fetch.
     */
    orderBy?: exerciseOrderByWithRelationInput | exerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for exercises.
     */
    cursor?: exerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of exercises.
     */
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }

  /**
   * exercise findMany
   */
  export type exerciseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise
     */
    select?: exerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise
     */
    omit?: exerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciseInclude<ExtArgs> | null
    /**
     * Filter, which exercises to fetch.
     */
    where?: exerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of exercises to fetch.
     */
    orderBy?: exerciseOrderByWithRelationInput | exerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing exercises.
     */
    cursor?: exerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` exercises.
     */
    skip?: number
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }

  /**
   * exercise create
   */
  export type exerciseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise
     */
    select?: exerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise
     */
    omit?: exerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciseInclude<ExtArgs> | null
    /**
     * The data needed to create a exercise.
     */
    data: XOR<exerciseCreateInput, exerciseUncheckedCreateInput>
  }

  /**
   * exercise createMany
   */
  export type exerciseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many exercises.
     */
    data: exerciseCreateManyInput | exerciseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * exercise update
   */
  export type exerciseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise
     */
    select?: exerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise
     */
    omit?: exerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciseInclude<ExtArgs> | null
    /**
     * The data needed to update a exercise.
     */
    data: XOR<exerciseUpdateInput, exerciseUncheckedUpdateInput>
    /**
     * Choose, which exercise to update.
     */
    where: exerciseWhereUniqueInput
  }

  /**
   * exercise updateMany
   */
  export type exerciseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update exercises.
     */
    data: XOR<exerciseUpdateManyMutationInput, exerciseUncheckedUpdateManyInput>
    /**
     * Filter which exercises to update
     */
    where?: exerciseWhereInput
    /**
     * Limit how many exercises to update.
     */
    limit?: number
  }

  /**
   * exercise upsert
   */
  export type exerciseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise
     */
    select?: exerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise
     */
    omit?: exerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciseInclude<ExtArgs> | null
    /**
     * The filter to search for the exercise to update in case it exists.
     */
    where: exerciseWhereUniqueInput
    /**
     * In case the exercise found by the `where` argument doesn't exist, create a new exercise with this data.
     */
    create: XOR<exerciseCreateInput, exerciseUncheckedCreateInput>
    /**
     * In case the exercise was found with the provided `where` argument, update it with this data.
     */
    update: XOR<exerciseUpdateInput, exerciseUncheckedUpdateInput>
  }

  /**
   * exercise delete
   */
  export type exerciseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise
     */
    select?: exerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise
     */
    omit?: exerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciseInclude<ExtArgs> | null
    /**
     * Filter which exercise to delete.
     */
    where: exerciseWhereUniqueInput
  }

  /**
   * exercise deleteMany
   */
  export type exerciseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which exercises to delete
     */
    where?: exerciseWhereInput
    /**
     * Limit how many exercises to delete.
     */
    limit?: number
  }

  /**
   * exercise.comment
   */
  export type exercise$commentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the comment
     */
    omit?: commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentInclude<ExtArgs> | null
    where?: commentWhereInput
    orderBy?: commentOrderByWithRelationInput | commentOrderByWithRelationInput[]
    cursor?: commentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * exercise.topic
   */
  export type exercise$topicArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the topic
     */
    select?: topicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the topic
     */
    omit?: topicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: topicInclude<ExtArgs> | null
    where?: topicWhereInput
  }

  /**
   * exercise.studyplanitem
   */
  export type exercise$studyplanitemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studyplanitem
     */
    select?: studyplanitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the studyplanitem
     */
    omit?: studyplanitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studyplanitemInclude<ExtArgs> | null
    where?: studyplanitemWhereInput
  }

  /**
   * exercise.exerciselike
   */
  export type exercise$exerciselikeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exerciselike
     */
    select?: exerciselikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exerciselike
     */
    omit?: exerciselikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciselikeInclude<ExtArgs> | null
    where?: exerciselikeWhereInput
    orderBy?: exerciselikeOrderByWithRelationInput | exerciselikeOrderByWithRelationInput[]
    cursor?: exerciselikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExerciselikeScalarFieldEnum | ExerciselikeScalarFieldEnum[]
  }

  /**
   * exercise.exerciseprogress
   */
  export type exercise$exerciseprogressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exerciseprogress
     */
    select?: exerciseprogressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exerciseprogress
     */
    omit?: exerciseprogressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciseprogressInclude<ExtArgs> | null
    where?: exerciseprogressWhereInput
    orderBy?: exerciseprogressOrderByWithRelationInput | exerciseprogressOrderByWithRelationInput[]
    cursor?: exerciseprogressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExerciseprogressScalarFieldEnum | ExerciseprogressScalarFieldEnum[]
  }

  /**
   * exercise.listitem
   */
  export type exercise$listitemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the listitem
     */
    select?: listitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the listitem
     */
    omit?: listitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: listitemInclude<ExtArgs> | null
    where?: listitemWhereInput
    orderBy?: listitemOrderByWithRelationInput | listitemOrderByWithRelationInput[]
    cursor?: listitemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ListitemScalarFieldEnum | ListitemScalarFieldEnum[]
  }

  /**
   * exercise.submission
   */
  export type exercise$submissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the submission
     */
    select?: submissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the submission
     */
    omit?: submissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: submissionInclude<ExtArgs> | null
    where?: submissionWhereInput
    orderBy?: submissionOrderByWithRelationInput | submissionOrderByWithRelationInput[]
    cursor?: submissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * exercise.testcase
   */
  export type exercise$testcaseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the testcase
     */
    select?: testcaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the testcase
     */
    omit?: testcaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: testcaseInclude<ExtArgs> | null
    where?: testcaseWhereInput
    orderBy?: testcaseOrderByWithRelationInput | testcaseOrderByWithRelationInput[]
    cursor?: testcaseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TestcaseScalarFieldEnum | TestcaseScalarFieldEnum[]
  }

  /**
   * exercise without action
   */
  export type exerciseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise
     */
    select?: exerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise
     */
    omit?: exerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciseInclude<ExtArgs> | null
  }


  /**
   * Model submission
   */

  export type AggregateSubmission = {
    _count: SubmissionCountAggregateOutputType | null
    _avg: SubmissionAvgAggregateOutputType | null
    _sum: SubmissionSumAggregateOutputType | null
    _min: SubmissionMinAggregateOutputType | null
    _max: SubmissionMaxAggregateOutputType | null
  }

  export type SubmissionAvgAggregateOutputType = {
    SID: number | null
    EID: number | null
  }

  export type SubmissionSumAggregateOutputType = {
    SID: number | null
    EID: number | null
  }

  export type SubmissionMinAggregateOutputType = {
    SID: number | null
    UID: string | null
    EID: number | null
    Code: string | null
    CreatedAt: Date | null
    Result: $Enums.submission_Result | null
    isPublic: boolean | null
  }

  export type SubmissionMaxAggregateOutputType = {
    SID: number | null
    UID: string | null
    EID: number | null
    Code: string | null
    CreatedAt: Date | null
    Result: $Enums.submission_Result | null
    isPublic: boolean | null
  }

  export type SubmissionCountAggregateOutputType = {
    SID: number
    UID: number
    EID: number
    Code: number
    CreatedAt: number
    Result: number
    isPublic: number
    _all: number
  }


  export type SubmissionAvgAggregateInputType = {
    SID?: true
    EID?: true
  }

  export type SubmissionSumAggregateInputType = {
    SID?: true
    EID?: true
  }

  export type SubmissionMinAggregateInputType = {
    SID?: true
    UID?: true
    EID?: true
    Code?: true
    CreatedAt?: true
    Result?: true
    isPublic?: true
  }

  export type SubmissionMaxAggregateInputType = {
    SID?: true
    UID?: true
    EID?: true
    Code?: true
    CreatedAt?: true
    Result?: true
    isPublic?: true
  }

  export type SubmissionCountAggregateInputType = {
    SID?: true
    UID?: true
    EID?: true
    Code?: true
    CreatedAt?: true
    Result?: true
    isPublic?: true
    _all?: true
  }

  export type SubmissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which submission to aggregate.
     */
    where?: submissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of submissions to fetch.
     */
    orderBy?: submissionOrderByWithRelationInput | submissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: submissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` submissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned submissions
    **/
    _count?: true | SubmissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubmissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubmissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubmissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubmissionMaxAggregateInputType
  }

  export type GetSubmissionAggregateType<T extends SubmissionAggregateArgs> = {
        [P in keyof T & keyof AggregateSubmission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubmission[P]>
      : GetScalarType<T[P], AggregateSubmission[P]>
  }




  export type submissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: submissionWhereInput
    orderBy?: submissionOrderByWithAggregationInput | submissionOrderByWithAggregationInput[]
    by: SubmissionScalarFieldEnum[] | SubmissionScalarFieldEnum
    having?: submissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubmissionCountAggregateInputType | true
    _avg?: SubmissionAvgAggregateInputType
    _sum?: SubmissionSumAggregateInputType
    _min?: SubmissionMinAggregateInputType
    _max?: SubmissionMaxAggregateInputType
  }

  export type SubmissionGroupByOutputType = {
    SID: number
    UID: string
    EID: number
    Code: string | null
    CreatedAt: Date | null
    Result: $Enums.submission_Result | null
    isPublic: boolean | null
    _count: SubmissionCountAggregateOutputType | null
    _avg: SubmissionAvgAggregateOutputType | null
    _sum: SubmissionSumAggregateOutputType | null
    _min: SubmissionMinAggregateOutputType | null
    _max: SubmissionMaxAggregateOutputType | null
  }

  type GetSubmissionGroupByPayload<T extends submissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubmissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubmissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubmissionGroupByOutputType[P]>
            : GetScalarType<T[P], SubmissionGroupByOutputType[P]>
        }
      >
    >


  export type submissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    SID?: boolean
    UID?: boolean
    EID?: boolean
    Code?: boolean
    CreatedAt?: boolean
    Result?: boolean
    isPublic?: boolean
    exercise?: boolean | exerciseDefaultArgs<ExtArgs>
    user?: boolean | userDefaultArgs<ExtArgs>
    testcaseresult?: boolean | submission$testcaseresultArgs<ExtArgs>
    _count?: boolean | SubmissionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submission"]>



  export type submissionSelectScalar = {
    SID?: boolean
    UID?: boolean
    EID?: boolean
    Code?: boolean
    CreatedAt?: boolean
    Result?: boolean
    isPublic?: boolean
  }

  export type submissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"SID" | "UID" | "EID" | "Code" | "CreatedAt" | "Result" | "isPublic", ExtArgs["result"]["submission"]>
  export type submissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercise?: boolean | exerciseDefaultArgs<ExtArgs>
    user?: boolean | userDefaultArgs<ExtArgs>
    testcaseresult?: boolean | submission$testcaseresultArgs<ExtArgs>
    _count?: boolean | SubmissionCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $submissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "submission"
    objects: {
      exercise: Prisma.$exercisePayload<ExtArgs>
      user: Prisma.$userPayload<ExtArgs>
      testcaseresult: Prisma.$testcaseresultPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      SID: number
      UID: string
      EID: number
      Code: string | null
      CreatedAt: Date | null
      Result: $Enums.submission_Result | null
      isPublic: boolean | null
    }, ExtArgs["result"]["submission"]>
    composites: {}
  }

  type submissionGetPayload<S extends boolean | null | undefined | submissionDefaultArgs> = $Result.GetResult<Prisma.$submissionPayload, S>

  type submissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<submissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubmissionCountAggregateInputType | true
    }

  export interface submissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['submission'], meta: { name: 'submission' } }
    /**
     * Find zero or one Submission that matches the filter.
     * @param {submissionFindUniqueArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends submissionFindUniqueArgs>(args: SelectSubset<T, submissionFindUniqueArgs<ExtArgs>>): Prisma__submissionClient<$Result.GetResult<Prisma.$submissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Submission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {submissionFindUniqueOrThrowArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends submissionFindUniqueOrThrowArgs>(args: SelectSubset<T, submissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__submissionClient<$Result.GetResult<Prisma.$submissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Submission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {submissionFindFirstArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends submissionFindFirstArgs>(args?: SelectSubset<T, submissionFindFirstArgs<ExtArgs>>): Prisma__submissionClient<$Result.GetResult<Prisma.$submissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Submission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {submissionFindFirstOrThrowArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends submissionFindFirstOrThrowArgs>(args?: SelectSubset<T, submissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__submissionClient<$Result.GetResult<Prisma.$submissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Submissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {submissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Submissions
     * const submissions = await prisma.submission.findMany()
     * 
     * // Get first 10 Submissions
     * const submissions = await prisma.submission.findMany({ take: 10 })
     * 
     * // Only select the `SID`
     * const submissionWithSIDOnly = await prisma.submission.findMany({ select: { SID: true } })
     * 
     */
    findMany<T extends submissionFindManyArgs>(args?: SelectSubset<T, submissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$submissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Submission.
     * @param {submissionCreateArgs} args - Arguments to create a Submission.
     * @example
     * // Create one Submission
     * const Submission = await prisma.submission.create({
     *   data: {
     *     // ... data to create a Submission
     *   }
     * })
     * 
     */
    create<T extends submissionCreateArgs>(args: SelectSubset<T, submissionCreateArgs<ExtArgs>>): Prisma__submissionClient<$Result.GetResult<Prisma.$submissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Submissions.
     * @param {submissionCreateManyArgs} args - Arguments to create many Submissions.
     * @example
     * // Create many Submissions
     * const submission = await prisma.submission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends submissionCreateManyArgs>(args?: SelectSubset<T, submissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Submission.
     * @param {submissionDeleteArgs} args - Arguments to delete one Submission.
     * @example
     * // Delete one Submission
     * const Submission = await prisma.submission.delete({
     *   where: {
     *     // ... filter to delete one Submission
     *   }
     * })
     * 
     */
    delete<T extends submissionDeleteArgs>(args: SelectSubset<T, submissionDeleteArgs<ExtArgs>>): Prisma__submissionClient<$Result.GetResult<Prisma.$submissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Submission.
     * @param {submissionUpdateArgs} args - Arguments to update one Submission.
     * @example
     * // Update one Submission
     * const submission = await prisma.submission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends submissionUpdateArgs>(args: SelectSubset<T, submissionUpdateArgs<ExtArgs>>): Prisma__submissionClient<$Result.GetResult<Prisma.$submissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Submissions.
     * @param {submissionDeleteManyArgs} args - Arguments to filter Submissions to delete.
     * @example
     * // Delete a few Submissions
     * const { count } = await prisma.submission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends submissionDeleteManyArgs>(args?: SelectSubset<T, submissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Submissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {submissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Submissions
     * const submission = await prisma.submission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends submissionUpdateManyArgs>(args: SelectSubset<T, submissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Submission.
     * @param {submissionUpsertArgs} args - Arguments to update or create a Submission.
     * @example
     * // Update or create a Submission
     * const submission = await prisma.submission.upsert({
     *   create: {
     *     // ... data to create a Submission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Submission we want to update
     *   }
     * })
     */
    upsert<T extends submissionUpsertArgs>(args: SelectSubset<T, submissionUpsertArgs<ExtArgs>>): Prisma__submissionClient<$Result.GetResult<Prisma.$submissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Submissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {submissionCountArgs} args - Arguments to filter Submissions to count.
     * @example
     * // Count the number of Submissions
     * const count = await prisma.submission.count({
     *   where: {
     *     // ... the filter for the Submissions we want to count
     *   }
     * })
    **/
    count<T extends submissionCountArgs>(
      args?: Subset<T, submissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubmissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Submission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubmissionAggregateArgs>(args: Subset<T, SubmissionAggregateArgs>): Prisma.PrismaPromise<GetSubmissionAggregateType<T>>

    /**
     * Group by Submission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {submissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends submissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: submissionGroupByArgs['orderBy'] }
        : { orderBy?: submissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, submissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubmissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the submission model
   */
  readonly fields: submissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for submission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__submissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    exercise<T extends exerciseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, exerciseDefaultArgs<ExtArgs>>): Prisma__exerciseClient<$Result.GetResult<Prisma.$exercisePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    testcaseresult<T extends submission$testcaseresultArgs<ExtArgs> = {}>(args?: Subset<T, submission$testcaseresultArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$testcaseresultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the submission model
   */
  interface submissionFieldRefs {
    readonly SID: FieldRef<"submission", 'Int'>
    readonly UID: FieldRef<"submission", 'String'>
    readonly EID: FieldRef<"submission", 'Int'>
    readonly Code: FieldRef<"submission", 'String'>
    readonly CreatedAt: FieldRef<"submission", 'DateTime'>
    readonly Result: FieldRef<"submission", 'submission_Result'>
    readonly isPublic: FieldRef<"submission", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * submission findUnique
   */
  export type submissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the submission
     */
    select?: submissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the submission
     */
    omit?: submissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: submissionInclude<ExtArgs> | null
    /**
     * Filter, which submission to fetch.
     */
    where: submissionWhereUniqueInput
  }

  /**
   * submission findUniqueOrThrow
   */
  export type submissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the submission
     */
    select?: submissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the submission
     */
    omit?: submissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: submissionInclude<ExtArgs> | null
    /**
     * Filter, which submission to fetch.
     */
    where: submissionWhereUniqueInput
  }

  /**
   * submission findFirst
   */
  export type submissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the submission
     */
    select?: submissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the submission
     */
    omit?: submissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: submissionInclude<ExtArgs> | null
    /**
     * Filter, which submission to fetch.
     */
    where?: submissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of submissions to fetch.
     */
    orderBy?: submissionOrderByWithRelationInput | submissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for submissions.
     */
    cursor?: submissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` submissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of submissions.
     */
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * submission findFirstOrThrow
   */
  export type submissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the submission
     */
    select?: submissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the submission
     */
    omit?: submissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: submissionInclude<ExtArgs> | null
    /**
     * Filter, which submission to fetch.
     */
    where?: submissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of submissions to fetch.
     */
    orderBy?: submissionOrderByWithRelationInput | submissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for submissions.
     */
    cursor?: submissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` submissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of submissions.
     */
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * submission findMany
   */
  export type submissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the submission
     */
    select?: submissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the submission
     */
    omit?: submissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: submissionInclude<ExtArgs> | null
    /**
     * Filter, which submissions to fetch.
     */
    where?: submissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of submissions to fetch.
     */
    orderBy?: submissionOrderByWithRelationInput | submissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing submissions.
     */
    cursor?: submissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` submissions.
     */
    skip?: number
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * submission create
   */
  export type submissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the submission
     */
    select?: submissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the submission
     */
    omit?: submissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: submissionInclude<ExtArgs> | null
    /**
     * The data needed to create a submission.
     */
    data: XOR<submissionCreateInput, submissionUncheckedCreateInput>
  }

  /**
   * submission createMany
   */
  export type submissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many submissions.
     */
    data: submissionCreateManyInput | submissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * submission update
   */
  export type submissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the submission
     */
    select?: submissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the submission
     */
    omit?: submissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: submissionInclude<ExtArgs> | null
    /**
     * The data needed to update a submission.
     */
    data: XOR<submissionUpdateInput, submissionUncheckedUpdateInput>
    /**
     * Choose, which submission to update.
     */
    where: submissionWhereUniqueInput
  }

  /**
   * submission updateMany
   */
  export type submissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update submissions.
     */
    data: XOR<submissionUpdateManyMutationInput, submissionUncheckedUpdateManyInput>
    /**
     * Filter which submissions to update
     */
    where?: submissionWhereInput
    /**
     * Limit how many submissions to update.
     */
    limit?: number
  }

  /**
   * submission upsert
   */
  export type submissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the submission
     */
    select?: submissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the submission
     */
    omit?: submissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: submissionInclude<ExtArgs> | null
    /**
     * The filter to search for the submission to update in case it exists.
     */
    where: submissionWhereUniqueInput
    /**
     * In case the submission found by the `where` argument doesn't exist, create a new submission with this data.
     */
    create: XOR<submissionCreateInput, submissionUncheckedCreateInput>
    /**
     * In case the submission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<submissionUpdateInput, submissionUncheckedUpdateInput>
  }

  /**
   * submission delete
   */
  export type submissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the submission
     */
    select?: submissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the submission
     */
    omit?: submissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: submissionInclude<ExtArgs> | null
    /**
     * Filter which submission to delete.
     */
    where: submissionWhereUniqueInput
  }

  /**
   * submission deleteMany
   */
  export type submissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which submissions to delete
     */
    where?: submissionWhereInput
    /**
     * Limit how many submissions to delete.
     */
    limit?: number
  }

  /**
   * submission.testcaseresult
   */
  export type submission$testcaseresultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the testcaseresult
     */
    select?: testcaseresultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the testcaseresult
     */
    omit?: testcaseresultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: testcaseresultInclude<ExtArgs> | null
    where?: testcaseresultWhereInput
    orderBy?: testcaseresultOrderByWithRelationInput | testcaseresultOrderByWithRelationInput[]
    cursor?: testcaseresultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TestcaseresultScalarFieldEnum | TestcaseresultScalarFieldEnum[]
  }

  /**
   * submission without action
   */
  export type submissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the submission
     */
    select?: submissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the submission
     */
    omit?: submissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: submissionInclude<ExtArgs> | null
  }


  /**
   * Model testcase
   */

  export type AggregateTestcase = {
    _count: TestcaseCountAggregateOutputType | null
    _avg: TestcaseAvgAggregateOutputType | null
    _sum: TestcaseSumAggregateOutputType | null
    _min: TestcaseMinAggregateOutputType | null
    _max: TestcaseMaxAggregateOutputType | null
  }

  export type TestcaseAvgAggregateOutputType = {
    TCID: number | null
    EID: number | null
  }

  export type TestcaseSumAggregateOutputType = {
    TCID: number | null
    EID: number | null
  }

  export type TestcaseMinAggregateOutputType = {
    TCID: number | null
    EID: number | null
    Input: string | null
    ExpectedOutput: string | null
    isHidden: boolean | null
  }

  export type TestcaseMaxAggregateOutputType = {
    TCID: number | null
    EID: number | null
    Input: string | null
    ExpectedOutput: string | null
    isHidden: boolean | null
  }

  export type TestcaseCountAggregateOutputType = {
    TCID: number
    EID: number
    Input: number
    ExpectedOutput: number
    isHidden: number
    _all: number
  }


  export type TestcaseAvgAggregateInputType = {
    TCID?: true
    EID?: true
  }

  export type TestcaseSumAggregateInputType = {
    TCID?: true
    EID?: true
  }

  export type TestcaseMinAggregateInputType = {
    TCID?: true
    EID?: true
    Input?: true
    ExpectedOutput?: true
    isHidden?: true
  }

  export type TestcaseMaxAggregateInputType = {
    TCID?: true
    EID?: true
    Input?: true
    ExpectedOutput?: true
    isHidden?: true
  }

  export type TestcaseCountAggregateInputType = {
    TCID?: true
    EID?: true
    Input?: true
    ExpectedOutput?: true
    isHidden?: true
    _all?: true
  }

  export type TestcaseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which testcase to aggregate.
     */
    where?: testcaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of testcases to fetch.
     */
    orderBy?: testcaseOrderByWithRelationInput | testcaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: testcaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` testcases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` testcases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned testcases
    **/
    _count?: true | TestcaseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TestcaseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TestcaseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TestcaseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TestcaseMaxAggregateInputType
  }

  export type GetTestcaseAggregateType<T extends TestcaseAggregateArgs> = {
        [P in keyof T & keyof AggregateTestcase]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTestcase[P]>
      : GetScalarType<T[P], AggregateTestcase[P]>
  }




  export type testcaseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: testcaseWhereInput
    orderBy?: testcaseOrderByWithAggregationInput | testcaseOrderByWithAggregationInput[]
    by: TestcaseScalarFieldEnum[] | TestcaseScalarFieldEnum
    having?: testcaseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TestcaseCountAggregateInputType | true
    _avg?: TestcaseAvgAggregateInputType
    _sum?: TestcaseSumAggregateInputType
    _min?: TestcaseMinAggregateInputType
    _max?: TestcaseMaxAggregateInputType
  }

  export type TestcaseGroupByOutputType = {
    TCID: number
    EID: number
    Input: string | null
    ExpectedOutput: string
    isHidden: boolean | null
    _count: TestcaseCountAggregateOutputType | null
    _avg: TestcaseAvgAggregateOutputType | null
    _sum: TestcaseSumAggregateOutputType | null
    _min: TestcaseMinAggregateOutputType | null
    _max: TestcaseMaxAggregateOutputType | null
  }

  type GetTestcaseGroupByPayload<T extends testcaseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TestcaseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TestcaseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TestcaseGroupByOutputType[P]>
            : GetScalarType<T[P], TestcaseGroupByOutputType[P]>
        }
      >
    >


  export type testcaseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    TCID?: boolean
    EID?: boolean
    Input?: boolean
    ExpectedOutput?: boolean
    isHidden?: boolean
    exercise?: boolean | exerciseDefaultArgs<ExtArgs>
    testcaseresult?: boolean | testcase$testcaseresultArgs<ExtArgs>
    _count?: boolean | TestcaseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["testcase"]>



  export type testcaseSelectScalar = {
    TCID?: boolean
    EID?: boolean
    Input?: boolean
    ExpectedOutput?: boolean
    isHidden?: boolean
  }

  export type testcaseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"TCID" | "EID" | "Input" | "ExpectedOutput" | "isHidden", ExtArgs["result"]["testcase"]>
  export type testcaseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercise?: boolean | exerciseDefaultArgs<ExtArgs>
    testcaseresult?: boolean | testcase$testcaseresultArgs<ExtArgs>
    _count?: boolean | TestcaseCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $testcasePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "testcase"
    objects: {
      exercise: Prisma.$exercisePayload<ExtArgs>
      testcaseresult: Prisma.$testcaseresultPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      TCID: number
      EID: number
      Input: string | null
      ExpectedOutput: string
      isHidden: boolean | null
    }, ExtArgs["result"]["testcase"]>
    composites: {}
  }

  type testcaseGetPayload<S extends boolean | null | undefined | testcaseDefaultArgs> = $Result.GetResult<Prisma.$testcasePayload, S>

  type testcaseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<testcaseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TestcaseCountAggregateInputType | true
    }

  export interface testcaseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['testcase'], meta: { name: 'testcase' } }
    /**
     * Find zero or one Testcase that matches the filter.
     * @param {testcaseFindUniqueArgs} args - Arguments to find a Testcase
     * @example
     * // Get one Testcase
     * const testcase = await prisma.testcase.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends testcaseFindUniqueArgs>(args: SelectSubset<T, testcaseFindUniqueArgs<ExtArgs>>): Prisma__testcaseClient<$Result.GetResult<Prisma.$testcasePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Testcase that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {testcaseFindUniqueOrThrowArgs} args - Arguments to find a Testcase
     * @example
     * // Get one Testcase
     * const testcase = await prisma.testcase.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends testcaseFindUniqueOrThrowArgs>(args: SelectSubset<T, testcaseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__testcaseClient<$Result.GetResult<Prisma.$testcasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Testcase that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {testcaseFindFirstArgs} args - Arguments to find a Testcase
     * @example
     * // Get one Testcase
     * const testcase = await prisma.testcase.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends testcaseFindFirstArgs>(args?: SelectSubset<T, testcaseFindFirstArgs<ExtArgs>>): Prisma__testcaseClient<$Result.GetResult<Prisma.$testcasePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Testcase that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {testcaseFindFirstOrThrowArgs} args - Arguments to find a Testcase
     * @example
     * // Get one Testcase
     * const testcase = await prisma.testcase.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends testcaseFindFirstOrThrowArgs>(args?: SelectSubset<T, testcaseFindFirstOrThrowArgs<ExtArgs>>): Prisma__testcaseClient<$Result.GetResult<Prisma.$testcasePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Testcases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {testcaseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Testcases
     * const testcases = await prisma.testcase.findMany()
     * 
     * // Get first 10 Testcases
     * const testcases = await prisma.testcase.findMany({ take: 10 })
     * 
     * // Only select the `TCID`
     * const testcaseWithTCIDOnly = await prisma.testcase.findMany({ select: { TCID: true } })
     * 
     */
    findMany<T extends testcaseFindManyArgs>(args?: SelectSubset<T, testcaseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$testcasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Testcase.
     * @param {testcaseCreateArgs} args - Arguments to create a Testcase.
     * @example
     * // Create one Testcase
     * const Testcase = await prisma.testcase.create({
     *   data: {
     *     // ... data to create a Testcase
     *   }
     * })
     * 
     */
    create<T extends testcaseCreateArgs>(args: SelectSubset<T, testcaseCreateArgs<ExtArgs>>): Prisma__testcaseClient<$Result.GetResult<Prisma.$testcasePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Testcases.
     * @param {testcaseCreateManyArgs} args - Arguments to create many Testcases.
     * @example
     * // Create many Testcases
     * const testcase = await prisma.testcase.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends testcaseCreateManyArgs>(args?: SelectSubset<T, testcaseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Testcase.
     * @param {testcaseDeleteArgs} args - Arguments to delete one Testcase.
     * @example
     * // Delete one Testcase
     * const Testcase = await prisma.testcase.delete({
     *   where: {
     *     // ... filter to delete one Testcase
     *   }
     * })
     * 
     */
    delete<T extends testcaseDeleteArgs>(args: SelectSubset<T, testcaseDeleteArgs<ExtArgs>>): Prisma__testcaseClient<$Result.GetResult<Prisma.$testcasePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Testcase.
     * @param {testcaseUpdateArgs} args - Arguments to update one Testcase.
     * @example
     * // Update one Testcase
     * const testcase = await prisma.testcase.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends testcaseUpdateArgs>(args: SelectSubset<T, testcaseUpdateArgs<ExtArgs>>): Prisma__testcaseClient<$Result.GetResult<Prisma.$testcasePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Testcases.
     * @param {testcaseDeleteManyArgs} args - Arguments to filter Testcases to delete.
     * @example
     * // Delete a few Testcases
     * const { count } = await prisma.testcase.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends testcaseDeleteManyArgs>(args?: SelectSubset<T, testcaseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Testcases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {testcaseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Testcases
     * const testcase = await prisma.testcase.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends testcaseUpdateManyArgs>(args: SelectSubset<T, testcaseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Testcase.
     * @param {testcaseUpsertArgs} args - Arguments to update or create a Testcase.
     * @example
     * // Update or create a Testcase
     * const testcase = await prisma.testcase.upsert({
     *   create: {
     *     // ... data to create a Testcase
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Testcase we want to update
     *   }
     * })
     */
    upsert<T extends testcaseUpsertArgs>(args: SelectSubset<T, testcaseUpsertArgs<ExtArgs>>): Prisma__testcaseClient<$Result.GetResult<Prisma.$testcasePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Testcases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {testcaseCountArgs} args - Arguments to filter Testcases to count.
     * @example
     * // Count the number of Testcases
     * const count = await prisma.testcase.count({
     *   where: {
     *     // ... the filter for the Testcases we want to count
     *   }
     * })
    **/
    count<T extends testcaseCountArgs>(
      args?: Subset<T, testcaseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TestcaseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Testcase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestcaseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TestcaseAggregateArgs>(args: Subset<T, TestcaseAggregateArgs>): Prisma.PrismaPromise<GetTestcaseAggregateType<T>>

    /**
     * Group by Testcase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {testcaseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends testcaseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: testcaseGroupByArgs['orderBy'] }
        : { orderBy?: testcaseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, testcaseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTestcaseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the testcase model
   */
  readonly fields: testcaseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for testcase.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__testcaseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    exercise<T extends exerciseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, exerciseDefaultArgs<ExtArgs>>): Prisma__exerciseClient<$Result.GetResult<Prisma.$exercisePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    testcaseresult<T extends testcase$testcaseresultArgs<ExtArgs> = {}>(args?: Subset<T, testcase$testcaseresultArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$testcaseresultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the testcase model
   */
  interface testcaseFieldRefs {
    readonly TCID: FieldRef<"testcase", 'Int'>
    readonly EID: FieldRef<"testcase", 'Int'>
    readonly Input: FieldRef<"testcase", 'String'>
    readonly ExpectedOutput: FieldRef<"testcase", 'String'>
    readonly isHidden: FieldRef<"testcase", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * testcase findUnique
   */
  export type testcaseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the testcase
     */
    select?: testcaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the testcase
     */
    omit?: testcaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: testcaseInclude<ExtArgs> | null
    /**
     * Filter, which testcase to fetch.
     */
    where: testcaseWhereUniqueInput
  }

  /**
   * testcase findUniqueOrThrow
   */
  export type testcaseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the testcase
     */
    select?: testcaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the testcase
     */
    omit?: testcaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: testcaseInclude<ExtArgs> | null
    /**
     * Filter, which testcase to fetch.
     */
    where: testcaseWhereUniqueInput
  }

  /**
   * testcase findFirst
   */
  export type testcaseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the testcase
     */
    select?: testcaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the testcase
     */
    omit?: testcaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: testcaseInclude<ExtArgs> | null
    /**
     * Filter, which testcase to fetch.
     */
    where?: testcaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of testcases to fetch.
     */
    orderBy?: testcaseOrderByWithRelationInput | testcaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for testcases.
     */
    cursor?: testcaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` testcases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` testcases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of testcases.
     */
    distinct?: TestcaseScalarFieldEnum | TestcaseScalarFieldEnum[]
  }

  /**
   * testcase findFirstOrThrow
   */
  export type testcaseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the testcase
     */
    select?: testcaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the testcase
     */
    omit?: testcaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: testcaseInclude<ExtArgs> | null
    /**
     * Filter, which testcase to fetch.
     */
    where?: testcaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of testcases to fetch.
     */
    orderBy?: testcaseOrderByWithRelationInput | testcaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for testcases.
     */
    cursor?: testcaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` testcases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` testcases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of testcases.
     */
    distinct?: TestcaseScalarFieldEnum | TestcaseScalarFieldEnum[]
  }

  /**
   * testcase findMany
   */
  export type testcaseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the testcase
     */
    select?: testcaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the testcase
     */
    omit?: testcaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: testcaseInclude<ExtArgs> | null
    /**
     * Filter, which testcases to fetch.
     */
    where?: testcaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of testcases to fetch.
     */
    orderBy?: testcaseOrderByWithRelationInput | testcaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing testcases.
     */
    cursor?: testcaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` testcases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` testcases.
     */
    skip?: number
    distinct?: TestcaseScalarFieldEnum | TestcaseScalarFieldEnum[]
  }

  /**
   * testcase create
   */
  export type testcaseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the testcase
     */
    select?: testcaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the testcase
     */
    omit?: testcaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: testcaseInclude<ExtArgs> | null
    /**
     * The data needed to create a testcase.
     */
    data: XOR<testcaseCreateInput, testcaseUncheckedCreateInput>
  }

  /**
   * testcase createMany
   */
  export type testcaseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many testcases.
     */
    data: testcaseCreateManyInput | testcaseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * testcase update
   */
  export type testcaseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the testcase
     */
    select?: testcaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the testcase
     */
    omit?: testcaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: testcaseInclude<ExtArgs> | null
    /**
     * The data needed to update a testcase.
     */
    data: XOR<testcaseUpdateInput, testcaseUncheckedUpdateInput>
    /**
     * Choose, which testcase to update.
     */
    where: testcaseWhereUniqueInput
  }

  /**
   * testcase updateMany
   */
  export type testcaseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update testcases.
     */
    data: XOR<testcaseUpdateManyMutationInput, testcaseUncheckedUpdateManyInput>
    /**
     * Filter which testcases to update
     */
    where?: testcaseWhereInput
    /**
     * Limit how many testcases to update.
     */
    limit?: number
  }

  /**
   * testcase upsert
   */
  export type testcaseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the testcase
     */
    select?: testcaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the testcase
     */
    omit?: testcaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: testcaseInclude<ExtArgs> | null
    /**
     * The filter to search for the testcase to update in case it exists.
     */
    where: testcaseWhereUniqueInput
    /**
     * In case the testcase found by the `where` argument doesn't exist, create a new testcase with this data.
     */
    create: XOR<testcaseCreateInput, testcaseUncheckedCreateInput>
    /**
     * In case the testcase was found with the provided `where` argument, update it with this data.
     */
    update: XOR<testcaseUpdateInput, testcaseUncheckedUpdateInput>
  }

  /**
   * testcase delete
   */
  export type testcaseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the testcase
     */
    select?: testcaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the testcase
     */
    omit?: testcaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: testcaseInclude<ExtArgs> | null
    /**
     * Filter which testcase to delete.
     */
    where: testcaseWhereUniqueInput
  }

  /**
   * testcase deleteMany
   */
  export type testcaseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which testcases to delete
     */
    where?: testcaseWhereInput
    /**
     * Limit how many testcases to delete.
     */
    limit?: number
  }

  /**
   * testcase.testcaseresult
   */
  export type testcase$testcaseresultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the testcaseresult
     */
    select?: testcaseresultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the testcaseresult
     */
    omit?: testcaseresultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: testcaseresultInclude<ExtArgs> | null
    where?: testcaseresultWhereInput
    orderBy?: testcaseresultOrderByWithRelationInput | testcaseresultOrderByWithRelationInput[]
    cursor?: testcaseresultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TestcaseresultScalarFieldEnum | TestcaseresultScalarFieldEnum[]
  }

  /**
   * testcase without action
   */
  export type testcaseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the testcase
     */
    select?: testcaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the testcase
     */
    omit?: testcaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: testcaseInclude<ExtArgs> | null
  }


  /**
   * Model testcaseresult
   */

  export type AggregateTestcaseresult = {
    _count: TestcaseresultCountAggregateOutputType | null
    _avg: TestcaseresultAvgAggregateOutputType | null
    _sum: TestcaseresultSumAggregateOutputType | null
    _min: TestcaseresultMinAggregateOutputType | null
    _max: TestcaseresultMaxAggregateOutputType | null
  }

  export type TestcaseresultAvgAggregateOutputType = {
    TCRID: number | null
    SID: number | null
    TCID: number | null
  }

  export type TestcaseresultSumAggregateOutputType = {
    TCRID: number | null
    SID: number | null
    TCID: number | null
  }

  export type TestcaseresultMinAggregateOutputType = {
    TCRID: number | null
    SID: number | null
    TCID: number | null
    ActualOutput: string | null
    Result: $Enums.testcaseresult_Result | null
  }

  export type TestcaseresultMaxAggregateOutputType = {
    TCRID: number | null
    SID: number | null
    TCID: number | null
    ActualOutput: string | null
    Result: $Enums.testcaseresult_Result | null
  }

  export type TestcaseresultCountAggregateOutputType = {
    TCRID: number
    SID: number
    TCID: number
    ActualOutput: number
    Result: number
    _all: number
  }


  export type TestcaseresultAvgAggregateInputType = {
    TCRID?: true
    SID?: true
    TCID?: true
  }

  export type TestcaseresultSumAggregateInputType = {
    TCRID?: true
    SID?: true
    TCID?: true
  }

  export type TestcaseresultMinAggregateInputType = {
    TCRID?: true
    SID?: true
    TCID?: true
    ActualOutput?: true
    Result?: true
  }

  export type TestcaseresultMaxAggregateInputType = {
    TCRID?: true
    SID?: true
    TCID?: true
    ActualOutput?: true
    Result?: true
  }

  export type TestcaseresultCountAggregateInputType = {
    TCRID?: true
    SID?: true
    TCID?: true
    ActualOutput?: true
    Result?: true
    _all?: true
  }

  export type TestcaseresultAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which testcaseresult to aggregate.
     */
    where?: testcaseresultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of testcaseresults to fetch.
     */
    orderBy?: testcaseresultOrderByWithRelationInput | testcaseresultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: testcaseresultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` testcaseresults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` testcaseresults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned testcaseresults
    **/
    _count?: true | TestcaseresultCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TestcaseresultAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TestcaseresultSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TestcaseresultMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TestcaseresultMaxAggregateInputType
  }

  export type GetTestcaseresultAggregateType<T extends TestcaseresultAggregateArgs> = {
        [P in keyof T & keyof AggregateTestcaseresult]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTestcaseresult[P]>
      : GetScalarType<T[P], AggregateTestcaseresult[P]>
  }




  export type testcaseresultGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: testcaseresultWhereInput
    orderBy?: testcaseresultOrderByWithAggregationInput | testcaseresultOrderByWithAggregationInput[]
    by: TestcaseresultScalarFieldEnum[] | TestcaseresultScalarFieldEnum
    having?: testcaseresultScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TestcaseresultCountAggregateInputType | true
    _avg?: TestcaseresultAvgAggregateInputType
    _sum?: TestcaseresultSumAggregateInputType
    _min?: TestcaseresultMinAggregateInputType
    _max?: TestcaseresultMaxAggregateInputType
  }

  export type TestcaseresultGroupByOutputType = {
    TCRID: number
    SID: number
    TCID: number
    ActualOutput: string
    Result: $Enums.testcaseresult_Result
    _count: TestcaseresultCountAggregateOutputType | null
    _avg: TestcaseresultAvgAggregateOutputType | null
    _sum: TestcaseresultSumAggregateOutputType | null
    _min: TestcaseresultMinAggregateOutputType | null
    _max: TestcaseresultMaxAggregateOutputType | null
  }

  type GetTestcaseresultGroupByPayload<T extends testcaseresultGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TestcaseresultGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TestcaseresultGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TestcaseresultGroupByOutputType[P]>
            : GetScalarType<T[P], TestcaseresultGroupByOutputType[P]>
        }
      >
    >


  export type testcaseresultSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    TCRID?: boolean
    SID?: boolean
    TCID?: boolean
    ActualOutput?: boolean
    Result?: boolean
    submission?: boolean | submissionDefaultArgs<ExtArgs>
    testcase?: boolean | testcaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["testcaseresult"]>



  export type testcaseresultSelectScalar = {
    TCRID?: boolean
    SID?: boolean
    TCID?: boolean
    ActualOutput?: boolean
    Result?: boolean
  }

  export type testcaseresultOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"TCRID" | "SID" | "TCID" | "ActualOutput" | "Result", ExtArgs["result"]["testcaseresult"]>
  export type testcaseresultInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    submission?: boolean | submissionDefaultArgs<ExtArgs>
    testcase?: boolean | testcaseDefaultArgs<ExtArgs>
  }

  export type $testcaseresultPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "testcaseresult"
    objects: {
      submission: Prisma.$submissionPayload<ExtArgs>
      testcase: Prisma.$testcasePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      TCRID: number
      SID: number
      TCID: number
      ActualOutput: string
      Result: $Enums.testcaseresult_Result
    }, ExtArgs["result"]["testcaseresult"]>
    composites: {}
  }

  type testcaseresultGetPayload<S extends boolean | null | undefined | testcaseresultDefaultArgs> = $Result.GetResult<Prisma.$testcaseresultPayload, S>

  type testcaseresultCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<testcaseresultFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TestcaseresultCountAggregateInputType | true
    }

  export interface testcaseresultDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['testcaseresult'], meta: { name: 'testcaseresult' } }
    /**
     * Find zero or one Testcaseresult that matches the filter.
     * @param {testcaseresultFindUniqueArgs} args - Arguments to find a Testcaseresult
     * @example
     * // Get one Testcaseresult
     * const testcaseresult = await prisma.testcaseresult.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends testcaseresultFindUniqueArgs>(args: SelectSubset<T, testcaseresultFindUniqueArgs<ExtArgs>>): Prisma__testcaseresultClient<$Result.GetResult<Prisma.$testcaseresultPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Testcaseresult that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {testcaseresultFindUniqueOrThrowArgs} args - Arguments to find a Testcaseresult
     * @example
     * // Get one Testcaseresult
     * const testcaseresult = await prisma.testcaseresult.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends testcaseresultFindUniqueOrThrowArgs>(args: SelectSubset<T, testcaseresultFindUniqueOrThrowArgs<ExtArgs>>): Prisma__testcaseresultClient<$Result.GetResult<Prisma.$testcaseresultPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Testcaseresult that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {testcaseresultFindFirstArgs} args - Arguments to find a Testcaseresult
     * @example
     * // Get one Testcaseresult
     * const testcaseresult = await prisma.testcaseresult.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends testcaseresultFindFirstArgs>(args?: SelectSubset<T, testcaseresultFindFirstArgs<ExtArgs>>): Prisma__testcaseresultClient<$Result.GetResult<Prisma.$testcaseresultPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Testcaseresult that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {testcaseresultFindFirstOrThrowArgs} args - Arguments to find a Testcaseresult
     * @example
     * // Get one Testcaseresult
     * const testcaseresult = await prisma.testcaseresult.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends testcaseresultFindFirstOrThrowArgs>(args?: SelectSubset<T, testcaseresultFindFirstOrThrowArgs<ExtArgs>>): Prisma__testcaseresultClient<$Result.GetResult<Prisma.$testcaseresultPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Testcaseresults that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {testcaseresultFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Testcaseresults
     * const testcaseresults = await prisma.testcaseresult.findMany()
     * 
     * // Get first 10 Testcaseresults
     * const testcaseresults = await prisma.testcaseresult.findMany({ take: 10 })
     * 
     * // Only select the `TCRID`
     * const testcaseresultWithTCRIDOnly = await prisma.testcaseresult.findMany({ select: { TCRID: true } })
     * 
     */
    findMany<T extends testcaseresultFindManyArgs>(args?: SelectSubset<T, testcaseresultFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$testcaseresultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Testcaseresult.
     * @param {testcaseresultCreateArgs} args - Arguments to create a Testcaseresult.
     * @example
     * // Create one Testcaseresult
     * const Testcaseresult = await prisma.testcaseresult.create({
     *   data: {
     *     // ... data to create a Testcaseresult
     *   }
     * })
     * 
     */
    create<T extends testcaseresultCreateArgs>(args: SelectSubset<T, testcaseresultCreateArgs<ExtArgs>>): Prisma__testcaseresultClient<$Result.GetResult<Prisma.$testcaseresultPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Testcaseresults.
     * @param {testcaseresultCreateManyArgs} args - Arguments to create many Testcaseresults.
     * @example
     * // Create many Testcaseresults
     * const testcaseresult = await prisma.testcaseresult.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends testcaseresultCreateManyArgs>(args?: SelectSubset<T, testcaseresultCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Testcaseresult.
     * @param {testcaseresultDeleteArgs} args - Arguments to delete one Testcaseresult.
     * @example
     * // Delete one Testcaseresult
     * const Testcaseresult = await prisma.testcaseresult.delete({
     *   where: {
     *     // ... filter to delete one Testcaseresult
     *   }
     * })
     * 
     */
    delete<T extends testcaseresultDeleteArgs>(args: SelectSubset<T, testcaseresultDeleteArgs<ExtArgs>>): Prisma__testcaseresultClient<$Result.GetResult<Prisma.$testcaseresultPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Testcaseresult.
     * @param {testcaseresultUpdateArgs} args - Arguments to update one Testcaseresult.
     * @example
     * // Update one Testcaseresult
     * const testcaseresult = await prisma.testcaseresult.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends testcaseresultUpdateArgs>(args: SelectSubset<T, testcaseresultUpdateArgs<ExtArgs>>): Prisma__testcaseresultClient<$Result.GetResult<Prisma.$testcaseresultPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Testcaseresults.
     * @param {testcaseresultDeleteManyArgs} args - Arguments to filter Testcaseresults to delete.
     * @example
     * // Delete a few Testcaseresults
     * const { count } = await prisma.testcaseresult.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends testcaseresultDeleteManyArgs>(args?: SelectSubset<T, testcaseresultDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Testcaseresults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {testcaseresultUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Testcaseresults
     * const testcaseresult = await prisma.testcaseresult.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends testcaseresultUpdateManyArgs>(args: SelectSubset<T, testcaseresultUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Testcaseresult.
     * @param {testcaseresultUpsertArgs} args - Arguments to update or create a Testcaseresult.
     * @example
     * // Update or create a Testcaseresult
     * const testcaseresult = await prisma.testcaseresult.upsert({
     *   create: {
     *     // ... data to create a Testcaseresult
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Testcaseresult we want to update
     *   }
     * })
     */
    upsert<T extends testcaseresultUpsertArgs>(args: SelectSubset<T, testcaseresultUpsertArgs<ExtArgs>>): Prisma__testcaseresultClient<$Result.GetResult<Prisma.$testcaseresultPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Testcaseresults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {testcaseresultCountArgs} args - Arguments to filter Testcaseresults to count.
     * @example
     * // Count the number of Testcaseresults
     * const count = await prisma.testcaseresult.count({
     *   where: {
     *     // ... the filter for the Testcaseresults we want to count
     *   }
     * })
    **/
    count<T extends testcaseresultCountArgs>(
      args?: Subset<T, testcaseresultCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TestcaseresultCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Testcaseresult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestcaseresultAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TestcaseresultAggregateArgs>(args: Subset<T, TestcaseresultAggregateArgs>): Prisma.PrismaPromise<GetTestcaseresultAggregateType<T>>

    /**
     * Group by Testcaseresult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {testcaseresultGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends testcaseresultGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: testcaseresultGroupByArgs['orderBy'] }
        : { orderBy?: testcaseresultGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, testcaseresultGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTestcaseresultGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the testcaseresult model
   */
  readonly fields: testcaseresultFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for testcaseresult.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__testcaseresultClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    submission<T extends submissionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, submissionDefaultArgs<ExtArgs>>): Prisma__submissionClient<$Result.GetResult<Prisma.$submissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    testcase<T extends testcaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, testcaseDefaultArgs<ExtArgs>>): Prisma__testcaseClient<$Result.GetResult<Prisma.$testcasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the testcaseresult model
   */
  interface testcaseresultFieldRefs {
    readonly TCRID: FieldRef<"testcaseresult", 'Int'>
    readonly SID: FieldRef<"testcaseresult", 'Int'>
    readonly TCID: FieldRef<"testcaseresult", 'Int'>
    readonly ActualOutput: FieldRef<"testcaseresult", 'String'>
    readonly Result: FieldRef<"testcaseresult", 'testcaseresult_Result'>
  }
    

  // Custom InputTypes
  /**
   * testcaseresult findUnique
   */
  export type testcaseresultFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the testcaseresult
     */
    select?: testcaseresultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the testcaseresult
     */
    omit?: testcaseresultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: testcaseresultInclude<ExtArgs> | null
    /**
     * Filter, which testcaseresult to fetch.
     */
    where: testcaseresultWhereUniqueInput
  }

  /**
   * testcaseresult findUniqueOrThrow
   */
  export type testcaseresultFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the testcaseresult
     */
    select?: testcaseresultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the testcaseresult
     */
    omit?: testcaseresultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: testcaseresultInclude<ExtArgs> | null
    /**
     * Filter, which testcaseresult to fetch.
     */
    where: testcaseresultWhereUniqueInput
  }

  /**
   * testcaseresult findFirst
   */
  export type testcaseresultFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the testcaseresult
     */
    select?: testcaseresultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the testcaseresult
     */
    omit?: testcaseresultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: testcaseresultInclude<ExtArgs> | null
    /**
     * Filter, which testcaseresult to fetch.
     */
    where?: testcaseresultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of testcaseresults to fetch.
     */
    orderBy?: testcaseresultOrderByWithRelationInput | testcaseresultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for testcaseresults.
     */
    cursor?: testcaseresultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` testcaseresults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` testcaseresults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of testcaseresults.
     */
    distinct?: TestcaseresultScalarFieldEnum | TestcaseresultScalarFieldEnum[]
  }

  /**
   * testcaseresult findFirstOrThrow
   */
  export type testcaseresultFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the testcaseresult
     */
    select?: testcaseresultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the testcaseresult
     */
    omit?: testcaseresultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: testcaseresultInclude<ExtArgs> | null
    /**
     * Filter, which testcaseresult to fetch.
     */
    where?: testcaseresultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of testcaseresults to fetch.
     */
    orderBy?: testcaseresultOrderByWithRelationInput | testcaseresultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for testcaseresults.
     */
    cursor?: testcaseresultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` testcaseresults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` testcaseresults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of testcaseresults.
     */
    distinct?: TestcaseresultScalarFieldEnum | TestcaseresultScalarFieldEnum[]
  }

  /**
   * testcaseresult findMany
   */
  export type testcaseresultFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the testcaseresult
     */
    select?: testcaseresultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the testcaseresult
     */
    omit?: testcaseresultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: testcaseresultInclude<ExtArgs> | null
    /**
     * Filter, which testcaseresults to fetch.
     */
    where?: testcaseresultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of testcaseresults to fetch.
     */
    orderBy?: testcaseresultOrderByWithRelationInput | testcaseresultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing testcaseresults.
     */
    cursor?: testcaseresultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` testcaseresults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` testcaseresults.
     */
    skip?: number
    distinct?: TestcaseresultScalarFieldEnum | TestcaseresultScalarFieldEnum[]
  }

  /**
   * testcaseresult create
   */
  export type testcaseresultCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the testcaseresult
     */
    select?: testcaseresultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the testcaseresult
     */
    omit?: testcaseresultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: testcaseresultInclude<ExtArgs> | null
    /**
     * The data needed to create a testcaseresult.
     */
    data: XOR<testcaseresultCreateInput, testcaseresultUncheckedCreateInput>
  }

  /**
   * testcaseresult createMany
   */
  export type testcaseresultCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many testcaseresults.
     */
    data: testcaseresultCreateManyInput | testcaseresultCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * testcaseresult update
   */
  export type testcaseresultUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the testcaseresult
     */
    select?: testcaseresultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the testcaseresult
     */
    omit?: testcaseresultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: testcaseresultInclude<ExtArgs> | null
    /**
     * The data needed to update a testcaseresult.
     */
    data: XOR<testcaseresultUpdateInput, testcaseresultUncheckedUpdateInput>
    /**
     * Choose, which testcaseresult to update.
     */
    where: testcaseresultWhereUniqueInput
  }

  /**
   * testcaseresult updateMany
   */
  export type testcaseresultUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update testcaseresults.
     */
    data: XOR<testcaseresultUpdateManyMutationInput, testcaseresultUncheckedUpdateManyInput>
    /**
     * Filter which testcaseresults to update
     */
    where?: testcaseresultWhereInput
    /**
     * Limit how many testcaseresults to update.
     */
    limit?: number
  }

  /**
   * testcaseresult upsert
   */
  export type testcaseresultUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the testcaseresult
     */
    select?: testcaseresultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the testcaseresult
     */
    omit?: testcaseresultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: testcaseresultInclude<ExtArgs> | null
    /**
     * The filter to search for the testcaseresult to update in case it exists.
     */
    where: testcaseresultWhereUniqueInput
    /**
     * In case the testcaseresult found by the `where` argument doesn't exist, create a new testcaseresult with this data.
     */
    create: XOR<testcaseresultCreateInput, testcaseresultUncheckedCreateInput>
    /**
     * In case the testcaseresult was found with the provided `where` argument, update it with this data.
     */
    update: XOR<testcaseresultUpdateInput, testcaseresultUncheckedUpdateInput>
  }

  /**
   * testcaseresult delete
   */
  export type testcaseresultDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the testcaseresult
     */
    select?: testcaseresultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the testcaseresult
     */
    omit?: testcaseresultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: testcaseresultInclude<ExtArgs> | null
    /**
     * Filter which testcaseresult to delete.
     */
    where: testcaseresultWhereUniqueInput
  }

  /**
   * testcaseresult deleteMany
   */
  export type testcaseresultDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which testcaseresults to delete
     */
    where?: testcaseresultWhereInput
    /**
     * Limit how many testcaseresults to delete.
     */
    limit?: number
  }

  /**
   * testcaseresult without action
   */
  export type testcaseresultDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the testcaseresult
     */
    select?: testcaseresultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the testcaseresult
     */
    omit?: testcaseresultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: testcaseresultInclude<ExtArgs> | null
  }


  /**
   * Model topic
   */

  export type AggregateTopic = {
    _count: TopicCountAggregateOutputType | null
    _avg: TopicAvgAggregateOutputType | null
    _sum: TopicSumAggregateOutputType | null
    _min: TopicMinAggregateOutputType | null
    _max: TopicMaxAggregateOutputType | null
  }

  export type TopicAvgAggregateOutputType = {
    TpID: number | null
  }

  export type TopicSumAggregateOutputType = {
    TpID: number | null
  }

  export type TopicMinAggregateOutputType = {
    TpID: number | null
    Name: string | null
    Slug: string | null
  }

  export type TopicMaxAggregateOutputType = {
    TpID: number | null
    Name: string | null
    Slug: string | null
  }

  export type TopicCountAggregateOutputType = {
    TpID: number
    Name: number
    Slug: number
    _all: number
  }


  export type TopicAvgAggregateInputType = {
    TpID?: true
  }

  export type TopicSumAggregateInputType = {
    TpID?: true
  }

  export type TopicMinAggregateInputType = {
    TpID?: true
    Name?: true
    Slug?: true
  }

  export type TopicMaxAggregateInputType = {
    TpID?: true
    Name?: true
    Slug?: true
  }

  export type TopicCountAggregateInputType = {
    TpID?: true
    Name?: true
    Slug?: true
    _all?: true
  }

  export type TopicAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which topic to aggregate.
     */
    where?: topicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of topics to fetch.
     */
    orderBy?: topicOrderByWithRelationInput | topicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: topicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` topics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` topics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned topics
    **/
    _count?: true | TopicCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TopicAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TopicSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TopicMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TopicMaxAggregateInputType
  }

  export type GetTopicAggregateType<T extends TopicAggregateArgs> = {
        [P in keyof T & keyof AggregateTopic]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTopic[P]>
      : GetScalarType<T[P], AggregateTopic[P]>
  }




  export type topicGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: topicWhereInput
    orderBy?: topicOrderByWithAggregationInput | topicOrderByWithAggregationInput[]
    by: TopicScalarFieldEnum[] | TopicScalarFieldEnum
    having?: topicScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TopicCountAggregateInputType | true
    _avg?: TopicAvgAggregateInputType
    _sum?: TopicSumAggregateInputType
    _min?: TopicMinAggregateInputType
    _max?: TopicMaxAggregateInputType
  }

  export type TopicGroupByOutputType = {
    TpID: number
    Name: string
    Slug: string
    _count: TopicCountAggregateOutputType | null
    _avg: TopicAvgAggregateOutputType | null
    _sum: TopicSumAggregateOutputType | null
    _min: TopicMinAggregateOutputType | null
    _max: TopicMaxAggregateOutputType | null
  }

  type GetTopicGroupByPayload<T extends topicGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TopicGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TopicGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TopicGroupByOutputType[P]>
            : GetScalarType<T[P], TopicGroupByOutputType[P]>
        }
      >
    >


  export type topicSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    TpID?: boolean
    Name?: boolean
    Slug?: boolean
    exercise?: boolean | topic$exerciseArgs<ExtArgs>
    _count?: boolean | TopicCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["topic"]>



  export type topicSelectScalar = {
    TpID?: boolean
    Name?: boolean
    Slug?: boolean
  }

  export type topicOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"TpID" | "Name" | "Slug", ExtArgs["result"]["topic"]>
  export type topicInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercise?: boolean | topic$exerciseArgs<ExtArgs>
    _count?: boolean | TopicCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $topicPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "topic"
    objects: {
      exercise: Prisma.$exercisePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      TpID: number
      Name: string
      Slug: string
    }, ExtArgs["result"]["topic"]>
    composites: {}
  }

  type topicGetPayload<S extends boolean | null | undefined | topicDefaultArgs> = $Result.GetResult<Prisma.$topicPayload, S>

  type topicCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<topicFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TopicCountAggregateInputType | true
    }

  export interface topicDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['topic'], meta: { name: 'topic' } }
    /**
     * Find zero or one Topic that matches the filter.
     * @param {topicFindUniqueArgs} args - Arguments to find a Topic
     * @example
     * // Get one Topic
     * const topic = await prisma.topic.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends topicFindUniqueArgs>(args: SelectSubset<T, topicFindUniqueArgs<ExtArgs>>): Prisma__topicClient<$Result.GetResult<Prisma.$topicPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Topic that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {topicFindUniqueOrThrowArgs} args - Arguments to find a Topic
     * @example
     * // Get one Topic
     * const topic = await prisma.topic.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends topicFindUniqueOrThrowArgs>(args: SelectSubset<T, topicFindUniqueOrThrowArgs<ExtArgs>>): Prisma__topicClient<$Result.GetResult<Prisma.$topicPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Topic that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {topicFindFirstArgs} args - Arguments to find a Topic
     * @example
     * // Get one Topic
     * const topic = await prisma.topic.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends topicFindFirstArgs>(args?: SelectSubset<T, topicFindFirstArgs<ExtArgs>>): Prisma__topicClient<$Result.GetResult<Prisma.$topicPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Topic that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {topicFindFirstOrThrowArgs} args - Arguments to find a Topic
     * @example
     * // Get one Topic
     * const topic = await prisma.topic.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends topicFindFirstOrThrowArgs>(args?: SelectSubset<T, topicFindFirstOrThrowArgs<ExtArgs>>): Prisma__topicClient<$Result.GetResult<Prisma.$topicPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Topics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {topicFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Topics
     * const topics = await prisma.topic.findMany()
     * 
     * // Get first 10 Topics
     * const topics = await prisma.topic.findMany({ take: 10 })
     * 
     * // Only select the `TpID`
     * const topicWithTpIDOnly = await prisma.topic.findMany({ select: { TpID: true } })
     * 
     */
    findMany<T extends topicFindManyArgs>(args?: SelectSubset<T, topicFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$topicPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Topic.
     * @param {topicCreateArgs} args - Arguments to create a Topic.
     * @example
     * // Create one Topic
     * const Topic = await prisma.topic.create({
     *   data: {
     *     // ... data to create a Topic
     *   }
     * })
     * 
     */
    create<T extends topicCreateArgs>(args: SelectSubset<T, topicCreateArgs<ExtArgs>>): Prisma__topicClient<$Result.GetResult<Prisma.$topicPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Topics.
     * @param {topicCreateManyArgs} args - Arguments to create many Topics.
     * @example
     * // Create many Topics
     * const topic = await prisma.topic.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends topicCreateManyArgs>(args?: SelectSubset<T, topicCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Topic.
     * @param {topicDeleteArgs} args - Arguments to delete one Topic.
     * @example
     * // Delete one Topic
     * const Topic = await prisma.topic.delete({
     *   where: {
     *     // ... filter to delete one Topic
     *   }
     * })
     * 
     */
    delete<T extends topicDeleteArgs>(args: SelectSubset<T, topicDeleteArgs<ExtArgs>>): Prisma__topicClient<$Result.GetResult<Prisma.$topicPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Topic.
     * @param {topicUpdateArgs} args - Arguments to update one Topic.
     * @example
     * // Update one Topic
     * const topic = await prisma.topic.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends topicUpdateArgs>(args: SelectSubset<T, topicUpdateArgs<ExtArgs>>): Prisma__topicClient<$Result.GetResult<Prisma.$topicPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Topics.
     * @param {topicDeleteManyArgs} args - Arguments to filter Topics to delete.
     * @example
     * // Delete a few Topics
     * const { count } = await prisma.topic.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends topicDeleteManyArgs>(args?: SelectSubset<T, topicDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Topics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {topicUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Topics
     * const topic = await prisma.topic.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends topicUpdateManyArgs>(args: SelectSubset<T, topicUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Topic.
     * @param {topicUpsertArgs} args - Arguments to update or create a Topic.
     * @example
     * // Update or create a Topic
     * const topic = await prisma.topic.upsert({
     *   create: {
     *     // ... data to create a Topic
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Topic we want to update
     *   }
     * })
     */
    upsert<T extends topicUpsertArgs>(args: SelectSubset<T, topicUpsertArgs<ExtArgs>>): Prisma__topicClient<$Result.GetResult<Prisma.$topicPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Topics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {topicCountArgs} args - Arguments to filter Topics to count.
     * @example
     * // Count the number of Topics
     * const count = await prisma.topic.count({
     *   where: {
     *     // ... the filter for the Topics we want to count
     *   }
     * })
    **/
    count<T extends topicCountArgs>(
      args?: Subset<T, topicCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TopicCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Topic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopicAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TopicAggregateArgs>(args: Subset<T, TopicAggregateArgs>): Prisma.PrismaPromise<GetTopicAggregateType<T>>

    /**
     * Group by Topic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {topicGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends topicGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: topicGroupByArgs['orderBy'] }
        : { orderBy?: topicGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, topicGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTopicGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the topic model
   */
  readonly fields: topicFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for topic.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__topicClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    exercise<T extends topic$exerciseArgs<ExtArgs> = {}>(args?: Subset<T, topic$exerciseArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$exercisePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the topic model
   */
  interface topicFieldRefs {
    readonly TpID: FieldRef<"topic", 'Int'>
    readonly Name: FieldRef<"topic", 'String'>
    readonly Slug: FieldRef<"topic", 'String'>
  }
    

  // Custom InputTypes
  /**
   * topic findUnique
   */
  export type topicFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the topic
     */
    select?: topicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the topic
     */
    omit?: topicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: topicInclude<ExtArgs> | null
    /**
     * Filter, which topic to fetch.
     */
    where: topicWhereUniqueInput
  }

  /**
   * topic findUniqueOrThrow
   */
  export type topicFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the topic
     */
    select?: topicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the topic
     */
    omit?: topicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: topicInclude<ExtArgs> | null
    /**
     * Filter, which topic to fetch.
     */
    where: topicWhereUniqueInput
  }

  /**
   * topic findFirst
   */
  export type topicFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the topic
     */
    select?: topicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the topic
     */
    omit?: topicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: topicInclude<ExtArgs> | null
    /**
     * Filter, which topic to fetch.
     */
    where?: topicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of topics to fetch.
     */
    orderBy?: topicOrderByWithRelationInput | topicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for topics.
     */
    cursor?: topicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` topics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` topics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of topics.
     */
    distinct?: TopicScalarFieldEnum | TopicScalarFieldEnum[]
  }

  /**
   * topic findFirstOrThrow
   */
  export type topicFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the topic
     */
    select?: topicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the topic
     */
    omit?: topicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: topicInclude<ExtArgs> | null
    /**
     * Filter, which topic to fetch.
     */
    where?: topicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of topics to fetch.
     */
    orderBy?: topicOrderByWithRelationInput | topicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for topics.
     */
    cursor?: topicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` topics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` topics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of topics.
     */
    distinct?: TopicScalarFieldEnum | TopicScalarFieldEnum[]
  }

  /**
   * topic findMany
   */
  export type topicFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the topic
     */
    select?: topicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the topic
     */
    omit?: topicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: topicInclude<ExtArgs> | null
    /**
     * Filter, which topics to fetch.
     */
    where?: topicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of topics to fetch.
     */
    orderBy?: topicOrderByWithRelationInput | topicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing topics.
     */
    cursor?: topicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` topics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` topics.
     */
    skip?: number
    distinct?: TopicScalarFieldEnum | TopicScalarFieldEnum[]
  }

  /**
   * topic create
   */
  export type topicCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the topic
     */
    select?: topicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the topic
     */
    omit?: topicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: topicInclude<ExtArgs> | null
    /**
     * The data needed to create a topic.
     */
    data: XOR<topicCreateInput, topicUncheckedCreateInput>
  }

  /**
   * topic createMany
   */
  export type topicCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many topics.
     */
    data: topicCreateManyInput | topicCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * topic update
   */
  export type topicUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the topic
     */
    select?: topicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the topic
     */
    omit?: topicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: topicInclude<ExtArgs> | null
    /**
     * The data needed to update a topic.
     */
    data: XOR<topicUpdateInput, topicUncheckedUpdateInput>
    /**
     * Choose, which topic to update.
     */
    where: topicWhereUniqueInput
  }

  /**
   * topic updateMany
   */
  export type topicUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update topics.
     */
    data: XOR<topicUpdateManyMutationInput, topicUncheckedUpdateManyInput>
    /**
     * Filter which topics to update
     */
    where?: topicWhereInput
    /**
     * Limit how many topics to update.
     */
    limit?: number
  }

  /**
   * topic upsert
   */
  export type topicUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the topic
     */
    select?: topicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the topic
     */
    omit?: topicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: topicInclude<ExtArgs> | null
    /**
     * The filter to search for the topic to update in case it exists.
     */
    where: topicWhereUniqueInput
    /**
     * In case the topic found by the `where` argument doesn't exist, create a new topic with this data.
     */
    create: XOR<topicCreateInput, topicUncheckedCreateInput>
    /**
     * In case the topic was found with the provided `where` argument, update it with this data.
     */
    update: XOR<topicUpdateInput, topicUncheckedUpdateInput>
  }

  /**
   * topic delete
   */
  export type topicDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the topic
     */
    select?: topicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the topic
     */
    omit?: topicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: topicInclude<ExtArgs> | null
    /**
     * Filter which topic to delete.
     */
    where: topicWhereUniqueInput
  }

  /**
   * topic deleteMany
   */
  export type topicDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which topics to delete
     */
    where?: topicWhereInput
    /**
     * Limit how many topics to delete.
     */
    limit?: number
  }

  /**
   * topic.exercise
   */
  export type topic$exerciseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise
     */
    select?: exerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise
     */
    omit?: exerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciseInclude<ExtArgs> | null
    where?: exerciseWhereInput
    orderBy?: exerciseOrderByWithRelationInput | exerciseOrderByWithRelationInput[]
    cursor?: exerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }

  /**
   * topic without action
   */
  export type topicDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the topic
     */
    select?: topicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the topic
     */
    omit?: topicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: topicInclude<ExtArgs> | null
  }


  /**
   * Model user
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    UID: string | null
    Username: string | null
    Email: string | null
    Password: string | null
    Role: $Enums.user_Role | null
    CreatedAt: Date | null
    Image: string | null
  }

  export type UserMaxAggregateOutputType = {
    UID: string | null
    Username: string | null
    Email: string | null
    Password: string | null
    Role: $Enums.user_Role | null
    CreatedAt: Date | null
    Image: string | null
  }

  export type UserCountAggregateOutputType = {
    UID: number
    Username: number
    Email: number
    Password: number
    Role: number
    CreatedAt: number
    Image: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    UID?: true
    Username?: true
    Email?: true
    Password?: true
    Role?: true
    CreatedAt?: true
    Image?: true
  }

  export type UserMaxAggregateInputType = {
    UID?: true
    Username?: true
    Email?: true
    Password?: true
    Role?: true
    CreatedAt?: true
    Image?: true
  }

  export type UserCountAggregateInputType = {
    UID?: true
    Username?: true
    Email?: true
    Password?: true
    Role?: true
    CreatedAt?: true
    Image?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user to aggregate.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type userGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userWhereInput
    orderBy?: userOrderByWithAggregationInput | userOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    UID: string
    Username: string
    Email: string
    Password: string
    Role: $Enums.user_Role
    CreatedAt: Date | null
    Image: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends userGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    UID?: boolean
    Username?: boolean
    Email?: boolean
    Password?: boolean
    Role?: boolean
    CreatedAt?: boolean
    Image?: boolean
    comment?: boolean | user$commentArgs<ExtArgs>
    commentlike?: boolean | user$commentlikeArgs<ExtArgs>
    exerciselike?: boolean | user$exerciselikeArgs<ExtArgs>
    exerciseprogress?: boolean | user$exerciseprogressArgs<ExtArgs>
    friendship_friendship_requesterTouser?: boolean | user$friendship_friendship_requesterTouserArgs<ExtArgs>
    friendship_friendship_addresseeTouser?: boolean | user$friendship_friendship_addresseeTouserArgs<ExtArgs>
    list?: boolean | user$listArgs<ExtArgs>
    notification_notification_UIDTouser?: boolean | user$notification_notification_UIDTouserArgs<ExtArgs>
    notification_notification_FromUserTouser?: boolean | user$notification_notification_FromUserTouserArgs<ExtArgs>
    studyplanprogress?: boolean | user$studyplanprogressArgs<ExtArgs>
    submission?: boolean | user$submissionArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>



  export type userSelectScalar = {
    UID?: boolean
    Username?: boolean
    Email?: boolean
    Password?: boolean
    Role?: boolean
    CreatedAt?: boolean
    Image?: boolean
  }

  export type userOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"UID" | "Username" | "Email" | "Password" | "Role" | "CreatedAt" | "Image", ExtArgs["result"]["user"]>
  export type userInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comment?: boolean | user$commentArgs<ExtArgs>
    commentlike?: boolean | user$commentlikeArgs<ExtArgs>
    exerciselike?: boolean | user$exerciselikeArgs<ExtArgs>
    exerciseprogress?: boolean | user$exerciseprogressArgs<ExtArgs>
    friendship_friendship_requesterTouser?: boolean | user$friendship_friendship_requesterTouserArgs<ExtArgs>
    friendship_friendship_addresseeTouser?: boolean | user$friendship_friendship_addresseeTouserArgs<ExtArgs>
    list?: boolean | user$listArgs<ExtArgs>
    notification_notification_UIDTouser?: boolean | user$notification_notification_UIDTouserArgs<ExtArgs>
    notification_notification_FromUserTouser?: boolean | user$notification_notification_FromUserTouserArgs<ExtArgs>
    studyplanprogress?: boolean | user$studyplanprogressArgs<ExtArgs>
    submission?: boolean | user$submissionArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $userPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user"
    objects: {
      comment: Prisma.$commentPayload<ExtArgs>[]
      commentlike: Prisma.$commentlikePayload<ExtArgs>[]
      exerciselike: Prisma.$exerciselikePayload<ExtArgs>[]
      exerciseprogress: Prisma.$exerciseprogressPayload<ExtArgs>[]
      friendship_friendship_requesterTouser: Prisma.$friendshipPayload<ExtArgs>[]
      friendship_friendship_addresseeTouser: Prisma.$friendshipPayload<ExtArgs>[]
      list: Prisma.$listPayload<ExtArgs>[]
      notification_notification_UIDTouser: Prisma.$notificationPayload<ExtArgs>[]
      notification_notification_FromUserTouser: Prisma.$notificationPayload<ExtArgs>[]
      studyplanprogress: Prisma.$studyplanprogressPayload<ExtArgs>[]
      submission: Prisma.$submissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      UID: string
      Username: string
      Email: string
      Password: string
      Role: $Enums.user_Role
      CreatedAt: Date | null
      Image: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type userGetPayload<S extends boolean | null | undefined | userDefaultArgs> = $Result.GetResult<Prisma.$userPayload, S>

  type userCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<userFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface userDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user'], meta: { name: 'user' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends userFindUniqueArgs>(args: SelectSubset<T, userFindUniqueArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {userFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends userFindUniqueOrThrowArgs>(args: SelectSubset<T, userFindUniqueOrThrowArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends userFindFirstArgs>(args?: SelectSubset<T, userFindFirstArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends userFindFirstOrThrowArgs>(args?: SelectSubset<T, userFindFirstOrThrowArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `UID`
     * const userWithUIDOnly = await prisma.user.findMany({ select: { UID: true } })
     * 
     */
    findMany<T extends userFindManyArgs>(args?: SelectSubset<T, userFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends userCreateArgs>(args: SelectSubset<T, userCreateArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {userCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends userCreateManyArgs>(args?: SelectSubset<T, userCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends userDeleteArgs>(args: SelectSubset<T, userDeleteArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends userUpdateArgs>(args: SelectSubset<T, userUpdateArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends userDeleteManyArgs>(args?: SelectSubset<T, userDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends userUpdateManyArgs>(args: SelectSubset<T, userUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends userUpsertArgs>(args: SelectSubset<T, userUpsertArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userGroupByArgs['orderBy'] }
        : { orderBy?: userGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user model
   */
  readonly fields: userFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__userClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    comment<T extends user$commentArgs<ExtArgs> = {}>(args?: Subset<T, user$commentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$commentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    commentlike<T extends user$commentlikeArgs<ExtArgs> = {}>(args?: Subset<T, user$commentlikeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$commentlikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    exerciselike<T extends user$exerciselikeArgs<ExtArgs> = {}>(args?: Subset<T, user$exerciselikeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$exerciselikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    exerciseprogress<T extends user$exerciseprogressArgs<ExtArgs> = {}>(args?: Subset<T, user$exerciseprogressArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$exerciseprogressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    friendship_friendship_requesterTouser<T extends user$friendship_friendship_requesterTouserArgs<ExtArgs> = {}>(args?: Subset<T, user$friendship_friendship_requesterTouserArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$friendshipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    friendship_friendship_addresseeTouser<T extends user$friendship_friendship_addresseeTouserArgs<ExtArgs> = {}>(args?: Subset<T, user$friendship_friendship_addresseeTouserArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$friendshipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    list<T extends user$listArgs<ExtArgs> = {}>(args?: Subset<T, user$listArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$listPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notification_notification_UIDTouser<T extends user$notification_notification_UIDTouserArgs<ExtArgs> = {}>(args?: Subset<T, user$notification_notification_UIDTouserArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$notificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notification_notification_FromUserTouser<T extends user$notification_notification_FromUserTouserArgs<ExtArgs> = {}>(args?: Subset<T, user$notification_notification_FromUserTouserArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$notificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    studyplanprogress<T extends user$studyplanprogressArgs<ExtArgs> = {}>(args?: Subset<T, user$studyplanprogressArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$studyplanprogressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    submission<T extends user$submissionArgs<ExtArgs> = {}>(args?: Subset<T, user$submissionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$submissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the user model
   */
  interface userFieldRefs {
    readonly UID: FieldRef<"user", 'String'>
    readonly Username: FieldRef<"user", 'String'>
    readonly Email: FieldRef<"user", 'String'>
    readonly Password: FieldRef<"user", 'String'>
    readonly Role: FieldRef<"user", 'user_Role'>
    readonly CreatedAt: FieldRef<"user", 'DateTime'>
    readonly Image: FieldRef<"user", 'String'>
  }
    

  // Custom InputTypes
  /**
   * user findUnique
   */
  export type userFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findUniqueOrThrow
   */
  export type userFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findFirst
   */
  export type userFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findFirstOrThrow
   */
  export type userFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findMany
   */
  export type userFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user create
   */
  export type userCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to create a user.
     */
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }

  /**
   * user createMany
   */
  export type userCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: userCreateManyInput | userCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user update
   */
  export type userUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to update a user.
     */
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     */
    where: userWhereUniqueInput
  }

  /**
   * user updateMany
   */
  export type userUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: userWhereInput
    /**
     * Limit how many users to update.
     */
    limit?: number
  }

  /**
   * user upsert
   */
  export type userUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The filter to search for the user to update in case it exists.
     */
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     */
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }

  /**
   * user delete
   */
  export type userDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter which user to delete.
     */
    where: userWhereUniqueInput
  }

  /**
   * user deleteMany
   */
  export type userDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: userWhereInput
    /**
     * Limit how many users to delete.
     */
    limit?: number
  }

  /**
   * user.comment
   */
  export type user$commentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the comment
     */
    omit?: commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentInclude<ExtArgs> | null
    where?: commentWhereInput
    orderBy?: commentOrderByWithRelationInput | commentOrderByWithRelationInput[]
    cursor?: commentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * user.commentlike
   */
  export type user$commentlikeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commentlike
     */
    select?: commentlikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the commentlike
     */
    omit?: commentlikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentlikeInclude<ExtArgs> | null
    where?: commentlikeWhereInput
    orderBy?: commentlikeOrderByWithRelationInput | commentlikeOrderByWithRelationInput[]
    cursor?: commentlikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentlikeScalarFieldEnum | CommentlikeScalarFieldEnum[]
  }

  /**
   * user.exerciselike
   */
  export type user$exerciselikeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exerciselike
     */
    select?: exerciselikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exerciselike
     */
    omit?: exerciselikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciselikeInclude<ExtArgs> | null
    where?: exerciselikeWhereInput
    orderBy?: exerciselikeOrderByWithRelationInput | exerciselikeOrderByWithRelationInput[]
    cursor?: exerciselikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExerciselikeScalarFieldEnum | ExerciselikeScalarFieldEnum[]
  }

  /**
   * user.exerciseprogress
   */
  export type user$exerciseprogressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exerciseprogress
     */
    select?: exerciseprogressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exerciseprogress
     */
    omit?: exerciseprogressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciseprogressInclude<ExtArgs> | null
    where?: exerciseprogressWhereInput
    orderBy?: exerciseprogressOrderByWithRelationInput | exerciseprogressOrderByWithRelationInput[]
    cursor?: exerciseprogressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExerciseprogressScalarFieldEnum | ExerciseprogressScalarFieldEnum[]
  }

  /**
   * user.friendship_friendship_requesterTouser
   */
  export type user$friendship_friendship_requesterTouserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the friendship
     */
    select?: friendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the friendship
     */
    omit?: friendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: friendshipInclude<ExtArgs> | null
    where?: friendshipWhereInput
    orderBy?: friendshipOrderByWithRelationInput | friendshipOrderByWithRelationInput[]
    cursor?: friendshipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FriendshipScalarFieldEnum | FriendshipScalarFieldEnum[]
  }

  /**
   * user.friendship_friendship_addresseeTouser
   */
  export type user$friendship_friendship_addresseeTouserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the friendship
     */
    select?: friendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the friendship
     */
    omit?: friendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: friendshipInclude<ExtArgs> | null
    where?: friendshipWhereInput
    orderBy?: friendshipOrderByWithRelationInput | friendshipOrderByWithRelationInput[]
    cursor?: friendshipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FriendshipScalarFieldEnum | FriendshipScalarFieldEnum[]
  }

  /**
   * user.list
   */
  export type user$listArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the list
     */
    select?: listSelect<ExtArgs> | null
    /**
     * Omit specific fields from the list
     */
    omit?: listOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: listInclude<ExtArgs> | null
    where?: listWhereInput
    orderBy?: listOrderByWithRelationInput | listOrderByWithRelationInput[]
    cursor?: listWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ListScalarFieldEnum | ListScalarFieldEnum[]
  }

  /**
   * user.notification_notification_UIDTouser
   */
  export type user$notification_notification_UIDTouserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notification
     */
    omit?: notificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationInclude<ExtArgs> | null
    where?: notificationWhereInput
    orderBy?: notificationOrderByWithRelationInput | notificationOrderByWithRelationInput[]
    cursor?: notificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * user.notification_notification_FromUserTouser
   */
  export type user$notification_notification_FromUserTouserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notification
     */
    omit?: notificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationInclude<ExtArgs> | null
    where?: notificationWhereInput
    orderBy?: notificationOrderByWithRelationInput | notificationOrderByWithRelationInput[]
    cursor?: notificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * user.studyplanprogress
   */
  export type user$studyplanprogressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studyplanprogress
     */
    select?: studyplanprogressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the studyplanprogress
     */
    omit?: studyplanprogressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studyplanprogressInclude<ExtArgs> | null
    where?: studyplanprogressWhereInput
    orderBy?: studyplanprogressOrderByWithRelationInput | studyplanprogressOrderByWithRelationInput[]
    cursor?: studyplanprogressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudyplanprogressScalarFieldEnum | StudyplanprogressScalarFieldEnum[]
  }

  /**
   * user.submission
   */
  export type user$submissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the submission
     */
    select?: submissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the submission
     */
    omit?: submissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: submissionInclude<ExtArgs> | null
    where?: submissionWhereInput
    orderBy?: submissionOrderByWithRelationInput | submissionOrderByWithRelationInput[]
    cursor?: submissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * user without action
   */
  export type userDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
  }


  /**
   * Model friendship
   */

  export type AggregateFriendship = {
    _count: FriendshipCountAggregateOutputType | null
    _avg: FriendshipAvgAggregateOutputType | null
    _sum: FriendshipSumAggregateOutputType | null
    _min: FriendshipMinAggregateOutputType | null
    _max: FriendshipMaxAggregateOutputType | null
  }

  export type FriendshipAvgAggregateOutputType = {
    FID: number | null
  }

  export type FriendshipSumAggregateOutputType = {
    FID: number | null
  }

  export type FriendshipMinAggregateOutputType = {
    FID: number | null
    requester: string | null
    addressee: string | null
    status: $Enums.friendship_status | null
    CreatedAt: Date | null
  }

  export type FriendshipMaxAggregateOutputType = {
    FID: number | null
    requester: string | null
    addressee: string | null
    status: $Enums.friendship_status | null
    CreatedAt: Date | null
  }

  export type FriendshipCountAggregateOutputType = {
    FID: number
    requester: number
    addressee: number
    status: number
    CreatedAt: number
    _all: number
  }


  export type FriendshipAvgAggregateInputType = {
    FID?: true
  }

  export type FriendshipSumAggregateInputType = {
    FID?: true
  }

  export type FriendshipMinAggregateInputType = {
    FID?: true
    requester?: true
    addressee?: true
    status?: true
    CreatedAt?: true
  }

  export type FriendshipMaxAggregateInputType = {
    FID?: true
    requester?: true
    addressee?: true
    status?: true
    CreatedAt?: true
  }

  export type FriendshipCountAggregateInputType = {
    FID?: true
    requester?: true
    addressee?: true
    status?: true
    CreatedAt?: true
    _all?: true
  }

  export type FriendshipAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which friendship to aggregate.
     */
    where?: friendshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of friendships to fetch.
     */
    orderBy?: friendshipOrderByWithRelationInput | friendshipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: friendshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` friendships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` friendships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned friendships
    **/
    _count?: true | FriendshipCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FriendshipAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FriendshipSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FriendshipMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FriendshipMaxAggregateInputType
  }

  export type GetFriendshipAggregateType<T extends FriendshipAggregateArgs> = {
        [P in keyof T & keyof AggregateFriendship]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFriendship[P]>
      : GetScalarType<T[P], AggregateFriendship[P]>
  }




  export type friendshipGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: friendshipWhereInput
    orderBy?: friendshipOrderByWithAggregationInput | friendshipOrderByWithAggregationInput[]
    by: FriendshipScalarFieldEnum[] | FriendshipScalarFieldEnum
    having?: friendshipScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FriendshipCountAggregateInputType | true
    _avg?: FriendshipAvgAggregateInputType
    _sum?: FriendshipSumAggregateInputType
    _min?: FriendshipMinAggregateInputType
    _max?: FriendshipMaxAggregateInputType
  }

  export type FriendshipGroupByOutputType = {
    FID: number
    requester: string
    addressee: string
    status: $Enums.friendship_status
    CreatedAt: Date | null
    _count: FriendshipCountAggregateOutputType | null
    _avg: FriendshipAvgAggregateOutputType | null
    _sum: FriendshipSumAggregateOutputType | null
    _min: FriendshipMinAggregateOutputType | null
    _max: FriendshipMaxAggregateOutputType | null
  }

  type GetFriendshipGroupByPayload<T extends friendshipGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FriendshipGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FriendshipGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FriendshipGroupByOutputType[P]>
            : GetScalarType<T[P], FriendshipGroupByOutputType[P]>
        }
      >
    >


  export type friendshipSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    FID?: boolean
    requester?: boolean
    addressee?: boolean
    status?: boolean
    CreatedAt?: boolean
    user_friendship_requesterTouser?: boolean | userDefaultArgs<ExtArgs>
    user_friendship_addresseeTouser?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["friendship"]>



  export type friendshipSelectScalar = {
    FID?: boolean
    requester?: boolean
    addressee?: boolean
    status?: boolean
    CreatedAt?: boolean
  }

  export type friendshipOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"FID" | "requester" | "addressee" | "status" | "CreatedAt", ExtArgs["result"]["friendship"]>
  export type friendshipInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user_friendship_requesterTouser?: boolean | userDefaultArgs<ExtArgs>
    user_friendship_addresseeTouser?: boolean | userDefaultArgs<ExtArgs>
  }

  export type $friendshipPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "friendship"
    objects: {
      user_friendship_requesterTouser: Prisma.$userPayload<ExtArgs>
      user_friendship_addresseeTouser: Prisma.$userPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      FID: number
      requester: string
      addressee: string
      status: $Enums.friendship_status
      CreatedAt: Date | null
    }, ExtArgs["result"]["friendship"]>
    composites: {}
  }

  type friendshipGetPayload<S extends boolean | null | undefined | friendshipDefaultArgs> = $Result.GetResult<Prisma.$friendshipPayload, S>

  type friendshipCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<friendshipFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FriendshipCountAggregateInputType | true
    }

  export interface friendshipDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['friendship'], meta: { name: 'friendship' } }
    /**
     * Find zero or one Friendship that matches the filter.
     * @param {friendshipFindUniqueArgs} args - Arguments to find a Friendship
     * @example
     * // Get one Friendship
     * const friendship = await prisma.friendship.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends friendshipFindUniqueArgs>(args: SelectSubset<T, friendshipFindUniqueArgs<ExtArgs>>): Prisma__friendshipClient<$Result.GetResult<Prisma.$friendshipPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Friendship that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {friendshipFindUniqueOrThrowArgs} args - Arguments to find a Friendship
     * @example
     * // Get one Friendship
     * const friendship = await prisma.friendship.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends friendshipFindUniqueOrThrowArgs>(args: SelectSubset<T, friendshipFindUniqueOrThrowArgs<ExtArgs>>): Prisma__friendshipClient<$Result.GetResult<Prisma.$friendshipPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Friendship that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {friendshipFindFirstArgs} args - Arguments to find a Friendship
     * @example
     * // Get one Friendship
     * const friendship = await prisma.friendship.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends friendshipFindFirstArgs>(args?: SelectSubset<T, friendshipFindFirstArgs<ExtArgs>>): Prisma__friendshipClient<$Result.GetResult<Prisma.$friendshipPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Friendship that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {friendshipFindFirstOrThrowArgs} args - Arguments to find a Friendship
     * @example
     * // Get one Friendship
     * const friendship = await prisma.friendship.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends friendshipFindFirstOrThrowArgs>(args?: SelectSubset<T, friendshipFindFirstOrThrowArgs<ExtArgs>>): Prisma__friendshipClient<$Result.GetResult<Prisma.$friendshipPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Friendships that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {friendshipFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Friendships
     * const friendships = await prisma.friendship.findMany()
     * 
     * // Get first 10 Friendships
     * const friendships = await prisma.friendship.findMany({ take: 10 })
     * 
     * // Only select the `FID`
     * const friendshipWithFIDOnly = await prisma.friendship.findMany({ select: { FID: true } })
     * 
     */
    findMany<T extends friendshipFindManyArgs>(args?: SelectSubset<T, friendshipFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$friendshipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Friendship.
     * @param {friendshipCreateArgs} args - Arguments to create a Friendship.
     * @example
     * // Create one Friendship
     * const Friendship = await prisma.friendship.create({
     *   data: {
     *     // ... data to create a Friendship
     *   }
     * })
     * 
     */
    create<T extends friendshipCreateArgs>(args: SelectSubset<T, friendshipCreateArgs<ExtArgs>>): Prisma__friendshipClient<$Result.GetResult<Prisma.$friendshipPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Friendships.
     * @param {friendshipCreateManyArgs} args - Arguments to create many Friendships.
     * @example
     * // Create many Friendships
     * const friendship = await prisma.friendship.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends friendshipCreateManyArgs>(args?: SelectSubset<T, friendshipCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Friendship.
     * @param {friendshipDeleteArgs} args - Arguments to delete one Friendship.
     * @example
     * // Delete one Friendship
     * const Friendship = await prisma.friendship.delete({
     *   where: {
     *     // ... filter to delete one Friendship
     *   }
     * })
     * 
     */
    delete<T extends friendshipDeleteArgs>(args: SelectSubset<T, friendshipDeleteArgs<ExtArgs>>): Prisma__friendshipClient<$Result.GetResult<Prisma.$friendshipPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Friendship.
     * @param {friendshipUpdateArgs} args - Arguments to update one Friendship.
     * @example
     * // Update one Friendship
     * const friendship = await prisma.friendship.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends friendshipUpdateArgs>(args: SelectSubset<T, friendshipUpdateArgs<ExtArgs>>): Prisma__friendshipClient<$Result.GetResult<Prisma.$friendshipPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Friendships.
     * @param {friendshipDeleteManyArgs} args - Arguments to filter Friendships to delete.
     * @example
     * // Delete a few Friendships
     * const { count } = await prisma.friendship.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends friendshipDeleteManyArgs>(args?: SelectSubset<T, friendshipDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Friendships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {friendshipUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Friendships
     * const friendship = await prisma.friendship.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends friendshipUpdateManyArgs>(args: SelectSubset<T, friendshipUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Friendship.
     * @param {friendshipUpsertArgs} args - Arguments to update or create a Friendship.
     * @example
     * // Update or create a Friendship
     * const friendship = await prisma.friendship.upsert({
     *   create: {
     *     // ... data to create a Friendship
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Friendship we want to update
     *   }
     * })
     */
    upsert<T extends friendshipUpsertArgs>(args: SelectSubset<T, friendshipUpsertArgs<ExtArgs>>): Prisma__friendshipClient<$Result.GetResult<Prisma.$friendshipPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Friendships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {friendshipCountArgs} args - Arguments to filter Friendships to count.
     * @example
     * // Count the number of Friendships
     * const count = await prisma.friendship.count({
     *   where: {
     *     // ... the filter for the Friendships we want to count
     *   }
     * })
    **/
    count<T extends friendshipCountArgs>(
      args?: Subset<T, friendshipCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FriendshipCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Friendship.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FriendshipAggregateArgs>(args: Subset<T, FriendshipAggregateArgs>): Prisma.PrismaPromise<GetFriendshipAggregateType<T>>

    /**
     * Group by Friendship.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {friendshipGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends friendshipGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: friendshipGroupByArgs['orderBy'] }
        : { orderBy?: friendshipGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, friendshipGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFriendshipGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the friendship model
   */
  readonly fields: friendshipFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for friendship.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__friendshipClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user_friendship_requesterTouser<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user_friendship_addresseeTouser<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the friendship model
   */
  interface friendshipFieldRefs {
    readonly FID: FieldRef<"friendship", 'Int'>
    readonly requester: FieldRef<"friendship", 'String'>
    readonly addressee: FieldRef<"friendship", 'String'>
    readonly status: FieldRef<"friendship", 'friendship_status'>
    readonly CreatedAt: FieldRef<"friendship", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * friendship findUnique
   */
  export type friendshipFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the friendship
     */
    select?: friendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the friendship
     */
    omit?: friendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: friendshipInclude<ExtArgs> | null
    /**
     * Filter, which friendship to fetch.
     */
    where: friendshipWhereUniqueInput
  }

  /**
   * friendship findUniqueOrThrow
   */
  export type friendshipFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the friendship
     */
    select?: friendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the friendship
     */
    omit?: friendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: friendshipInclude<ExtArgs> | null
    /**
     * Filter, which friendship to fetch.
     */
    where: friendshipWhereUniqueInput
  }

  /**
   * friendship findFirst
   */
  export type friendshipFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the friendship
     */
    select?: friendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the friendship
     */
    omit?: friendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: friendshipInclude<ExtArgs> | null
    /**
     * Filter, which friendship to fetch.
     */
    where?: friendshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of friendships to fetch.
     */
    orderBy?: friendshipOrderByWithRelationInput | friendshipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for friendships.
     */
    cursor?: friendshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` friendships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` friendships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of friendships.
     */
    distinct?: FriendshipScalarFieldEnum | FriendshipScalarFieldEnum[]
  }

  /**
   * friendship findFirstOrThrow
   */
  export type friendshipFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the friendship
     */
    select?: friendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the friendship
     */
    omit?: friendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: friendshipInclude<ExtArgs> | null
    /**
     * Filter, which friendship to fetch.
     */
    where?: friendshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of friendships to fetch.
     */
    orderBy?: friendshipOrderByWithRelationInput | friendshipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for friendships.
     */
    cursor?: friendshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` friendships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` friendships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of friendships.
     */
    distinct?: FriendshipScalarFieldEnum | FriendshipScalarFieldEnum[]
  }

  /**
   * friendship findMany
   */
  export type friendshipFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the friendship
     */
    select?: friendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the friendship
     */
    omit?: friendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: friendshipInclude<ExtArgs> | null
    /**
     * Filter, which friendships to fetch.
     */
    where?: friendshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of friendships to fetch.
     */
    orderBy?: friendshipOrderByWithRelationInput | friendshipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing friendships.
     */
    cursor?: friendshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` friendships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` friendships.
     */
    skip?: number
    distinct?: FriendshipScalarFieldEnum | FriendshipScalarFieldEnum[]
  }

  /**
   * friendship create
   */
  export type friendshipCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the friendship
     */
    select?: friendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the friendship
     */
    omit?: friendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: friendshipInclude<ExtArgs> | null
    /**
     * The data needed to create a friendship.
     */
    data: XOR<friendshipCreateInput, friendshipUncheckedCreateInput>
  }

  /**
   * friendship createMany
   */
  export type friendshipCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many friendships.
     */
    data: friendshipCreateManyInput | friendshipCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * friendship update
   */
  export type friendshipUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the friendship
     */
    select?: friendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the friendship
     */
    omit?: friendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: friendshipInclude<ExtArgs> | null
    /**
     * The data needed to update a friendship.
     */
    data: XOR<friendshipUpdateInput, friendshipUncheckedUpdateInput>
    /**
     * Choose, which friendship to update.
     */
    where: friendshipWhereUniqueInput
  }

  /**
   * friendship updateMany
   */
  export type friendshipUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update friendships.
     */
    data: XOR<friendshipUpdateManyMutationInput, friendshipUncheckedUpdateManyInput>
    /**
     * Filter which friendships to update
     */
    where?: friendshipWhereInput
    /**
     * Limit how many friendships to update.
     */
    limit?: number
  }

  /**
   * friendship upsert
   */
  export type friendshipUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the friendship
     */
    select?: friendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the friendship
     */
    omit?: friendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: friendshipInclude<ExtArgs> | null
    /**
     * The filter to search for the friendship to update in case it exists.
     */
    where: friendshipWhereUniqueInput
    /**
     * In case the friendship found by the `where` argument doesn't exist, create a new friendship with this data.
     */
    create: XOR<friendshipCreateInput, friendshipUncheckedCreateInput>
    /**
     * In case the friendship was found with the provided `where` argument, update it with this data.
     */
    update: XOR<friendshipUpdateInput, friendshipUncheckedUpdateInput>
  }

  /**
   * friendship delete
   */
  export type friendshipDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the friendship
     */
    select?: friendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the friendship
     */
    omit?: friendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: friendshipInclude<ExtArgs> | null
    /**
     * Filter which friendship to delete.
     */
    where: friendshipWhereUniqueInput
  }

  /**
   * friendship deleteMany
   */
  export type friendshipDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which friendships to delete
     */
    where?: friendshipWhereInput
    /**
     * Limit how many friendships to delete.
     */
    limit?: number
  }

  /**
   * friendship without action
   */
  export type friendshipDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the friendship
     */
    select?: friendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the friendship
     */
    omit?: friendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: friendshipInclude<ExtArgs> | null
  }


  /**
   * Model chapter
   */

  export type AggregateChapter = {
    _count: ChapterCountAggregateOutputType | null
    _avg: ChapterAvgAggregateOutputType | null
    _sum: ChapterSumAggregateOutputType | null
    _min: ChapterMinAggregateOutputType | null
    _max: ChapterMaxAggregateOutputType | null
  }

  export type ChapterAvgAggregateOutputType = {
    CID: number | null
    ChapterIndex: number | null
  }

  export type ChapterSumAggregateOutputType = {
    CID: number | null
    ChapterIndex: number | null
  }

  export type ChapterMinAggregateOutputType = {
    CID: number | null
    ChapterIndex: number | null
    Name: string | null
  }

  export type ChapterMaxAggregateOutputType = {
    CID: number | null
    ChapterIndex: number | null
    Name: string | null
  }

  export type ChapterCountAggregateOutputType = {
    CID: number
    ChapterIndex: number
    Name: number
    _all: number
  }


  export type ChapterAvgAggregateInputType = {
    CID?: true
    ChapterIndex?: true
  }

  export type ChapterSumAggregateInputType = {
    CID?: true
    ChapterIndex?: true
  }

  export type ChapterMinAggregateInputType = {
    CID?: true
    ChapterIndex?: true
    Name?: true
  }

  export type ChapterMaxAggregateInputType = {
    CID?: true
    ChapterIndex?: true
    Name?: true
  }

  export type ChapterCountAggregateInputType = {
    CID?: true
    ChapterIndex?: true
    Name?: true
    _all?: true
  }

  export type ChapterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which chapter to aggregate.
     */
    where?: chapterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chapters to fetch.
     */
    orderBy?: chapterOrderByWithRelationInput | chapterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: chapterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chapters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chapters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chapters
    **/
    _count?: true | ChapterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChapterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChapterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChapterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChapterMaxAggregateInputType
  }

  export type GetChapterAggregateType<T extends ChapterAggregateArgs> = {
        [P in keyof T & keyof AggregateChapter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChapter[P]>
      : GetScalarType<T[P], AggregateChapter[P]>
  }




  export type chapterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: chapterWhereInput
    orderBy?: chapterOrderByWithAggregationInput | chapterOrderByWithAggregationInput[]
    by: ChapterScalarFieldEnum[] | ChapterScalarFieldEnum
    having?: chapterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChapterCountAggregateInputType | true
    _avg?: ChapterAvgAggregateInputType
    _sum?: ChapterSumAggregateInputType
    _min?: ChapterMinAggregateInputType
    _max?: ChapterMaxAggregateInputType
  }

  export type ChapterGroupByOutputType = {
    CID: number
    ChapterIndex: number
    Name: string
    _count: ChapterCountAggregateOutputType | null
    _avg: ChapterAvgAggregateOutputType | null
    _sum: ChapterSumAggregateOutputType | null
    _min: ChapterMinAggregateOutputType | null
    _max: ChapterMaxAggregateOutputType | null
  }

  type GetChapterGroupByPayload<T extends chapterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChapterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChapterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChapterGroupByOutputType[P]>
            : GetScalarType<T[P], ChapterGroupByOutputType[P]>
        }
      >
    >


  export type chapterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    CID?: boolean
    ChapterIndex?: boolean
    Name?: boolean
    lesson?: boolean | chapter$lessonArgs<ExtArgs>
    _count?: boolean | ChapterCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chapter"]>



  export type chapterSelectScalar = {
    CID?: boolean
    ChapterIndex?: boolean
    Name?: boolean
  }

  export type chapterOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"CID" | "ChapterIndex" | "Name", ExtArgs["result"]["chapter"]>
  export type chapterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lesson?: boolean | chapter$lessonArgs<ExtArgs>
    _count?: boolean | ChapterCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $chapterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "chapter"
    objects: {
      lesson: Prisma.$lessonPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      CID: number
      ChapterIndex: number
      Name: string
    }, ExtArgs["result"]["chapter"]>
    composites: {}
  }

  type chapterGetPayload<S extends boolean | null | undefined | chapterDefaultArgs> = $Result.GetResult<Prisma.$chapterPayload, S>

  type chapterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<chapterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChapterCountAggregateInputType | true
    }

  export interface chapterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['chapter'], meta: { name: 'chapter' } }
    /**
     * Find zero or one Chapter that matches the filter.
     * @param {chapterFindUniqueArgs} args - Arguments to find a Chapter
     * @example
     * // Get one Chapter
     * const chapter = await prisma.chapter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends chapterFindUniqueArgs>(args: SelectSubset<T, chapterFindUniqueArgs<ExtArgs>>): Prisma__chapterClient<$Result.GetResult<Prisma.$chapterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Chapter that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {chapterFindUniqueOrThrowArgs} args - Arguments to find a Chapter
     * @example
     * // Get one Chapter
     * const chapter = await prisma.chapter.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends chapterFindUniqueOrThrowArgs>(args: SelectSubset<T, chapterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__chapterClient<$Result.GetResult<Prisma.$chapterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Chapter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chapterFindFirstArgs} args - Arguments to find a Chapter
     * @example
     * // Get one Chapter
     * const chapter = await prisma.chapter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends chapterFindFirstArgs>(args?: SelectSubset<T, chapterFindFirstArgs<ExtArgs>>): Prisma__chapterClient<$Result.GetResult<Prisma.$chapterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Chapter that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chapterFindFirstOrThrowArgs} args - Arguments to find a Chapter
     * @example
     * // Get one Chapter
     * const chapter = await prisma.chapter.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends chapterFindFirstOrThrowArgs>(args?: SelectSubset<T, chapterFindFirstOrThrowArgs<ExtArgs>>): Prisma__chapterClient<$Result.GetResult<Prisma.$chapterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Chapters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chapterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chapters
     * const chapters = await prisma.chapter.findMany()
     * 
     * // Get first 10 Chapters
     * const chapters = await prisma.chapter.findMany({ take: 10 })
     * 
     * // Only select the `CID`
     * const chapterWithCIDOnly = await prisma.chapter.findMany({ select: { CID: true } })
     * 
     */
    findMany<T extends chapterFindManyArgs>(args?: SelectSubset<T, chapterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$chapterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Chapter.
     * @param {chapterCreateArgs} args - Arguments to create a Chapter.
     * @example
     * // Create one Chapter
     * const Chapter = await prisma.chapter.create({
     *   data: {
     *     // ... data to create a Chapter
     *   }
     * })
     * 
     */
    create<T extends chapterCreateArgs>(args: SelectSubset<T, chapterCreateArgs<ExtArgs>>): Prisma__chapterClient<$Result.GetResult<Prisma.$chapterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Chapters.
     * @param {chapterCreateManyArgs} args - Arguments to create many Chapters.
     * @example
     * // Create many Chapters
     * const chapter = await prisma.chapter.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends chapterCreateManyArgs>(args?: SelectSubset<T, chapterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Chapter.
     * @param {chapterDeleteArgs} args - Arguments to delete one Chapter.
     * @example
     * // Delete one Chapter
     * const Chapter = await prisma.chapter.delete({
     *   where: {
     *     // ... filter to delete one Chapter
     *   }
     * })
     * 
     */
    delete<T extends chapterDeleteArgs>(args: SelectSubset<T, chapterDeleteArgs<ExtArgs>>): Prisma__chapterClient<$Result.GetResult<Prisma.$chapterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Chapter.
     * @param {chapterUpdateArgs} args - Arguments to update one Chapter.
     * @example
     * // Update one Chapter
     * const chapter = await prisma.chapter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends chapterUpdateArgs>(args: SelectSubset<T, chapterUpdateArgs<ExtArgs>>): Prisma__chapterClient<$Result.GetResult<Prisma.$chapterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Chapters.
     * @param {chapterDeleteManyArgs} args - Arguments to filter Chapters to delete.
     * @example
     * // Delete a few Chapters
     * const { count } = await prisma.chapter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends chapterDeleteManyArgs>(args?: SelectSubset<T, chapterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chapters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chapterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chapters
     * const chapter = await prisma.chapter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends chapterUpdateManyArgs>(args: SelectSubset<T, chapterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Chapter.
     * @param {chapterUpsertArgs} args - Arguments to update or create a Chapter.
     * @example
     * // Update or create a Chapter
     * const chapter = await prisma.chapter.upsert({
     *   create: {
     *     // ... data to create a Chapter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chapter we want to update
     *   }
     * })
     */
    upsert<T extends chapterUpsertArgs>(args: SelectSubset<T, chapterUpsertArgs<ExtArgs>>): Prisma__chapterClient<$Result.GetResult<Prisma.$chapterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Chapters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chapterCountArgs} args - Arguments to filter Chapters to count.
     * @example
     * // Count the number of Chapters
     * const count = await prisma.chapter.count({
     *   where: {
     *     // ... the filter for the Chapters we want to count
     *   }
     * })
    **/
    count<T extends chapterCountArgs>(
      args?: Subset<T, chapterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChapterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chapter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChapterAggregateArgs>(args: Subset<T, ChapterAggregateArgs>): Prisma.PrismaPromise<GetChapterAggregateType<T>>

    /**
     * Group by Chapter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chapterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends chapterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: chapterGroupByArgs['orderBy'] }
        : { orderBy?: chapterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, chapterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChapterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the chapter model
   */
  readonly fields: chapterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for chapter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__chapterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lesson<T extends chapter$lessonArgs<ExtArgs> = {}>(args?: Subset<T, chapter$lessonArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$lessonPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the chapter model
   */
  interface chapterFieldRefs {
    readonly CID: FieldRef<"chapter", 'Int'>
    readonly ChapterIndex: FieldRef<"chapter", 'Int'>
    readonly Name: FieldRef<"chapter", 'String'>
  }
    

  // Custom InputTypes
  /**
   * chapter findUnique
   */
  export type chapterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chapter
     */
    select?: chapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the chapter
     */
    omit?: chapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chapterInclude<ExtArgs> | null
    /**
     * Filter, which chapter to fetch.
     */
    where: chapterWhereUniqueInput
  }

  /**
   * chapter findUniqueOrThrow
   */
  export type chapterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chapter
     */
    select?: chapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the chapter
     */
    omit?: chapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chapterInclude<ExtArgs> | null
    /**
     * Filter, which chapter to fetch.
     */
    where: chapterWhereUniqueInput
  }

  /**
   * chapter findFirst
   */
  export type chapterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chapter
     */
    select?: chapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the chapter
     */
    omit?: chapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chapterInclude<ExtArgs> | null
    /**
     * Filter, which chapter to fetch.
     */
    where?: chapterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chapters to fetch.
     */
    orderBy?: chapterOrderByWithRelationInput | chapterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chapters.
     */
    cursor?: chapterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chapters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chapters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chapters.
     */
    distinct?: ChapterScalarFieldEnum | ChapterScalarFieldEnum[]
  }

  /**
   * chapter findFirstOrThrow
   */
  export type chapterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chapter
     */
    select?: chapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the chapter
     */
    omit?: chapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chapterInclude<ExtArgs> | null
    /**
     * Filter, which chapter to fetch.
     */
    where?: chapterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chapters to fetch.
     */
    orderBy?: chapterOrderByWithRelationInput | chapterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chapters.
     */
    cursor?: chapterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chapters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chapters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chapters.
     */
    distinct?: ChapterScalarFieldEnum | ChapterScalarFieldEnum[]
  }

  /**
   * chapter findMany
   */
  export type chapterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chapter
     */
    select?: chapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the chapter
     */
    omit?: chapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chapterInclude<ExtArgs> | null
    /**
     * Filter, which chapters to fetch.
     */
    where?: chapterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chapters to fetch.
     */
    orderBy?: chapterOrderByWithRelationInput | chapterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chapters.
     */
    cursor?: chapterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chapters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chapters.
     */
    skip?: number
    distinct?: ChapterScalarFieldEnum | ChapterScalarFieldEnum[]
  }

  /**
   * chapter create
   */
  export type chapterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chapter
     */
    select?: chapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the chapter
     */
    omit?: chapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chapterInclude<ExtArgs> | null
    /**
     * The data needed to create a chapter.
     */
    data: XOR<chapterCreateInput, chapterUncheckedCreateInput>
  }

  /**
   * chapter createMany
   */
  export type chapterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many chapters.
     */
    data: chapterCreateManyInput | chapterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * chapter update
   */
  export type chapterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chapter
     */
    select?: chapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the chapter
     */
    omit?: chapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chapterInclude<ExtArgs> | null
    /**
     * The data needed to update a chapter.
     */
    data: XOR<chapterUpdateInput, chapterUncheckedUpdateInput>
    /**
     * Choose, which chapter to update.
     */
    where: chapterWhereUniqueInput
  }

  /**
   * chapter updateMany
   */
  export type chapterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update chapters.
     */
    data: XOR<chapterUpdateManyMutationInput, chapterUncheckedUpdateManyInput>
    /**
     * Filter which chapters to update
     */
    where?: chapterWhereInput
    /**
     * Limit how many chapters to update.
     */
    limit?: number
  }

  /**
   * chapter upsert
   */
  export type chapterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chapter
     */
    select?: chapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the chapter
     */
    omit?: chapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chapterInclude<ExtArgs> | null
    /**
     * The filter to search for the chapter to update in case it exists.
     */
    where: chapterWhereUniqueInput
    /**
     * In case the chapter found by the `where` argument doesn't exist, create a new chapter with this data.
     */
    create: XOR<chapterCreateInput, chapterUncheckedCreateInput>
    /**
     * In case the chapter was found with the provided `where` argument, update it with this data.
     */
    update: XOR<chapterUpdateInput, chapterUncheckedUpdateInput>
  }

  /**
   * chapter delete
   */
  export type chapterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chapter
     */
    select?: chapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the chapter
     */
    omit?: chapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chapterInclude<ExtArgs> | null
    /**
     * Filter which chapter to delete.
     */
    where: chapterWhereUniqueInput
  }

  /**
   * chapter deleteMany
   */
  export type chapterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which chapters to delete
     */
    where?: chapterWhereInput
    /**
     * Limit how many chapters to delete.
     */
    limit?: number
  }

  /**
   * chapter.lesson
   */
  export type chapter$lessonArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lesson
     */
    select?: lessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lesson
     */
    omit?: lessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lessonInclude<ExtArgs> | null
    where?: lessonWhereInput
    orderBy?: lessonOrderByWithRelationInput | lessonOrderByWithRelationInput[]
    cursor?: lessonWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LessonScalarFieldEnum | LessonScalarFieldEnum[]
  }

  /**
   * chapter without action
   */
  export type chapterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chapter
     */
    select?: chapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the chapter
     */
    omit?: chapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chapterInclude<ExtArgs> | null
  }


  /**
   * Model comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentAvgAggregateOutputType = {
    CoID: number | null
    LID: number | null
    EID: number | null
  }

  export type CommentSumAggregateOutputType = {
    CoID: number | null
    LID: number | null
    EID: number | null
  }

  export type CommentMinAggregateOutputType = {
    CoID: number | null
    UID: string | null
    LID: number | null
    EID: number | null
    Content: string | null
    CreatedAt: Date | null
  }

  export type CommentMaxAggregateOutputType = {
    CoID: number | null
    UID: string | null
    LID: number | null
    EID: number | null
    Content: string | null
    CreatedAt: Date | null
  }

  export type CommentCountAggregateOutputType = {
    CoID: number
    UID: number
    LID: number
    EID: number
    Content: number
    CreatedAt: number
    _all: number
  }


  export type CommentAvgAggregateInputType = {
    CoID?: true
    LID?: true
    EID?: true
  }

  export type CommentSumAggregateInputType = {
    CoID?: true
    LID?: true
    EID?: true
  }

  export type CommentMinAggregateInputType = {
    CoID?: true
    UID?: true
    LID?: true
    EID?: true
    Content?: true
    CreatedAt?: true
  }

  export type CommentMaxAggregateInputType = {
    CoID?: true
    UID?: true
    LID?: true
    EID?: true
    Content?: true
    CreatedAt?: true
  }

  export type CommentCountAggregateInputType = {
    CoID?: true
    UID?: true
    LID?: true
    EID?: true
    Content?: true
    CreatedAt?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which comment to aggregate.
     */
    where?: commentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comments to fetch.
     */
    orderBy?: commentOrderByWithRelationInput | commentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: commentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type commentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: commentWhereInput
    orderBy?: commentOrderByWithAggregationInput | commentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: commentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _avg?: CommentAvgAggregateInputType
    _sum?: CommentSumAggregateInputType
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    CoID: number
    UID: string
    LID: number | null
    EID: number | null
    Content: string
    CreatedAt: Date | null
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends commentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type commentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    CoID?: boolean
    UID?: boolean
    LID?: boolean
    EID?: boolean
    Content?: boolean
    CreatedAt?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
    lesson?: boolean | comment$lessonArgs<ExtArgs>
    exercise?: boolean | comment$exerciseArgs<ExtArgs>
    commentlike?: boolean | comment$commentlikeArgs<ExtArgs>
    notification?: boolean | comment$notificationArgs<ExtArgs>
    _count?: boolean | CommentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>



  export type commentSelectScalar = {
    CoID?: boolean
    UID?: boolean
    LID?: boolean
    EID?: boolean
    Content?: boolean
    CreatedAt?: boolean
  }

  export type commentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"CoID" | "UID" | "LID" | "EID" | "Content" | "CreatedAt", ExtArgs["result"]["comment"]>
  export type commentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
    lesson?: boolean | comment$lessonArgs<ExtArgs>
    exercise?: boolean | comment$exerciseArgs<ExtArgs>
    commentlike?: boolean | comment$commentlikeArgs<ExtArgs>
    notification?: boolean | comment$notificationArgs<ExtArgs>
    _count?: boolean | CommentCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $commentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "comment"
    objects: {
      user: Prisma.$userPayload<ExtArgs>
      lesson: Prisma.$lessonPayload<ExtArgs> | null
      exercise: Prisma.$exercisePayload<ExtArgs> | null
      commentlike: Prisma.$commentlikePayload<ExtArgs>[]
      notification: Prisma.$notificationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      CoID: number
      UID: string
      LID: number | null
      EID: number | null
      Content: string
      CreatedAt: Date | null
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }

  type commentGetPayload<S extends boolean | null | undefined | commentDefaultArgs> = $Result.GetResult<Prisma.$commentPayload, S>

  type commentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<commentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface commentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['comment'], meta: { name: 'comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {commentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends commentFindUniqueArgs>(args: SelectSubset<T, commentFindUniqueArgs<ExtArgs>>): Prisma__commentClient<$Result.GetResult<Prisma.$commentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Comment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {commentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends commentFindUniqueOrThrowArgs>(args: SelectSubset<T, commentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__commentClient<$Result.GetResult<Prisma.$commentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends commentFindFirstArgs>(args?: SelectSubset<T, commentFindFirstArgs<ExtArgs>>): Prisma__commentClient<$Result.GetResult<Prisma.$commentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends commentFindFirstOrThrowArgs>(args?: SelectSubset<T, commentFindFirstOrThrowArgs<ExtArgs>>): Prisma__commentClient<$Result.GetResult<Prisma.$commentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `CoID`
     * const commentWithCoIDOnly = await prisma.comment.findMany({ select: { CoID: true } })
     * 
     */
    findMany<T extends commentFindManyArgs>(args?: SelectSubset<T, commentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$commentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Comment.
     * @param {commentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
     */
    create<T extends commentCreateArgs>(args: SelectSubset<T, commentCreateArgs<ExtArgs>>): Prisma__commentClient<$Result.GetResult<Prisma.$commentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Comments.
     * @param {commentCreateManyArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends commentCreateManyArgs>(args?: SelectSubset<T, commentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Comment.
     * @param {commentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
     */
    delete<T extends commentDeleteArgs>(args: SelectSubset<T, commentDeleteArgs<ExtArgs>>): Prisma__commentClient<$Result.GetResult<Prisma.$commentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Comment.
     * @param {commentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends commentUpdateArgs>(args: SelectSubset<T, commentUpdateArgs<ExtArgs>>): Prisma__commentClient<$Result.GetResult<Prisma.$commentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Comments.
     * @param {commentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends commentDeleteManyArgs>(args?: SelectSubset<T, commentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends commentUpdateManyArgs>(args: SelectSubset<T, commentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comment.
     * @param {commentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
     */
    upsert<T extends commentUpsertArgs>(args: SelectSubset<T, commentUpsertArgs<ExtArgs>>): Prisma__commentClient<$Result.GetResult<Prisma.$commentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends commentCountArgs>(
      args?: Subset<T, commentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends commentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: commentGroupByArgs['orderBy'] }
        : { orderBy?: commentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, commentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the comment model
   */
  readonly fields: commentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__commentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    lesson<T extends comment$lessonArgs<ExtArgs> = {}>(args?: Subset<T, comment$lessonArgs<ExtArgs>>): Prisma__lessonClient<$Result.GetResult<Prisma.$lessonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    exercise<T extends comment$exerciseArgs<ExtArgs> = {}>(args?: Subset<T, comment$exerciseArgs<ExtArgs>>): Prisma__exerciseClient<$Result.GetResult<Prisma.$exercisePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    commentlike<T extends comment$commentlikeArgs<ExtArgs> = {}>(args?: Subset<T, comment$commentlikeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$commentlikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notification<T extends comment$notificationArgs<ExtArgs> = {}>(args?: Subset<T, comment$notificationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$notificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the comment model
   */
  interface commentFieldRefs {
    readonly CoID: FieldRef<"comment", 'Int'>
    readonly UID: FieldRef<"comment", 'String'>
    readonly LID: FieldRef<"comment", 'Int'>
    readonly EID: FieldRef<"comment", 'Int'>
    readonly Content: FieldRef<"comment", 'String'>
    readonly CreatedAt: FieldRef<"comment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * comment findUnique
   */
  export type commentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the comment
     */
    omit?: commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentInclude<ExtArgs> | null
    /**
     * Filter, which comment to fetch.
     */
    where: commentWhereUniqueInput
  }

  /**
   * comment findUniqueOrThrow
   */
  export type commentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the comment
     */
    omit?: commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentInclude<ExtArgs> | null
    /**
     * Filter, which comment to fetch.
     */
    where: commentWhereUniqueInput
  }

  /**
   * comment findFirst
   */
  export type commentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the comment
     */
    omit?: commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentInclude<ExtArgs> | null
    /**
     * Filter, which comment to fetch.
     */
    where?: commentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comments to fetch.
     */
    orderBy?: commentOrderByWithRelationInput | commentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for comments.
     */
    cursor?: commentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * comment findFirstOrThrow
   */
  export type commentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the comment
     */
    omit?: commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentInclude<ExtArgs> | null
    /**
     * Filter, which comment to fetch.
     */
    where?: commentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comments to fetch.
     */
    orderBy?: commentOrderByWithRelationInput | commentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for comments.
     */
    cursor?: commentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * comment findMany
   */
  export type commentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the comment
     */
    omit?: commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentInclude<ExtArgs> | null
    /**
     * Filter, which comments to fetch.
     */
    where?: commentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comments to fetch.
     */
    orderBy?: commentOrderByWithRelationInput | commentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing comments.
     */
    cursor?: commentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * comment create
   */
  export type commentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the comment
     */
    omit?: commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentInclude<ExtArgs> | null
    /**
     * The data needed to create a comment.
     */
    data: XOR<commentCreateInput, commentUncheckedCreateInput>
  }

  /**
   * comment createMany
   */
  export type commentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many comments.
     */
    data: commentCreateManyInput | commentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * comment update
   */
  export type commentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the comment
     */
    omit?: commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentInclude<ExtArgs> | null
    /**
     * The data needed to update a comment.
     */
    data: XOR<commentUpdateInput, commentUncheckedUpdateInput>
    /**
     * Choose, which comment to update.
     */
    where: commentWhereUniqueInput
  }

  /**
   * comment updateMany
   */
  export type commentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update comments.
     */
    data: XOR<commentUpdateManyMutationInput, commentUncheckedUpdateManyInput>
    /**
     * Filter which comments to update
     */
    where?: commentWhereInput
    /**
     * Limit how many comments to update.
     */
    limit?: number
  }

  /**
   * comment upsert
   */
  export type commentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the comment
     */
    omit?: commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentInclude<ExtArgs> | null
    /**
     * The filter to search for the comment to update in case it exists.
     */
    where: commentWhereUniqueInput
    /**
     * In case the comment found by the `where` argument doesn't exist, create a new comment with this data.
     */
    create: XOR<commentCreateInput, commentUncheckedCreateInput>
    /**
     * In case the comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<commentUpdateInput, commentUncheckedUpdateInput>
  }

  /**
   * comment delete
   */
  export type commentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the comment
     */
    omit?: commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentInclude<ExtArgs> | null
    /**
     * Filter which comment to delete.
     */
    where: commentWhereUniqueInput
  }

  /**
   * comment deleteMany
   */
  export type commentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which comments to delete
     */
    where?: commentWhereInput
    /**
     * Limit how many comments to delete.
     */
    limit?: number
  }

  /**
   * comment.lesson
   */
  export type comment$lessonArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lesson
     */
    select?: lessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lesson
     */
    omit?: lessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lessonInclude<ExtArgs> | null
    where?: lessonWhereInput
  }

  /**
   * comment.exercise
   */
  export type comment$exerciseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise
     */
    select?: exerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise
     */
    omit?: exerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciseInclude<ExtArgs> | null
    where?: exerciseWhereInput
  }

  /**
   * comment.commentlike
   */
  export type comment$commentlikeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commentlike
     */
    select?: commentlikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the commentlike
     */
    omit?: commentlikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentlikeInclude<ExtArgs> | null
    where?: commentlikeWhereInput
    orderBy?: commentlikeOrderByWithRelationInput | commentlikeOrderByWithRelationInput[]
    cursor?: commentlikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentlikeScalarFieldEnum | CommentlikeScalarFieldEnum[]
  }

  /**
   * comment.notification
   */
  export type comment$notificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notification
     */
    omit?: notificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationInclude<ExtArgs> | null
    where?: notificationWhereInput
    orderBy?: notificationOrderByWithRelationInput | notificationOrderByWithRelationInput[]
    cursor?: notificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * comment without action
   */
  export type commentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the comment
     */
    omit?: commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentInclude<ExtArgs> | null
  }


  /**
   * Model commentlike
   */

  export type AggregateCommentlike = {
    _count: CommentlikeCountAggregateOutputType | null
    _avg: CommentlikeAvgAggregateOutputType | null
    _sum: CommentlikeSumAggregateOutputType | null
    _min: CommentlikeMinAggregateOutputType | null
    _max: CommentlikeMaxAggregateOutputType | null
  }

  export type CommentlikeAvgAggregateOutputType = {
    CLID: number | null
    CoID: number | null
  }

  export type CommentlikeSumAggregateOutputType = {
    CLID: number | null
    CoID: number | null
  }

  export type CommentlikeMinAggregateOutputType = {
    CLID: number | null
    UID: string | null
    CoID: number | null
    CreatedAt: Date | null
  }

  export type CommentlikeMaxAggregateOutputType = {
    CLID: number | null
    UID: string | null
    CoID: number | null
    CreatedAt: Date | null
  }

  export type CommentlikeCountAggregateOutputType = {
    CLID: number
    UID: number
    CoID: number
    CreatedAt: number
    _all: number
  }


  export type CommentlikeAvgAggregateInputType = {
    CLID?: true
    CoID?: true
  }

  export type CommentlikeSumAggregateInputType = {
    CLID?: true
    CoID?: true
  }

  export type CommentlikeMinAggregateInputType = {
    CLID?: true
    UID?: true
    CoID?: true
    CreatedAt?: true
  }

  export type CommentlikeMaxAggregateInputType = {
    CLID?: true
    UID?: true
    CoID?: true
    CreatedAt?: true
  }

  export type CommentlikeCountAggregateInputType = {
    CLID?: true
    UID?: true
    CoID?: true
    CreatedAt?: true
    _all?: true
  }

  export type CommentlikeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which commentlike to aggregate.
     */
    where?: commentlikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of commentlikes to fetch.
     */
    orderBy?: commentlikeOrderByWithRelationInput | commentlikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: commentlikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` commentlikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` commentlikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned commentlikes
    **/
    _count?: true | CommentlikeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentlikeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentlikeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentlikeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentlikeMaxAggregateInputType
  }

  export type GetCommentlikeAggregateType<T extends CommentlikeAggregateArgs> = {
        [P in keyof T & keyof AggregateCommentlike]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommentlike[P]>
      : GetScalarType<T[P], AggregateCommentlike[P]>
  }




  export type commentlikeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: commentlikeWhereInput
    orderBy?: commentlikeOrderByWithAggregationInput | commentlikeOrderByWithAggregationInput[]
    by: CommentlikeScalarFieldEnum[] | CommentlikeScalarFieldEnum
    having?: commentlikeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentlikeCountAggregateInputType | true
    _avg?: CommentlikeAvgAggregateInputType
    _sum?: CommentlikeSumAggregateInputType
    _min?: CommentlikeMinAggregateInputType
    _max?: CommentlikeMaxAggregateInputType
  }

  export type CommentlikeGroupByOutputType = {
    CLID: number
    UID: string
    CoID: number
    CreatedAt: Date | null
    _count: CommentlikeCountAggregateOutputType | null
    _avg: CommentlikeAvgAggregateOutputType | null
    _sum: CommentlikeSumAggregateOutputType | null
    _min: CommentlikeMinAggregateOutputType | null
    _max: CommentlikeMaxAggregateOutputType | null
  }

  type GetCommentlikeGroupByPayload<T extends commentlikeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentlikeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentlikeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentlikeGroupByOutputType[P]>
            : GetScalarType<T[P], CommentlikeGroupByOutputType[P]>
        }
      >
    >


  export type commentlikeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    CLID?: boolean
    UID?: boolean
    CoID?: boolean
    CreatedAt?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
    comment?: boolean | commentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["commentlike"]>



  export type commentlikeSelectScalar = {
    CLID?: boolean
    UID?: boolean
    CoID?: boolean
    CreatedAt?: boolean
  }

  export type commentlikeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"CLID" | "UID" | "CoID" | "CreatedAt", ExtArgs["result"]["commentlike"]>
  export type commentlikeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
    comment?: boolean | commentDefaultArgs<ExtArgs>
  }

  export type $commentlikePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "commentlike"
    objects: {
      user: Prisma.$userPayload<ExtArgs>
      comment: Prisma.$commentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      CLID: number
      UID: string
      CoID: number
      CreatedAt: Date | null
    }, ExtArgs["result"]["commentlike"]>
    composites: {}
  }

  type commentlikeGetPayload<S extends boolean | null | undefined | commentlikeDefaultArgs> = $Result.GetResult<Prisma.$commentlikePayload, S>

  type commentlikeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<commentlikeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CommentlikeCountAggregateInputType | true
    }

  export interface commentlikeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['commentlike'], meta: { name: 'commentlike' } }
    /**
     * Find zero or one Commentlike that matches the filter.
     * @param {commentlikeFindUniqueArgs} args - Arguments to find a Commentlike
     * @example
     * // Get one Commentlike
     * const commentlike = await prisma.commentlike.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends commentlikeFindUniqueArgs>(args: SelectSubset<T, commentlikeFindUniqueArgs<ExtArgs>>): Prisma__commentlikeClient<$Result.GetResult<Prisma.$commentlikePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Commentlike that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {commentlikeFindUniqueOrThrowArgs} args - Arguments to find a Commentlike
     * @example
     * // Get one Commentlike
     * const commentlike = await prisma.commentlike.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends commentlikeFindUniqueOrThrowArgs>(args: SelectSubset<T, commentlikeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__commentlikeClient<$Result.GetResult<Prisma.$commentlikePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Commentlike that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentlikeFindFirstArgs} args - Arguments to find a Commentlike
     * @example
     * // Get one Commentlike
     * const commentlike = await prisma.commentlike.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends commentlikeFindFirstArgs>(args?: SelectSubset<T, commentlikeFindFirstArgs<ExtArgs>>): Prisma__commentlikeClient<$Result.GetResult<Prisma.$commentlikePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Commentlike that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentlikeFindFirstOrThrowArgs} args - Arguments to find a Commentlike
     * @example
     * // Get one Commentlike
     * const commentlike = await prisma.commentlike.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends commentlikeFindFirstOrThrowArgs>(args?: SelectSubset<T, commentlikeFindFirstOrThrowArgs<ExtArgs>>): Prisma__commentlikeClient<$Result.GetResult<Prisma.$commentlikePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Commentlikes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentlikeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Commentlikes
     * const commentlikes = await prisma.commentlike.findMany()
     * 
     * // Get first 10 Commentlikes
     * const commentlikes = await prisma.commentlike.findMany({ take: 10 })
     * 
     * // Only select the `CLID`
     * const commentlikeWithCLIDOnly = await prisma.commentlike.findMany({ select: { CLID: true } })
     * 
     */
    findMany<T extends commentlikeFindManyArgs>(args?: SelectSubset<T, commentlikeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$commentlikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Commentlike.
     * @param {commentlikeCreateArgs} args - Arguments to create a Commentlike.
     * @example
     * // Create one Commentlike
     * const Commentlike = await prisma.commentlike.create({
     *   data: {
     *     // ... data to create a Commentlike
     *   }
     * })
     * 
     */
    create<T extends commentlikeCreateArgs>(args: SelectSubset<T, commentlikeCreateArgs<ExtArgs>>): Prisma__commentlikeClient<$Result.GetResult<Prisma.$commentlikePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Commentlikes.
     * @param {commentlikeCreateManyArgs} args - Arguments to create many Commentlikes.
     * @example
     * // Create many Commentlikes
     * const commentlike = await prisma.commentlike.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends commentlikeCreateManyArgs>(args?: SelectSubset<T, commentlikeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Commentlike.
     * @param {commentlikeDeleteArgs} args - Arguments to delete one Commentlike.
     * @example
     * // Delete one Commentlike
     * const Commentlike = await prisma.commentlike.delete({
     *   where: {
     *     // ... filter to delete one Commentlike
     *   }
     * })
     * 
     */
    delete<T extends commentlikeDeleteArgs>(args: SelectSubset<T, commentlikeDeleteArgs<ExtArgs>>): Prisma__commentlikeClient<$Result.GetResult<Prisma.$commentlikePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Commentlike.
     * @param {commentlikeUpdateArgs} args - Arguments to update one Commentlike.
     * @example
     * // Update one Commentlike
     * const commentlike = await prisma.commentlike.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends commentlikeUpdateArgs>(args: SelectSubset<T, commentlikeUpdateArgs<ExtArgs>>): Prisma__commentlikeClient<$Result.GetResult<Prisma.$commentlikePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Commentlikes.
     * @param {commentlikeDeleteManyArgs} args - Arguments to filter Commentlikes to delete.
     * @example
     * // Delete a few Commentlikes
     * const { count } = await prisma.commentlike.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends commentlikeDeleteManyArgs>(args?: SelectSubset<T, commentlikeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Commentlikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentlikeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Commentlikes
     * const commentlike = await prisma.commentlike.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends commentlikeUpdateManyArgs>(args: SelectSubset<T, commentlikeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Commentlike.
     * @param {commentlikeUpsertArgs} args - Arguments to update or create a Commentlike.
     * @example
     * // Update or create a Commentlike
     * const commentlike = await prisma.commentlike.upsert({
     *   create: {
     *     // ... data to create a Commentlike
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Commentlike we want to update
     *   }
     * })
     */
    upsert<T extends commentlikeUpsertArgs>(args: SelectSubset<T, commentlikeUpsertArgs<ExtArgs>>): Prisma__commentlikeClient<$Result.GetResult<Prisma.$commentlikePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Commentlikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentlikeCountArgs} args - Arguments to filter Commentlikes to count.
     * @example
     * // Count the number of Commentlikes
     * const count = await prisma.commentlike.count({
     *   where: {
     *     // ... the filter for the Commentlikes we want to count
     *   }
     * })
    **/
    count<T extends commentlikeCountArgs>(
      args?: Subset<T, commentlikeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentlikeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Commentlike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentlikeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentlikeAggregateArgs>(args: Subset<T, CommentlikeAggregateArgs>): Prisma.PrismaPromise<GetCommentlikeAggregateType<T>>

    /**
     * Group by Commentlike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentlikeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends commentlikeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: commentlikeGroupByArgs['orderBy'] }
        : { orderBy?: commentlikeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, commentlikeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentlikeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the commentlike model
   */
  readonly fields: commentlikeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for commentlike.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__commentlikeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    comment<T extends commentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, commentDefaultArgs<ExtArgs>>): Prisma__commentClient<$Result.GetResult<Prisma.$commentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the commentlike model
   */
  interface commentlikeFieldRefs {
    readonly CLID: FieldRef<"commentlike", 'Int'>
    readonly UID: FieldRef<"commentlike", 'String'>
    readonly CoID: FieldRef<"commentlike", 'Int'>
    readonly CreatedAt: FieldRef<"commentlike", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * commentlike findUnique
   */
  export type commentlikeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commentlike
     */
    select?: commentlikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the commentlike
     */
    omit?: commentlikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentlikeInclude<ExtArgs> | null
    /**
     * Filter, which commentlike to fetch.
     */
    where: commentlikeWhereUniqueInput
  }

  /**
   * commentlike findUniqueOrThrow
   */
  export type commentlikeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commentlike
     */
    select?: commentlikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the commentlike
     */
    omit?: commentlikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentlikeInclude<ExtArgs> | null
    /**
     * Filter, which commentlike to fetch.
     */
    where: commentlikeWhereUniqueInput
  }

  /**
   * commentlike findFirst
   */
  export type commentlikeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commentlike
     */
    select?: commentlikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the commentlike
     */
    omit?: commentlikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentlikeInclude<ExtArgs> | null
    /**
     * Filter, which commentlike to fetch.
     */
    where?: commentlikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of commentlikes to fetch.
     */
    orderBy?: commentlikeOrderByWithRelationInput | commentlikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for commentlikes.
     */
    cursor?: commentlikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` commentlikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` commentlikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of commentlikes.
     */
    distinct?: CommentlikeScalarFieldEnum | CommentlikeScalarFieldEnum[]
  }

  /**
   * commentlike findFirstOrThrow
   */
  export type commentlikeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commentlike
     */
    select?: commentlikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the commentlike
     */
    omit?: commentlikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentlikeInclude<ExtArgs> | null
    /**
     * Filter, which commentlike to fetch.
     */
    where?: commentlikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of commentlikes to fetch.
     */
    orderBy?: commentlikeOrderByWithRelationInput | commentlikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for commentlikes.
     */
    cursor?: commentlikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` commentlikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` commentlikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of commentlikes.
     */
    distinct?: CommentlikeScalarFieldEnum | CommentlikeScalarFieldEnum[]
  }

  /**
   * commentlike findMany
   */
  export type commentlikeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commentlike
     */
    select?: commentlikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the commentlike
     */
    omit?: commentlikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentlikeInclude<ExtArgs> | null
    /**
     * Filter, which commentlikes to fetch.
     */
    where?: commentlikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of commentlikes to fetch.
     */
    orderBy?: commentlikeOrderByWithRelationInput | commentlikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing commentlikes.
     */
    cursor?: commentlikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` commentlikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` commentlikes.
     */
    skip?: number
    distinct?: CommentlikeScalarFieldEnum | CommentlikeScalarFieldEnum[]
  }

  /**
   * commentlike create
   */
  export type commentlikeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commentlike
     */
    select?: commentlikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the commentlike
     */
    omit?: commentlikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentlikeInclude<ExtArgs> | null
    /**
     * The data needed to create a commentlike.
     */
    data: XOR<commentlikeCreateInput, commentlikeUncheckedCreateInput>
  }

  /**
   * commentlike createMany
   */
  export type commentlikeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many commentlikes.
     */
    data: commentlikeCreateManyInput | commentlikeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * commentlike update
   */
  export type commentlikeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commentlike
     */
    select?: commentlikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the commentlike
     */
    omit?: commentlikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentlikeInclude<ExtArgs> | null
    /**
     * The data needed to update a commentlike.
     */
    data: XOR<commentlikeUpdateInput, commentlikeUncheckedUpdateInput>
    /**
     * Choose, which commentlike to update.
     */
    where: commentlikeWhereUniqueInput
  }

  /**
   * commentlike updateMany
   */
  export type commentlikeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update commentlikes.
     */
    data: XOR<commentlikeUpdateManyMutationInput, commentlikeUncheckedUpdateManyInput>
    /**
     * Filter which commentlikes to update
     */
    where?: commentlikeWhereInput
    /**
     * Limit how many commentlikes to update.
     */
    limit?: number
  }

  /**
   * commentlike upsert
   */
  export type commentlikeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commentlike
     */
    select?: commentlikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the commentlike
     */
    omit?: commentlikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentlikeInclude<ExtArgs> | null
    /**
     * The filter to search for the commentlike to update in case it exists.
     */
    where: commentlikeWhereUniqueInput
    /**
     * In case the commentlike found by the `where` argument doesn't exist, create a new commentlike with this data.
     */
    create: XOR<commentlikeCreateInput, commentlikeUncheckedCreateInput>
    /**
     * In case the commentlike was found with the provided `where` argument, update it with this data.
     */
    update: XOR<commentlikeUpdateInput, commentlikeUncheckedUpdateInput>
  }

  /**
   * commentlike delete
   */
  export type commentlikeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commentlike
     */
    select?: commentlikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the commentlike
     */
    omit?: commentlikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentlikeInclude<ExtArgs> | null
    /**
     * Filter which commentlike to delete.
     */
    where: commentlikeWhereUniqueInput
  }

  /**
   * commentlike deleteMany
   */
  export type commentlikeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which commentlikes to delete
     */
    where?: commentlikeWhereInput
    /**
     * Limit how many commentlikes to delete.
     */
    limit?: number
  }

  /**
   * commentlike without action
   */
  export type commentlikeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commentlike
     */
    select?: commentlikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the commentlike
     */
    omit?: commentlikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentlikeInclude<ExtArgs> | null
  }


  /**
   * Model exerciselike
   */

  export type AggregateExerciselike = {
    _count: ExerciselikeCountAggregateOutputType | null
    _avg: ExerciselikeAvgAggregateOutputType | null
    _sum: ExerciselikeSumAggregateOutputType | null
    _min: ExerciselikeMinAggregateOutputType | null
    _max: ExerciselikeMaxAggregateOutputType | null
  }

  export type ExerciselikeAvgAggregateOutputType = {
    ELID: number | null
    EID: number | null
  }

  export type ExerciselikeSumAggregateOutputType = {
    ELID: number | null
    EID: number | null
  }

  export type ExerciselikeMinAggregateOutputType = {
    ELID: number | null
    UID: string | null
    EID: number | null
    CreatedAt: Date | null
  }

  export type ExerciselikeMaxAggregateOutputType = {
    ELID: number | null
    UID: string | null
    EID: number | null
    CreatedAt: Date | null
  }

  export type ExerciselikeCountAggregateOutputType = {
    ELID: number
    UID: number
    EID: number
    CreatedAt: number
    _all: number
  }


  export type ExerciselikeAvgAggregateInputType = {
    ELID?: true
    EID?: true
  }

  export type ExerciselikeSumAggregateInputType = {
    ELID?: true
    EID?: true
  }

  export type ExerciselikeMinAggregateInputType = {
    ELID?: true
    UID?: true
    EID?: true
    CreatedAt?: true
  }

  export type ExerciselikeMaxAggregateInputType = {
    ELID?: true
    UID?: true
    EID?: true
    CreatedAt?: true
  }

  export type ExerciselikeCountAggregateInputType = {
    ELID?: true
    UID?: true
    EID?: true
    CreatedAt?: true
    _all?: true
  }

  export type ExerciselikeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which exerciselike to aggregate.
     */
    where?: exerciselikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of exerciselikes to fetch.
     */
    orderBy?: exerciselikeOrderByWithRelationInput | exerciselikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: exerciselikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` exerciselikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` exerciselikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned exerciselikes
    **/
    _count?: true | ExerciselikeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExerciselikeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExerciselikeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExerciselikeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExerciselikeMaxAggregateInputType
  }

  export type GetExerciselikeAggregateType<T extends ExerciselikeAggregateArgs> = {
        [P in keyof T & keyof AggregateExerciselike]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExerciselike[P]>
      : GetScalarType<T[P], AggregateExerciselike[P]>
  }




  export type exerciselikeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: exerciselikeWhereInput
    orderBy?: exerciselikeOrderByWithAggregationInput | exerciselikeOrderByWithAggregationInput[]
    by: ExerciselikeScalarFieldEnum[] | ExerciselikeScalarFieldEnum
    having?: exerciselikeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExerciselikeCountAggregateInputType | true
    _avg?: ExerciselikeAvgAggregateInputType
    _sum?: ExerciselikeSumAggregateInputType
    _min?: ExerciselikeMinAggregateInputType
    _max?: ExerciselikeMaxAggregateInputType
  }

  export type ExerciselikeGroupByOutputType = {
    ELID: number
    UID: string
    EID: number
    CreatedAt: Date | null
    _count: ExerciselikeCountAggregateOutputType | null
    _avg: ExerciselikeAvgAggregateOutputType | null
    _sum: ExerciselikeSumAggregateOutputType | null
    _min: ExerciselikeMinAggregateOutputType | null
    _max: ExerciselikeMaxAggregateOutputType | null
  }

  type GetExerciselikeGroupByPayload<T extends exerciselikeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExerciselikeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExerciselikeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExerciselikeGroupByOutputType[P]>
            : GetScalarType<T[P], ExerciselikeGroupByOutputType[P]>
        }
      >
    >


  export type exerciselikeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ELID?: boolean
    UID?: boolean
    EID?: boolean
    CreatedAt?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
    exercise?: boolean | exerciseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exerciselike"]>



  export type exerciselikeSelectScalar = {
    ELID?: boolean
    UID?: boolean
    EID?: boolean
    CreatedAt?: boolean
  }

  export type exerciselikeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"ELID" | "UID" | "EID" | "CreatedAt", ExtArgs["result"]["exerciselike"]>
  export type exerciselikeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
    exercise?: boolean | exerciseDefaultArgs<ExtArgs>
  }

  export type $exerciselikePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "exerciselike"
    objects: {
      user: Prisma.$userPayload<ExtArgs>
      exercise: Prisma.$exercisePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      ELID: number
      UID: string
      EID: number
      CreatedAt: Date | null
    }, ExtArgs["result"]["exerciselike"]>
    composites: {}
  }

  type exerciselikeGetPayload<S extends boolean | null | undefined | exerciselikeDefaultArgs> = $Result.GetResult<Prisma.$exerciselikePayload, S>

  type exerciselikeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<exerciselikeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ExerciselikeCountAggregateInputType | true
    }

  export interface exerciselikeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['exerciselike'], meta: { name: 'exerciselike' } }
    /**
     * Find zero or one Exerciselike that matches the filter.
     * @param {exerciselikeFindUniqueArgs} args - Arguments to find a Exerciselike
     * @example
     * // Get one Exerciselike
     * const exerciselike = await prisma.exerciselike.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends exerciselikeFindUniqueArgs>(args: SelectSubset<T, exerciselikeFindUniqueArgs<ExtArgs>>): Prisma__exerciselikeClient<$Result.GetResult<Prisma.$exerciselikePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Exerciselike that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {exerciselikeFindUniqueOrThrowArgs} args - Arguments to find a Exerciselike
     * @example
     * // Get one Exerciselike
     * const exerciselike = await prisma.exerciselike.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends exerciselikeFindUniqueOrThrowArgs>(args: SelectSubset<T, exerciselikeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__exerciselikeClient<$Result.GetResult<Prisma.$exerciselikePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Exerciselike that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exerciselikeFindFirstArgs} args - Arguments to find a Exerciselike
     * @example
     * // Get one Exerciselike
     * const exerciselike = await prisma.exerciselike.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends exerciselikeFindFirstArgs>(args?: SelectSubset<T, exerciselikeFindFirstArgs<ExtArgs>>): Prisma__exerciselikeClient<$Result.GetResult<Prisma.$exerciselikePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Exerciselike that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exerciselikeFindFirstOrThrowArgs} args - Arguments to find a Exerciselike
     * @example
     * // Get one Exerciselike
     * const exerciselike = await prisma.exerciselike.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends exerciselikeFindFirstOrThrowArgs>(args?: SelectSubset<T, exerciselikeFindFirstOrThrowArgs<ExtArgs>>): Prisma__exerciselikeClient<$Result.GetResult<Prisma.$exerciselikePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Exerciselikes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exerciselikeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Exerciselikes
     * const exerciselikes = await prisma.exerciselike.findMany()
     * 
     * // Get first 10 Exerciselikes
     * const exerciselikes = await prisma.exerciselike.findMany({ take: 10 })
     * 
     * // Only select the `ELID`
     * const exerciselikeWithELIDOnly = await prisma.exerciselike.findMany({ select: { ELID: true } })
     * 
     */
    findMany<T extends exerciselikeFindManyArgs>(args?: SelectSubset<T, exerciselikeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$exerciselikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Exerciselike.
     * @param {exerciselikeCreateArgs} args - Arguments to create a Exerciselike.
     * @example
     * // Create one Exerciselike
     * const Exerciselike = await prisma.exerciselike.create({
     *   data: {
     *     // ... data to create a Exerciselike
     *   }
     * })
     * 
     */
    create<T extends exerciselikeCreateArgs>(args: SelectSubset<T, exerciselikeCreateArgs<ExtArgs>>): Prisma__exerciselikeClient<$Result.GetResult<Prisma.$exerciselikePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Exerciselikes.
     * @param {exerciselikeCreateManyArgs} args - Arguments to create many Exerciselikes.
     * @example
     * // Create many Exerciselikes
     * const exerciselike = await prisma.exerciselike.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends exerciselikeCreateManyArgs>(args?: SelectSubset<T, exerciselikeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Exerciselike.
     * @param {exerciselikeDeleteArgs} args - Arguments to delete one Exerciselike.
     * @example
     * // Delete one Exerciselike
     * const Exerciselike = await prisma.exerciselike.delete({
     *   where: {
     *     // ... filter to delete one Exerciselike
     *   }
     * })
     * 
     */
    delete<T extends exerciselikeDeleteArgs>(args: SelectSubset<T, exerciselikeDeleteArgs<ExtArgs>>): Prisma__exerciselikeClient<$Result.GetResult<Prisma.$exerciselikePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Exerciselike.
     * @param {exerciselikeUpdateArgs} args - Arguments to update one Exerciselike.
     * @example
     * // Update one Exerciselike
     * const exerciselike = await prisma.exerciselike.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends exerciselikeUpdateArgs>(args: SelectSubset<T, exerciselikeUpdateArgs<ExtArgs>>): Prisma__exerciselikeClient<$Result.GetResult<Prisma.$exerciselikePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Exerciselikes.
     * @param {exerciselikeDeleteManyArgs} args - Arguments to filter Exerciselikes to delete.
     * @example
     * // Delete a few Exerciselikes
     * const { count } = await prisma.exerciselike.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends exerciselikeDeleteManyArgs>(args?: SelectSubset<T, exerciselikeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exerciselikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exerciselikeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Exerciselikes
     * const exerciselike = await prisma.exerciselike.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends exerciselikeUpdateManyArgs>(args: SelectSubset<T, exerciselikeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Exerciselike.
     * @param {exerciselikeUpsertArgs} args - Arguments to update or create a Exerciselike.
     * @example
     * // Update or create a Exerciselike
     * const exerciselike = await prisma.exerciselike.upsert({
     *   create: {
     *     // ... data to create a Exerciselike
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Exerciselike we want to update
     *   }
     * })
     */
    upsert<T extends exerciselikeUpsertArgs>(args: SelectSubset<T, exerciselikeUpsertArgs<ExtArgs>>): Prisma__exerciselikeClient<$Result.GetResult<Prisma.$exerciselikePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Exerciselikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exerciselikeCountArgs} args - Arguments to filter Exerciselikes to count.
     * @example
     * // Count the number of Exerciselikes
     * const count = await prisma.exerciselike.count({
     *   where: {
     *     // ... the filter for the Exerciselikes we want to count
     *   }
     * })
    **/
    count<T extends exerciselikeCountArgs>(
      args?: Subset<T, exerciselikeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExerciselikeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Exerciselike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciselikeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExerciselikeAggregateArgs>(args: Subset<T, ExerciselikeAggregateArgs>): Prisma.PrismaPromise<GetExerciselikeAggregateType<T>>

    /**
     * Group by Exerciselike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exerciselikeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends exerciselikeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: exerciselikeGroupByArgs['orderBy'] }
        : { orderBy?: exerciselikeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, exerciselikeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExerciselikeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the exerciselike model
   */
  readonly fields: exerciselikeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for exerciselike.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__exerciselikeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    exercise<T extends exerciseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, exerciseDefaultArgs<ExtArgs>>): Prisma__exerciseClient<$Result.GetResult<Prisma.$exercisePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the exerciselike model
   */
  interface exerciselikeFieldRefs {
    readonly ELID: FieldRef<"exerciselike", 'Int'>
    readonly UID: FieldRef<"exerciselike", 'String'>
    readonly EID: FieldRef<"exerciselike", 'Int'>
    readonly CreatedAt: FieldRef<"exerciselike", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * exerciselike findUnique
   */
  export type exerciselikeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exerciselike
     */
    select?: exerciselikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exerciselike
     */
    omit?: exerciselikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciselikeInclude<ExtArgs> | null
    /**
     * Filter, which exerciselike to fetch.
     */
    where: exerciselikeWhereUniqueInput
  }

  /**
   * exerciselike findUniqueOrThrow
   */
  export type exerciselikeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exerciselike
     */
    select?: exerciselikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exerciselike
     */
    omit?: exerciselikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciselikeInclude<ExtArgs> | null
    /**
     * Filter, which exerciselike to fetch.
     */
    where: exerciselikeWhereUniqueInput
  }

  /**
   * exerciselike findFirst
   */
  export type exerciselikeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exerciselike
     */
    select?: exerciselikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exerciselike
     */
    omit?: exerciselikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciselikeInclude<ExtArgs> | null
    /**
     * Filter, which exerciselike to fetch.
     */
    where?: exerciselikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of exerciselikes to fetch.
     */
    orderBy?: exerciselikeOrderByWithRelationInput | exerciselikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for exerciselikes.
     */
    cursor?: exerciselikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` exerciselikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` exerciselikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of exerciselikes.
     */
    distinct?: ExerciselikeScalarFieldEnum | ExerciselikeScalarFieldEnum[]
  }

  /**
   * exerciselike findFirstOrThrow
   */
  export type exerciselikeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exerciselike
     */
    select?: exerciselikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exerciselike
     */
    omit?: exerciselikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciselikeInclude<ExtArgs> | null
    /**
     * Filter, which exerciselike to fetch.
     */
    where?: exerciselikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of exerciselikes to fetch.
     */
    orderBy?: exerciselikeOrderByWithRelationInput | exerciselikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for exerciselikes.
     */
    cursor?: exerciselikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` exerciselikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` exerciselikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of exerciselikes.
     */
    distinct?: ExerciselikeScalarFieldEnum | ExerciselikeScalarFieldEnum[]
  }

  /**
   * exerciselike findMany
   */
  export type exerciselikeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exerciselike
     */
    select?: exerciselikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exerciselike
     */
    omit?: exerciselikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciselikeInclude<ExtArgs> | null
    /**
     * Filter, which exerciselikes to fetch.
     */
    where?: exerciselikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of exerciselikes to fetch.
     */
    orderBy?: exerciselikeOrderByWithRelationInput | exerciselikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing exerciselikes.
     */
    cursor?: exerciselikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` exerciselikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` exerciselikes.
     */
    skip?: number
    distinct?: ExerciselikeScalarFieldEnum | ExerciselikeScalarFieldEnum[]
  }

  /**
   * exerciselike create
   */
  export type exerciselikeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exerciselike
     */
    select?: exerciselikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exerciselike
     */
    omit?: exerciselikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciselikeInclude<ExtArgs> | null
    /**
     * The data needed to create a exerciselike.
     */
    data: XOR<exerciselikeCreateInput, exerciselikeUncheckedCreateInput>
  }

  /**
   * exerciselike createMany
   */
  export type exerciselikeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many exerciselikes.
     */
    data: exerciselikeCreateManyInput | exerciselikeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * exerciselike update
   */
  export type exerciselikeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exerciselike
     */
    select?: exerciselikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exerciselike
     */
    omit?: exerciselikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciselikeInclude<ExtArgs> | null
    /**
     * The data needed to update a exerciselike.
     */
    data: XOR<exerciselikeUpdateInput, exerciselikeUncheckedUpdateInput>
    /**
     * Choose, which exerciselike to update.
     */
    where: exerciselikeWhereUniqueInput
  }

  /**
   * exerciselike updateMany
   */
  export type exerciselikeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update exerciselikes.
     */
    data: XOR<exerciselikeUpdateManyMutationInput, exerciselikeUncheckedUpdateManyInput>
    /**
     * Filter which exerciselikes to update
     */
    where?: exerciselikeWhereInput
    /**
     * Limit how many exerciselikes to update.
     */
    limit?: number
  }

  /**
   * exerciselike upsert
   */
  export type exerciselikeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exerciselike
     */
    select?: exerciselikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exerciselike
     */
    omit?: exerciselikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciselikeInclude<ExtArgs> | null
    /**
     * The filter to search for the exerciselike to update in case it exists.
     */
    where: exerciselikeWhereUniqueInput
    /**
     * In case the exerciselike found by the `where` argument doesn't exist, create a new exerciselike with this data.
     */
    create: XOR<exerciselikeCreateInput, exerciselikeUncheckedCreateInput>
    /**
     * In case the exerciselike was found with the provided `where` argument, update it with this data.
     */
    update: XOR<exerciselikeUpdateInput, exerciselikeUncheckedUpdateInput>
  }

  /**
   * exerciselike delete
   */
  export type exerciselikeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exerciselike
     */
    select?: exerciselikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exerciselike
     */
    omit?: exerciselikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciselikeInclude<ExtArgs> | null
    /**
     * Filter which exerciselike to delete.
     */
    where: exerciselikeWhereUniqueInput
  }

  /**
   * exerciselike deleteMany
   */
  export type exerciselikeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which exerciselikes to delete
     */
    where?: exerciselikeWhereInput
    /**
     * Limit how many exerciselikes to delete.
     */
    limit?: number
  }

  /**
   * exerciselike without action
   */
  export type exerciselikeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exerciselike
     */
    select?: exerciselikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exerciselike
     */
    omit?: exerciselikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciselikeInclude<ExtArgs> | null
  }


  /**
   * Model lesson
   */

  export type AggregateLesson = {
    _count: LessonCountAggregateOutputType | null
    _avg: LessonAvgAggregateOutputType | null
    _sum: LessonSumAggregateOutputType | null
    _min: LessonMinAggregateOutputType | null
    _max: LessonMaxAggregateOutputType | null
  }

  export type LessonAvgAggregateOutputType = {
    LID: number | null
    CID: number | null
    LessonIndex: number | null
  }

  export type LessonSumAggregateOutputType = {
    LID: number | null
    CID: number | null
    LessonIndex: number | null
  }

  export type LessonMinAggregateOutputType = {
    LID: number | null
    CID: number | null
    LessonIndex: number | null
    Title: string | null
    Slug: string | null
  }

  export type LessonMaxAggregateOutputType = {
    LID: number | null
    CID: number | null
    LessonIndex: number | null
    Title: string | null
    Slug: string | null
  }

  export type LessonCountAggregateOutputType = {
    LID: number
    CID: number
    LessonIndex: number
    Title: number
    Slug: number
    _all: number
  }


  export type LessonAvgAggregateInputType = {
    LID?: true
    CID?: true
    LessonIndex?: true
  }

  export type LessonSumAggregateInputType = {
    LID?: true
    CID?: true
    LessonIndex?: true
  }

  export type LessonMinAggregateInputType = {
    LID?: true
    CID?: true
    LessonIndex?: true
    Title?: true
    Slug?: true
  }

  export type LessonMaxAggregateInputType = {
    LID?: true
    CID?: true
    LessonIndex?: true
    Title?: true
    Slug?: true
  }

  export type LessonCountAggregateInputType = {
    LID?: true
    CID?: true
    LessonIndex?: true
    Title?: true
    Slug?: true
    _all?: true
  }

  export type LessonAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which lesson to aggregate.
     */
    where?: lessonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lessons to fetch.
     */
    orderBy?: lessonOrderByWithRelationInput | lessonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: lessonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lessons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lessons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned lessons
    **/
    _count?: true | LessonCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LessonAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LessonSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LessonMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LessonMaxAggregateInputType
  }

  export type GetLessonAggregateType<T extends LessonAggregateArgs> = {
        [P in keyof T & keyof AggregateLesson]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLesson[P]>
      : GetScalarType<T[P], AggregateLesson[P]>
  }




  export type lessonGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: lessonWhereInput
    orderBy?: lessonOrderByWithAggregationInput | lessonOrderByWithAggregationInput[]
    by: LessonScalarFieldEnum[] | LessonScalarFieldEnum
    having?: lessonScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LessonCountAggregateInputType | true
    _avg?: LessonAvgAggregateInputType
    _sum?: LessonSumAggregateInputType
    _min?: LessonMinAggregateInputType
    _max?: LessonMaxAggregateInputType
  }

  export type LessonGroupByOutputType = {
    LID: number
    CID: number
    LessonIndex: number
    Title: string
    Slug: string
    _count: LessonCountAggregateOutputType | null
    _avg: LessonAvgAggregateOutputType | null
    _sum: LessonSumAggregateOutputType | null
    _min: LessonMinAggregateOutputType | null
    _max: LessonMaxAggregateOutputType | null
  }

  type GetLessonGroupByPayload<T extends lessonGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LessonGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LessonGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LessonGroupByOutputType[P]>
            : GetScalarType<T[P], LessonGroupByOutputType[P]>
        }
      >
    >


  export type lessonSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    LID?: boolean
    CID?: boolean
    LessonIndex?: boolean
    Title?: boolean
    Slug?: boolean
    comment?: boolean | lesson$commentArgs<ExtArgs>
    chapter?: boolean | chapterDefaultArgs<ExtArgs>
    _count?: boolean | LessonCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lesson"]>



  export type lessonSelectScalar = {
    LID?: boolean
    CID?: boolean
    LessonIndex?: boolean
    Title?: boolean
    Slug?: boolean
  }

  export type lessonOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"LID" | "CID" | "LessonIndex" | "Title" | "Slug", ExtArgs["result"]["lesson"]>
  export type lessonInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comment?: boolean | lesson$commentArgs<ExtArgs>
    chapter?: boolean | chapterDefaultArgs<ExtArgs>
    _count?: boolean | LessonCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $lessonPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "lesson"
    objects: {
      comment: Prisma.$commentPayload<ExtArgs>[]
      chapter: Prisma.$chapterPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      LID: number
      CID: number
      LessonIndex: number
      Title: string
      Slug: string
    }, ExtArgs["result"]["lesson"]>
    composites: {}
  }

  type lessonGetPayload<S extends boolean | null | undefined | lessonDefaultArgs> = $Result.GetResult<Prisma.$lessonPayload, S>

  type lessonCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<lessonFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LessonCountAggregateInputType | true
    }

  export interface lessonDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['lesson'], meta: { name: 'lesson' } }
    /**
     * Find zero or one Lesson that matches the filter.
     * @param {lessonFindUniqueArgs} args - Arguments to find a Lesson
     * @example
     * // Get one Lesson
     * const lesson = await prisma.lesson.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends lessonFindUniqueArgs>(args: SelectSubset<T, lessonFindUniqueArgs<ExtArgs>>): Prisma__lessonClient<$Result.GetResult<Prisma.$lessonPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Lesson that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {lessonFindUniqueOrThrowArgs} args - Arguments to find a Lesson
     * @example
     * // Get one Lesson
     * const lesson = await prisma.lesson.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends lessonFindUniqueOrThrowArgs>(args: SelectSubset<T, lessonFindUniqueOrThrowArgs<ExtArgs>>): Prisma__lessonClient<$Result.GetResult<Prisma.$lessonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Lesson that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lessonFindFirstArgs} args - Arguments to find a Lesson
     * @example
     * // Get one Lesson
     * const lesson = await prisma.lesson.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends lessonFindFirstArgs>(args?: SelectSubset<T, lessonFindFirstArgs<ExtArgs>>): Prisma__lessonClient<$Result.GetResult<Prisma.$lessonPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Lesson that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lessonFindFirstOrThrowArgs} args - Arguments to find a Lesson
     * @example
     * // Get one Lesson
     * const lesson = await prisma.lesson.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends lessonFindFirstOrThrowArgs>(args?: SelectSubset<T, lessonFindFirstOrThrowArgs<ExtArgs>>): Prisma__lessonClient<$Result.GetResult<Prisma.$lessonPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Lessons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lessonFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lessons
     * const lessons = await prisma.lesson.findMany()
     * 
     * // Get first 10 Lessons
     * const lessons = await prisma.lesson.findMany({ take: 10 })
     * 
     * // Only select the `LID`
     * const lessonWithLIDOnly = await prisma.lesson.findMany({ select: { LID: true } })
     * 
     */
    findMany<T extends lessonFindManyArgs>(args?: SelectSubset<T, lessonFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$lessonPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Lesson.
     * @param {lessonCreateArgs} args - Arguments to create a Lesson.
     * @example
     * // Create one Lesson
     * const Lesson = await prisma.lesson.create({
     *   data: {
     *     // ... data to create a Lesson
     *   }
     * })
     * 
     */
    create<T extends lessonCreateArgs>(args: SelectSubset<T, lessonCreateArgs<ExtArgs>>): Prisma__lessonClient<$Result.GetResult<Prisma.$lessonPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Lessons.
     * @param {lessonCreateManyArgs} args - Arguments to create many Lessons.
     * @example
     * // Create many Lessons
     * const lesson = await prisma.lesson.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends lessonCreateManyArgs>(args?: SelectSubset<T, lessonCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Lesson.
     * @param {lessonDeleteArgs} args - Arguments to delete one Lesson.
     * @example
     * // Delete one Lesson
     * const Lesson = await prisma.lesson.delete({
     *   where: {
     *     // ... filter to delete one Lesson
     *   }
     * })
     * 
     */
    delete<T extends lessonDeleteArgs>(args: SelectSubset<T, lessonDeleteArgs<ExtArgs>>): Prisma__lessonClient<$Result.GetResult<Prisma.$lessonPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Lesson.
     * @param {lessonUpdateArgs} args - Arguments to update one Lesson.
     * @example
     * // Update one Lesson
     * const lesson = await prisma.lesson.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends lessonUpdateArgs>(args: SelectSubset<T, lessonUpdateArgs<ExtArgs>>): Prisma__lessonClient<$Result.GetResult<Prisma.$lessonPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Lessons.
     * @param {lessonDeleteManyArgs} args - Arguments to filter Lessons to delete.
     * @example
     * // Delete a few Lessons
     * const { count } = await prisma.lesson.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends lessonDeleteManyArgs>(args?: SelectSubset<T, lessonDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lessons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lessonUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lessons
     * const lesson = await prisma.lesson.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends lessonUpdateManyArgs>(args: SelectSubset<T, lessonUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Lesson.
     * @param {lessonUpsertArgs} args - Arguments to update or create a Lesson.
     * @example
     * // Update or create a Lesson
     * const lesson = await prisma.lesson.upsert({
     *   create: {
     *     // ... data to create a Lesson
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Lesson we want to update
     *   }
     * })
     */
    upsert<T extends lessonUpsertArgs>(args: SelectSubset<T, lessonUpsertArgs<ExtArgs>>): Prisma__lessonClient<$Result.GetResult<Prisma.$lessonPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Lessons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lessonCountArgs} args - Arguments to filter Lessons to count.
     * @example
     * // Count the number of Lessons
     * const count = await prisma.lesson.count({
     *   where: {
     *     // ... the filter for the Lessons we want to count
     *   }
     * })
    **/
    count<T extends lessonCountArgs>(
      args?: Subset<T, lessonCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LessonCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Lesson.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LessonAggregateArgs>(args: Subset<T, LessonAggregateArgs>): Prisma.PrismaPromise<GetLessonAggregateType<T>>

    /**
     * Group by Lesson.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lessonGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends lessonGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: lessonGroupByArgs['orderBy'] }
        : { orderBy?: lessonGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, lessonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLessonGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the lesson model
   */
  readonly fields: lessonFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for lesson.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__lessonClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    comment<T extends lesson$commentArgs<ExtArgs> = {}>(args?: Subset<T, lesson$commentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$commentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    chapter<T extends chapterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, chapterDefaultArgs<ExtArgs>>): Prisma__chapterClient<$Result.GetResult<Prisma.$chapterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the lesson model
   */
  interface lessonFieldRefs {
    readonly LID: FieldRef<"lesson", 'Int'>
    readonly CID: FieldRef<"lesson", 'Int'>
    readonly LessonIndex: FieldRef<"lesson", 'Int'>
    readonly Title: FieldRef<"lesson", 'String'>
    readonly Slug: FieldRef<"lesson", 'String'>
  }
    

  // Custom InputTypes
  /**
   * lesson findUnique
   */
  export type lessonFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lesson
     */
    select?: lessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lesson
     */
    omit?: lessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lessonInclude<ExtArgs> | null
    /**
     * Filter, which lesson to fetch.
     */
    where: lessonWhereUniqueInput
  }

  /**
   * lesson findUniqueOrThrow
   */
  export type lessonFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lesson
     */
    select?: lessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lesson
     */
    omit?: lessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lessonInclude<ExtArgs> | null
    /**
     * Filter, which lesson to fetch.
     */
    where: lessonWhereUniqueInput
  }

  /**
   * lesson findFirst
   */
  export type lessonFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lesson
     */
    select?: lessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lesson
     */
    omit?: lessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lessonInclude<ExtArgs> | null
    /**
     * Filter, which lesson to fetch.
     */
    where?: lessonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lessons to fetch.
     */
    orderBy?: lessonOrderByWithRelationInput | lessonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for lessons.
     */
    cursor?: lessonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lessons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lessons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of lessons.
     */
    distinct?: LessonScalarFieldEnum | LessonScalarFieldEnum[]
  }

  /**
   * lesson findFirstOrThrow
   */
  export type lessonFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lesson
     */
    select?: lessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lesson
     */
    omit?: lessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lessonInclude<ExtArgs> | null
    /**
     * Filter, which lesson to fetch.
     */
    where?: lessonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lessons to fetch.
     */
    orderBy?: lessonOrderByWithRelationInput | lessonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for lessons.
     */
    cursor?: lessonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lessons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lessons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of lessons.
     */
    distinct?: LessonScalarFieldEnum | LessonScalarFieldEnum[]
  }

  /**
   * lesson findMany
   */
  export type lessonFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lesson
     */
    select?: lessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lesson
     */
    omit?: lessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lessonInclude<ExtArgs> | null
    /**
     * Filter, which lessons to fetch.
     */
    where?: lessonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lessons to fetch.
     */
    orderBy?: lessonOrderByWithRelationInput | lessonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing lessons.
     */
    cursor?: lessonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lessons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lessons.
     */
    skip?: number
    distinct?: LessonScalarFieldEnum | LessonScalarFieldEnum[]
  }

  /**
   * lesson create
   */
  export type lessonCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lesson
     */
    select?: lessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lesson
     */
    omit?: lessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lessonInclude<ExtArgs> | null
    /**
     * The data needed to create a lesson.
     */
    data: XOR<lessonCreateInput, lessonUncheckedCreateInput>
  }

  /**
   * lesson createMany
   */
  export type lessonCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many lessons.
     */
    data: lessonCreateManyInput | lessonCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * lesson update
   */
  export type lessonUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lesson
     */
    select?: lessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lesson
     */
    omit?: lessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lessonInclude<ExtArgs> | null
    /**
     * The data needed to update a lesson.
     */
    data: XOR<lessonUpdateInput, lessonUncheckedUpdateInput>
    /**
     * Choose, which lesson to update.
     */
    where: lessonWhereUniqueInput
  }

  /**
   * lesson updateMany
   */
  export type lessonUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update lessons.
     */
    data: XOR<lessonUpdateManyMutationInput, lessonUncheckedUpdateManyInput>
    /**
     * Filter which lessons to update
     */
    where?: lessonWhereInput
    /**
     * Limit how many lessons to update.
     */
    limit?: number
  }

  /**
   * lesson upsert
   */
  export type lessonUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lesson
     */
    select?: lessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lesson
     */
    omit?: lessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lessonInclude<ExtArgs> | null
    /**
     * The filter to search for the lesson to update in case it exists.
     */
    where: lessonWhereUniqueInput
    /**
     * In case the lesson found by the `where` argument doesn't exist, create a new lesson with this data.
     */
    create: XOR<lessonCreateInput, lessonUncheckedCreateInput>
    /**
     * In case the lesson was found with the provided `where` argument, update it with this data.
     */
    update: XOR<lessonUpdateInput, lessonUncheckedUpdateInput>
  }

  /**
   * lesson delete
   */
  export type lessonDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lesson
     */
    select?: lessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lesson
     */
    omit?: lessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lessonInclude<ExtArgs> | null
    /**
     * Filter which lesson to delete.
     */
    where: lessonWhereUniqueInput
  }

  /**
   * lesson deleteMany
   */
  export type lessonDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which lessons to delete
     */
    where?: lessonWhereInput
    /**
     * Limit how many lessons to delete.
     */
    limit?: number
  }

  /**
   * lesson.comment
   */
  export type lesson$commentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the comment
     */
    omit?: commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentInclude<ExtArgs> | null
    where?: commentWhereInput
    orderBy?: commentOrderByWithRelationInput | commentOrderByWithRelationInput[]
    cursor?: commentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * lesson without action
   */
  export type lessonDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lesson
     */
    select?: lessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lesson
     */
    omit?: lessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lessonInclude<ExtArgs> | null
  }


  /**
   * Model notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationAvgAggregateOutputType = {
    NID: number | null
    CoID: number | null
  }

  export type NotificationSumAggregateOutputType = {
    NID: number | null
    CoID: number | null
  }

  export type NotificationMinAggregateOutputType = {
    NID: number | null
    UID: string | null
    Type: $Enums.notification_Type | null
    FromUser: string | null
    Message: string | null
    CoID: number | null
    CreatedAt: Date | null
    isRead: boolean | null
  }

  export type NotificationMaxAggregateOutputType = {
    NID: number | null
    UID: string | null
    Type: $Enums.notification_Type | null
    FromUser: string | null
    Message: string | null
    CoID: number | null
    CreatedAt: Date | null
    isRead: boolean | null
  }

  export type NotificationCountAggregateOutputType = {
    NID: number
    UID: number
    Type: number
    FromUser: number
    Message: number
    CoID: number
    CreatedAt: number
    isRead: number
    _all: number
  }


  export type NotificationAvgAggregateInputType = {
    NID?: true
    CoID?: true
  }

  export type NotificationSumAggregateInputType = {
    NID?: true
    CoID?: true
  }

  export type NotificationMinAggregateInputType = {
    NID?: true
    UID?: true
    Type?: true
    FromUser?: true
    Message?: true
    CoID?: true
    CreatedAt?: true
    isRead?: true
  }

  export type NotificationMaxAggregateInputType = {
    NID?: true
    UID?: true
    Type?: true
    FromUser?: true
    Message?: true
    CoID?: true
    CreatedAt?: true
    isRead?: true
  }

  export type NotificationCountAggregateInputType = {
    NID?: true
    UID?: true
    Type?: true
    FromUser?: true
    Message?: true
    CoID?: true
    CreatedAt?: true
    isRead?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which notification to aggregate.
     */
    where?: notificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of notifications to fetch.
     */
    orderBy?: notificationOrderByWithRelationInput | notificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: notificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type notificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: notificationWhereInput
    orderBy?: notificationOrderByWithAggregationInput | notificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: notificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _avg?: NotificationAvgAggregateInputType
    _sum?: NotificationSumAggregateInputType
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    NID: number
    UID: string
    Type: $Enums.notification_Type
    FromUser: string
    Message: string
    CoID: number | null
    CreatedAt: Date | null
    isRead: boolean | null
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends notificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type notificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    NID?: boolean
    UID?: boolean
    Type?: boolean
    FromUser?: boolean
    Message?: boolean
    CoID?: boolean
    CreatedAt?: boolean
    isRead?: boolean
    user_notification_UIDTouser?: boolean | userDefaultArgs<ExtArgs>
    user_notification_FromUserTouser?: boolean | userDefaultArgs<ExtArgs>
    comment?: boolean | notification$commentArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>



  export type notificationSelectScalar = {
    NID?: boolean
    UID?: boolean
    Type?: boolean
    FromUser?: boolean
    Message?: boolean
    CoID?: boolean
    CreatedAt?: boolean
    isRead?: boolean
  }

  export type notificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"NID" | "UID" | "Type" | "FromUser" | "Message" | "CoID" | "CreatedAt" | "isRead", ExtArgs["result"]["notification"]>
  export type notificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user_notification_UIDTouser?: boolean | userDefaultArgs<ExtArgs>
    user_notification_FromUserTouser?: boolean | userDefaultArgs<ExtArgs>
    comment?: boolean | notification$commentArgs<ExtArgs>
  }

  export type $notificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "notification"
    objects: {
      user_notification_UIDTouser: Prisma.$userPayload<ExtArgs>
      user_notification_FromUserTouser: Prisma.$userPayload<ExtArgs>
      comment: Prisma.$commentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      NID: number
      UID: string
      Type: $Enums.notification_Type
      FromUser: string
      Message: string
      CoID: number | null
      CreatedAt: Date | null
      isRead: boolean | null
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type notificationGetPayload<S extends boolean | null | undefined | notificationDefaultArgs> = $Result.GetResult<Prisma.$notificationPayload, S>

  type notificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<notificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface notificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['notification'], meta: { name: 'notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {notificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends notificationFindUniqueArgs>(args: SelectSubset<T, notificationFindUniqueArgs<ExtArgs>>): Prisma__notificationClient<$Result.GetResult<Prisma.$notificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {notificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends notificationFindUniqueOrThrowArgs>(args: SelectSubset<T, notificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__notificationClient<$Result.GetResult<Prisma.$notificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends notificationFindFirstArgs>(args?: SelectSubset<T, notificationFindFirstArgs<ExtArgs>>): Prisma__notificationClient<$Result.GetResult<Prisma.$notificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends notificationFindFirstOrThrowArgs>(args?: SelectSubset<T, notificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__notificationClient<$Result.GetResult<Prisma.$notificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `NID`
     * const notificationWithNIDOnly = await prisma.notification.findMany({ select: { NID: true } })
     * 
     */
    findMany<T extends notificationFindManyArgs>(args?: SelectSubset<T, notificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$notificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Notification.
     * @param {notificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends notificationCreateArgs>(args: SelectSubset<T, notificationCreateArgs<ExtArgs>>): Prisma__notificationClient<$Result.GetResult<Prisma.$notificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notifications.
     * @param {notificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends notificationCreateManyArgs>(args?: SelectSubset<T, notificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Notification.
     * @param {notificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends notificationDeleteArgs>(args: SelectSubset<T, notificationDeleteArgs<ExtArgs>>): Prisma__notificationClient<$Result.GetResult<Prisma.$notificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Notification.
     * @param {notificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends notificationUpdateArgs>(args: SelectSubset<T, notificationUpdateArgs<ExtArgs>>): Prisma__notificationClient<$Result.GetResult<Prisma.$notificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notifications.
     * @param {notificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends notificationDeleteManyArgs>(args?: SelectSubset<T, notificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends notificationUpdateManyArgs>(args: SelectSubset<T, notificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {notificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends notificationUpsertArgs>(args: SelectSubset<T, notificationUpsertArgs<ExtArgs>>): Prisma__notificationClient<$Result.GetResult<Prisma.$notificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends notificationCountArgs>(
      args?: Subset<T, notificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends notificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: notificationGroupByArgs['orderBy'] }
        : { orderBy?: notificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, notificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the notification model
   */
  readonly fields: notificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__notificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user_notification_UIDTouser<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user_notification_FromUserTouser<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    comment<T extends notification$commentArgs<ExtArgs> = {}>(args?: Subset<T, notification$commentArgs<ExtArgs>>): Prisma__commentClient<$Result.GetResult<Prisma.$commentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the notification model
   */
  interface notificationFieldRefs {
    readonly NID: FieldRef<"notification", 'Int'>
    readonly UID: FieldRef<"notification", 'String'>
    readonly Type: FieldRef<"notification", 'notification_Type'>
    readonly FromUser: FieldRef<"notification", 'String'>
    readonly Message: FieldRef<"notification", 'String'>
    readonly CoID: FieldRef<"notification", 'Int'>
    readonly CreatedAt: FieldRef<"notification", 'DateTime'>
    readonly isRead: FieldRef<"notification", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * notification findUnique
   */
  export type notificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notification
     */
    omit?: notificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationInclude<ExtArgs> | null
    /**
     * Filter, which notification to fetch.
     */
    where: notificationWhereUniqueInput
  }

  /**
   * notification findUniqueOrThrow
   */
  export type notificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notification
     */
    omit?: notificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationInclude<ExtArgs> | null
    /**
     * Filter, which notification to fetch.
     */
    where: notificationWhereUniqueInput
  }

  /**
   * notification findFirst
   */
  export type notificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notification
     */
    omit?: notificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationInclude<ExtArgs> | null
    /**
     * Filter, which notification to fetch.
     */
    where?: notificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of notifications to fetch.
     */
    orderBy?: notificationOrderByWithRelationInput | notificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for notifications.
     */
    cursor?: notificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * notification findFirstOrThrow
   */
  export type notificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notification
     */
    omit?: notificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationInclude<ExtArgs> | null
    /**
     * Filter, which notification to fetch.
     */
    where?: notificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of notifications to fetch.
     */
    orderBy?: notificationOrderByWithRelationInput | notificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for notifications.
     */
    cursor?: notificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * notification findMany
   */
  export type notificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notification
     */
    omit?: notificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationInclude<ExtArgs> | null
    /**
     * Filter, which notifications to fetch.
     */
    where?: notificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of notifications to fetch.
     */
    orderBy?: notificationOrderByWithRelationInput | notificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing notifications.
     */
    cursor?: notificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * notification create
   */
  export type notificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notification
     */
    omit?: notificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationInclude<ExtArgs> | null
    /**
     * The data needed to create a notification.
     */
    data: XOR<notificationCreateInput, notificationUncheckedCreateInput>
  }

  /**
   * notification createMany
   */
  export type notificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many notifications.
     */
    data: notificationCreateManyInput | notificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * notification update
   */
  export type notificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notification
     */
    omit?: notificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationInclude<ExtArgs> | null
    /**
     * The data needed to update a notification.
     */
    data: XOR<notificationUpdateInput, notificationUncheckedUpdateInput>
    /**
     * Choose, which notification to update.
     */
    where: notificationWhereUniqueInput
  }

  /**
   * notification updateMany
   */
  export type notificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update notifications.
     */
    data: XOR<notificationUpdateManyMutationInput, notificationUncheckedUpdateManyInput>
    /**
     * Filter which notifications to update
     */
    where?: notificationWhereInput
    /**
     * Limit how many notifications to update.
     */
    limit?: number
  }

  /**
   * notification upsert
   */
  export type notificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notification
     */
    omit?: notificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationInclude<ExtArgs> | null
    /**
     * The filter to search for the notification to update in case it exists.
     */
    where: notificationWhereUniqueInput
    /**
     * In case the notification found by the `where` argument doesn't exist, create a new notification with this data.
     */
    create: XOR<notificationCreateInput, notificationUncheckedCreateInput>
    /**
     * In case the notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<notificationUpdateInput, notificationUncheckedUpdateInput>
  }

  /**
   * notification delete
   */
  export type notificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notification
     */
    omit?: notificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationInclude<ExtArgs> | null
    /**
     * Filter which notification to delete.
     */
    where: notificationWhereUniqueInput
  }

  /**
   * notification deleteMany
   */
  export type notificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which notifications to delete
     */
    where?: notificationWhereInput
    /**
     * Limit how many notifications to delete.
     */
    limit?: number
  }

  /**
   * notification.comment
   */
  export type notification$commentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the comment
     */
    omit?: commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentInclude<ExtArgs> | null
    where?: commentWhereInput
  }

  /**
   * notification without action
   */
  export type notificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notification
     */
    omit?: notificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationInclude<ExtArgs> | null
  }


  /**
   * Model studyplan
   */

  export type AggregateStudyplan = {
    _count: StudyplanCountAggregateOutputType | null
    _avg: StudyplanAvgAggregateOutputType | null
    _sum: StudyplanSumAggregateOutputType | null
    _min: StudyplanMinAggregateOutputType | null
    _max: StudyplanMaxAggregateOutputType | null
  }

  export type StudyplanAvgAggregateOutputType = {
    SPID: number | null
  }

  export type StudyplanSumAggregateOutputType = {
    SPID: number | null
  }

  export type StudyplanMinAggregateOutputType = {
    SPID: number | null
    Name: string | null
    Description: string | null
    Icon: string | null
    Slug: string | null
  }

  export type StudyplanMaxAggregateOutputType = {
    SPID: number | null
    Name: string | null
    Description: string | null
    Icon: string | null
    Slug: string | null
  }

  export type StudyplanCountAggregateOutputType = {
    SPID: number
    Name: number
    Description: number
    Icon: number
    Slug: number
    _all: number
  }


  export type StudyplanAvgAggregateInputType = {
    SPID?: true
  }

  export type StudyplanSumAggregateInputType = {
    SPID?: true
  }

  export type StudyplanMinAggregateInputType = {
    SPID?: true
    Name?: true
    Description?: true
    Icon?: true
    Slug?: true
  }

  export type StudyplanMaxAggregateInputType = {
    SPID?: true
    Name?: true
    Description?: true
    Icon?: true
    Slug?: true
  }

  export type StudyplanCountAggregateInputType = {
    SPID?: true
    Name?: true
    Description?: true
    Icon?: true
    Slug?: true
    _all?: true
  }

  export type StudyplanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which studyplan to aggregate.
     */
    where?: studyplanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of studyplans to fetch.
     */
    orderBy?: studyplanOrderByWithRelationInput | studyplanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: studyplanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` studyplans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` studyplans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned studyplans
    **/
    _count?: true | StudyplanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudyplanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudyplanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudyplanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudyplanMaxAggregateInputType
  }

  export type GetStudyplanAggregateType<T extends StudyplanAggregateArgs> = {
        [P in keyof T & keyof AggregateStudyplan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudyplan[P]>
      : GetScalarType<T[P], AggregateStudyplan[P]>
  }




  export type studyplanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: studyplanWhereInput
    orderBy?: studyplanOrderByWithAggregationInput | studyplanOrderByWithAggregationInput[]
    by: StudyplanScalarFieldEnum[] | StudyplanScalarFieldEnum
    having?: studyplanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudyplanCountAggregateInputType | true
    _avg?: StudyplanAvgAggregateInputType
    _sum?: StudyplanSumAggregateInputType
    _min?: StudyplanMinAggregateInputType
    _max?: StudyplanMaxAggregateInputType
  }

  export type StudyplanGroupByOutputType = {
    SPID: number
    Name: string
    Description: string
    Icon: string | null
    Slug: string | null
    _count: StudyplanCountAggregateOutputType | null
    _avg: StudyplanAvgAggregateOutputType | null
    _sum: StudyplanSumAggregateOutputType | null
    _min: StudyplanMinAggregateOutputType | null
    _max: StudyplanMaxAggregateOutputType | null
  }

  type GetStudyplanGroupByPayload<T extends studyplanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudyplanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudyplanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudyplanGroupByOutputType[P]>
            : GetScalarType<T[P], StudyplanGroupByOutputType[P]>
        }
      >
    >


  export type studyplanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    SPID?: boolean
    Name?: boolean
    Description?: boolean
    Icon?: boolean
    Slug?: boolean
    studyplanitem?: boolean | studyplan$studyplanitemArgs<ExtArgs>
    studyplanprogress?: boolean | studyplan$studyplanprogressArgs<ExtArgs>
    _count?: boolean | StudyplanCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studyplan"]>



  export type studyplanSelectScalar = {
    SPID?: boolean
    Name?: boolean
    Description?: boolean
    Icon?: boolean
    Slug?: boolean
  }

  export type studyplanOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"SPID" | "Name" | "Description" | "Icon" | "Slug", ExtArgs["result"]["studyplan"]>
  export type studyplanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    studyplanitem?: boolean | studyplan$studyplanitemArgs<ExtArgs>
    studyplanprogress?: boolean | studyplan$studyplanprogressArgs<ExtArgs>
    _count?: boolean | StudyplanCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $studyplanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "studyplan"
    objects: {
      studyplanitem: Prisma.$studyplanitemPayload<ExtArgs>[]
      studyplanprogress: Prisma.$studyplanprogressPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      SPID: number
      Name: string
      Description: string
      Icon: string | null
      Slug: string | null
    }, ExtArgs["result"]["studyplan"]>
    composites: {}
  }

  type studyplanGetPayload<S extends boolean | null | undefined | studyplanDefaultArgs> = $Result.GetResult<Prisma.$studyplanPayload, S>

  type studyplanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<studyplanFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudyplanCountAggregateInputType | true
    }

  export interface studyplanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['studyplan'], meta: { name: 'studyplan' } }
    /**
     * Find zero or one Studyplan that matches the filter.
     * @param {studyplanFindUniqueArgs} args - Arguments to find a Studyplan
     * @example
     * // Get one Studyplan
     * const studyplan = await prisma.studyplan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends studyplanFindUniqueArgs>(args: SelectSubset<T, studyplanFindUniqueArgs<ExtArgs>>): Prisma__studyplanClient<$Result.GetResult<Prisma.$studyplanPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Studyplan that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {studyplanFindUniqueOrThrowArgs} args - Arguments to find a Studyplan
     * @example
     * // Get one Studyplan
     * const studyplan = await prisma.studyplan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends studyplanFindUniqueOrThrowArgs>(args: SelectSubset<T, studyplanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__studyplanClient<$Result.GetResult<Prisma.$studyplanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Studyplan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studyplanFindFirstArgs} args - Arguments to find a Studyplan
     * @example
     * // Get one Studyplan
     * const studyplan = await prisma.studyplan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends studyplanFindFirstArgs>(args?: SelectSubset<T, studyplanFindFirstArgs<ExtArgs>>): Prisma__studyplanClient<$Result.GetResult<Prisma.$studyplanPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Studyplan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studyplanFindFirstOrThrowArgs} args - Arguments to find a Studyplan
     * @example
     * // Get one Studyplan
     * const studyplan = await prisma.studyplan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends studyplanFindFirstOrThrowArgs>(args?: SelectSubset<T, studyplanFindFirstOrThrowArgs<ExtArgs>>): Prisma__studyplanClient<$Result.GetResult<Prisma.$studyplanPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Studyplans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studyplanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Studyplans
     * const studyplans = await prisma.studyplan.findMany()
     * 
     * // Get first 10 Studyplans
     * const studyplans = await prisma.studyplan.findMany({ take: 10 })
     * 
     * // Only select the `SPID`
     * const studyplanWithSPIDOnly = await prisma.studyplan.findMany({ select: { SPID: true } })
     * 
     */
    findMany<T extends studyplanFindManyArgs>(args?: SelectSubset<T, studyplanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$studyplanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Studyplan.
     * @param {studyplanCreateArgs} args - Arguments to create a Studyplan.
     * @example
     * // Create one Studyplan
     * const Studyplan = await prisma.studyplan.create({
     *   data: {
     *     // ... data to create a Studyplan
     *   }
     * })
     * 
     */
    create<T extends studyplanCreateArgs>(args: SelectSubset<T, studyplanCreateArgs<ExtArgs>>): Prisma__studyplanClient<$Result.GetResult<Prisma.$studyplanPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Studyplans.
     * @param {studyplanCreateManyArgs} args - Arguments to create many Studyplans.
     * @example
     * // Create many Studyplans
     * const studyplan = await prisma.studyplan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends studyplanCreateManyArgs>(args?: SelectSubset<T, studyplanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Studyplan.
     * @param {studyplanDeleteArgs} args - Arguments to delete one Studyplan.
     * @example
     * // Delete one Studyplan
     * const Studyplan = await prisma.studyplan.delete({
     *   where: {
     *     // ... filter to delete one Studyplan
     *   }
     * })
     * 
     */
    delete<T extends studyplanDeleteArgs>(args: SelectSubset<T, studyplanDeleteArgs<ExtArgs>>): Prisma__studyplanClient<$Result.GetResult<Prisma.$studyplanPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Studyplan.
     * @param {studyplanUpdateArgs} args - Arguments to update one Studyplan.
     * @example
     * // Update one Studyplan
     * const studyplan = await prisma.studyplan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends studyplanUpdateArgs>(args: SelectSubset<T, studyplanUpdateArgs<ExtArgs>>): Prisma__studyplanClient<$Result.GetResult<Prisma.$studyplanPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Studyplans.
     * @param {studyplanDeleteManyArgs} args - Arguments to filter Studyplans to delete.
     * @example
     * // Delete a few Studyplans
     * const { count } = await prisma.studyplan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends studyplanDeleteManyArgs>(args?: SelectSubset<T, studyplanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Studyplans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studyplanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Studyplans
     * const studyplan = await prisma.studyplan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends studyplanUpdateManyArgs>(args: SelectSubset<T, studyplanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Studyplan.
     * @param {studyplanUpsertArgs} args - Arguments to update or create a Studyplan.
     * @example
     * // Update or create a Studyplan
     * const studyplan = await prisma.studyplan.upsert({
     *   create: {
     *     // ... data to create a Studyplan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Studyplan we want to update
     *   }
     * })
     */
    upsert<T extends studyplanUpsertArgs>(args: SelectSubset<T, studyplanUpsertArgs<ExtArgs>>): Prisma__studyplanClient<$Result.GetResult<Prisma.$studyplanPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Studyplans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studyplanCountArgs} args - Arguments to filter Studyplans to count.
     * @example
     * // Count the number of Studyplans
     * const count = await prisma.studyplan.count({
     *   where: {
     *     // ... the filter for the Studyplans we want to count
     *   }
     * })
    **/
    count<T extends studyplanCountArgs>(
      args?: Subset<T, studyplanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudyplanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Studyplan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyplanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudyplanAggregateArgs>(args: Subset<T, StudyplanAggregateArgs>): Prisma.PrismaPromise<GetStudyplanAggregateType<T>>

    /**
     * Group by Studyplan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studyplanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends studyplanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: studyplanGroupByArgs['orderBy'] }
        : { orderBy?: studyplanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, studyplanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudyplanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the studyplan model
   */
  readonly fields: studyplanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for studyplan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__studyplanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    studyplanitem<T extends studyplan$studyplanitemArgs<ExtArgs> = {}>(args?: Subset<T, studyplan$studyplanitemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$studyplanitemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    studyplanprogress<T extends studyplan$studyplanprogressArgs<ExtArgs> = {}>(args?: Subset<T, studyplan$studyplanprogressArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$studyplanprogressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the studyplan model
   */
  interface studyplanFieldRefs {
    readonly SPID: FieldRef<"studyplan", 'Int'>
    readonly Name: FieldRef<"studyplan", 'String'>
    readonly Description: FieldRef<"studyplan", 'String'>
    readonly Icon: FieldRef<"studyplan", 'String'>
    readonly Slug: FieldRef<"studyplan", 'String'>
  }
    

  // Custom InputTypes
  /**
   * studyplan findUnique
   */
  export type studyplanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studyplan
     */
    select?: studyplanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the studyplan
     */
    omit?: studyplanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studyplanInclude<ExtArgs> | null
    /**
     * Filter, which studyplan to fetch.
     */
    where: studyplanWhereUniqueInput
  }

  /**
   * studyplan findUniqueOrThrow
   */
  export type studyplanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studyplan
     */
    select?: studyplanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the studyplan
     */
    omit?: studyplanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studyplanInclude<ExtArgs> | null
    /**
     * Filter, which studyplan to fetch.
     */
    where: studyplanWhereUniqueInput
  }

  /**
   * studyplan findFirst
   */
  export type studyplanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studyplan
     */
    select?: studyplanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the studyplan
     */
    omit?: studyplanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studyplanInclude<ExtArgs> | null
    /**
     * Filter, which studyplan to fetch.
     */
    where?: studyplanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of studyplans to fetch.
     */
    orderBy?: studyplanOrderByWithRelationInput | studyplanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for studyplans.
     */
    cursor?: studyplanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` studyplans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` studyplans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of studyplans.
     */
    distinct?: StudyplanScalarFieldEnum | StudyplanScalarFieldEnum[]
  }

  /**
   * studyplan findFirstOrThrow
   */
  export type studyplanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studyplan
     */
    select?: studyplanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the studyplan
     */
    omit?: studyplanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studyplanInclude<ExtArgs> | null
    /**
     * Filter, which studyplan to fetch.
     */
    where?: studyplanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of studyplans to fetch.
     */
    orderBy?: studyplanOrderByWithRelationInput | studyplanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for studyplans.
     */
    cursor?: studyplanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` studyplans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` studyplans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of studyplans.
     */
    distinct?: StudyplanScalarFieldEnum | StudyplanScalarFieldEnum[]
  }

  /**
   * studyplan findMany
   */
  export type studyplanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studyplan
     */
    select?: studyplanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the studyplan
     */
    omit?: studyplanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studyplanInclude<ExtArgs> | null
    /**
     * Filter, which studyplans to fetch.
     */
    where?: studyplanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of studyplans to fetch.
     */
    orderBy?: studyplanOrderByWithRelationInput | studyplanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing studyplans.
     */
    cursor?: studyplanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` studyplans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` studyplans.
     */
    skip?: number
    distinct?: StudyplanScalarFieldEnum | StudyplanScalarFieldEnum[]
  }

  /**
   * studyplan create
   */
  export type studyplanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studyplan
     */
    select?: studyplanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the studyplan
     */
    omit?: studyplanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studyplanInclude<ExtArgs> | null
    /**
     * The data needed to create a studyplan.
     */
    data: XOR<studyplanCreateInput, studyplanUncheckedCreateInput>
  }

  /**
   * studyplan createMany
   */
  export type studyplanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many studyplans.
     */
    data: studyplanCreateManyInput | studyplanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * studyplan update
   */
  export type studyplanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studyplan
     */
    select?: studyplanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the studyplan
     */
    omit?: studyplanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studyplanInclude<ExtArgs> | null
    /**
     * The data needed to update a studyplan.
     */
    data: XOR<studyplanUpdateInput, studyplanUncheckedUpdateInput>
    /**
     * Choose, which studyplan to update.
     */
    where: studyplanWhereUniqueInput
  }

  /**
   * studyplan updateMany
   */
  export type studyplanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update studyplans.
     */
    data: XOR<studyplanUpdateManyMutationInput, studyplanUncheckedUpdateManyInput>
    /**
     * Filter which studyplans to update
     */
    where?: studyplanWhereInput
    /**
     * Limit how many studyplans to update.
     */
    limit?: number
  }

  /**
   * studyplan upsert
   */
  export type studyplanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studyplan
     */
    select?: studyplanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the studyplan
     */
    omit?: studyplanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studyplanInclude<ExtArgs> | null
    /**
     * The filter to search for the studyplan to update in case it exists.
     */
    where: studyplanWhereUniqueInput
    /**
     * In case the studyplan found by the `where` argument doesn't exist, create a new studyplan with this data.
     */
    create: XOR<studyplanCreateInput, studyplanUncheckedCreateInput>
    /**
     * In case the studyplan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<studyplanUpdateInput, studyplanUncheckedUpdateInput>
  }

  /**
   * studyplan delete
   */
  export type studyplanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studyplan
     */
    select?: studyplanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the studyplan
     */
    omit?: studyplanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studyplanInclude<ExtArgs> | null
    /**
     * Filter which studyplan to delete.
     */
    where: studyplanWhereUniqueInput
  }

  /**
   * studyplan deleteMany
   */
  export type studyplanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which studyplans to delete
     */
    where?: studyplanWhereInput
    /**
     * Limit how many studyplans to delete.
     */
    limit?: number
  }

  /**
   * studyplan.studyplanitem
   */
  export type studyplan$studyplanitemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studyplanitem
     */
    select?: studyplanitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the studyplanitem
     */
    omit?: studyplanitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studyplanitemInclude<ExtArgs> | null
    where?: studyplanitemWhereInput
    orderBy?: studyplanitemOrderByWithRelationInput | studyplanitemOrderByWithRelationInput[]
    cursor?: studyplanitemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudyplanitemScalarFieldEnum | StudyplanitemScalarFieldEnum[]
  }

  /**
   * studyplan.studyplanprogress
   */
  export type studyplan$studyplanprogressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studyplanprogress
     */
    select?: studyplanprogressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the studyplanprogress
     */
    omit?: studyplanprogressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studyplanprogressInclude<ExtArgs> | null
    where?: studyplanprogressWhereInput
    orderBy?: studyplanprogressOrderByWithRelationInput | studyplanprogressOrderByWithRelationInput[]
    cursor?: studyplanprogressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudyplanprogressScalarFieldEnum | StudyplanprogressScalarFieldEnum[]
  }

  /**
   * studyplan without action
   */
  export type studyplanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studyplan
     */
    select?: studyplanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the studyplan
     */
    omit?: studyplanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studyplanInclude<ExtArgs> | null
  }


  /**
   * Model studyplanitem
   */

  export type AggregateStudyplanitem = {
    _count: StudyplanitemCountAggregateOutputType | null
    _avg: StudyplanitemAvgAggregateOutputType | null
    _sum: StudyplanitemSumAggregateOutputType | null
    _min: StudyplanitemMinAggregateOutputType | null
    _max: StudyplanitemMaxAggregateOutputType | null
  }

  export type StudyplanitemAvgAggregateOutputType = {
    SPIID: number | null
    SPID: number | null
  }

  export type StudyplanitemSumAggregateOutputType = {
    SPIID: number | null
    SPID: number | null
  }

  export type StudyplanitemMinAggregateOutputType = {
    SPIID: number | null
    SPID: number | null
    Name: string | null
  }

  export type StudyplanitemMaxAggregateOutputType = {
    SPIID: number | null
    SPID: number | null
    Name: string | null
  }

  export type StudyplanitemCountAggregateOutputType = {
    SPIID: number
    SPID: number
    Name: number
    _all: number
  }


  export type StudyplanitemAvgAggregateInputType = {
    SPIID?: true
    SPID?: true
  }

  export type StudyplanitemSumAggregateInputType = {
    SPIID?: true
    SPID?: true
  }

  export type StudyplanitemMinAggregateInputType = {
    SPIID?: true
    SPID?: true
    Name?: true
  }

  export type StudyplanitemMaxAggregateInputType = {
    SPIID?: true
    SPID?: true
    Name?: true
  }

  export type StudyplanitemCountAggregateInputType = {
    SPIID?: true
    SPID?: true
    Name?: true
    _all?: true
  }

  export type StudyplanitemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which studyplanitem to aggregate.
     */
    where?: studyplanitemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of studyplanitems to fetch.
     */
    orderBy?: studyplanitemOrderByWithRelationInput | studyplanitemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: studyplanitemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` studyplanitems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` studyplanitems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned studyplanitems
    **/
    _count?: true | StudyplanitemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudyplanitemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudyplanitemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudyplanitemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudyplanitemMaxAggregateInputType
  }

  export type GetStudyplanitemAggregateType<T extends StudyplanitemAggregateArgs> = {
        [P in keyof T & keyof AggregateStudyplanitem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudyplanitem[P]>
      : GetScalarType<T[P], AggregateStudyplanitem[P]>
  }




  export type studyplanitemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: studyplanitemWhereInput
    orderBy?: studyplanitemOrderByWithAggregationInput | studyplanitemOrderByWithAggregationInput[]
    by: StudyplanitemScalarFieldEnum[] | StudyplanitemScalarFieldEnum
    having?: studyplanitemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudyplanitemCountAggregateInputType | true
    _avg?: StudyplanitemAvgAggregateInputType
    _sum?: StudyplanitemSumAggregateInputType
    _min?: StudyplanitemMinAggregateInputType
    _max?: StudyplanitemMaxAggregateInputType
  }

  export type StudyplanitemGroupByOutputType = {
    SPIID: number
    SPID: number
    Name: string
    _count: StudyplanitemCountAggregateOutputType | null
    _avg: StudyplanitemAvgAggregateOutputType | null
    _sum: StudyplanitemSumAggregateOutputType | null
    _min: StudyplanitemMinAggregateOutputType | null
    _max: StudyplanitemMaxAggregateOutputType | null
  }

  type GetStudyplanitemGroupByPayload<T extends studyplanitemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudyplanitemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudyplanitemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudyplanitemGroupByOutputType[P]>
            : GetScalarType<T[P], StudyplanitemGroupByOutputType[P]>
        }
      >
    >


  export type studyplanitemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    SPIID?: boolean
    SPID?: boolean
    Name?: boolean
    exercise?: boolean | studyplanitem$exerciseArgs<ExtArgs>
    studyplan?: boolean | studyplanDefaultArgs<ExtArgs>
    _count?: boolean | StudyplanitemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studyplanitem"]>



  export type studyplanitemSelectScalar = {
    SPIID?: boolean
    SPID?: boolean
    Name?: boolean
  }

  export type studyplanitemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"SPIID" | "SPID" | "Name", ExtArgs["result"]["studyplanitem"]>
  export type studyplanitemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercise?: boolean | studyplanitem$exerciseArgs<ExtArgs>
    studyplan?: boolean | studyplanDefaultArgs<ExtArgs>
    _count?: boolean | StudyplanitemCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $studyplanitemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "studyplanitem"
    objects: {
      exercise: Prisma.$exercisePayload<ExtArgs>[]
      studyplan: Prisma.$studyplanPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      SPIID: number
      SPID: number
      Name: string
    }, ExtArgs["result"]["studyplanitem"]>
    composites: {}
  }

  type studyplanitemGetPayload<S extends boolean | null | undefined | studyplanitemDefaultArgs> = $Result.GetResult<Prisma.$studyplanitemPayload, S>

  type studyplanitemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<studyplanitemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudyplanitemCountAggregateInputType | true
    }

  export interface studyplanitemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['studyplanitem'], meta: { name: 'studyplanitem' } }
    /**
     * Find zero or one Studyplanitem that matches the filter.
     * @param {studyplanitemFindUniqueArgs} args - Arguments to find a Studyplanitem
     * @example
     * // Get one Studyplanitem
     * const studyplanitem = await prisma.studyplanitem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends studyplanitemFindUniqueArgs>(args: SelectSubset<T, studyplanitemFindUniqueArgs<ExtArgs>>): Prisma__studyplanitemClient<$Result.GetResult<Prisma.$studyplanitemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Studyplanitem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {studyplanitemFindUniqueOrThrowArgs} args - Arguments to find a Studyplanitem
     * @example
     * // Get one Studyplanitem
     * const studyplanitem = await prisma.studyplanitem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends studyplanitemFindUniqueOrThrowArgs>(args: SelectSubset<T, studyplanitemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__studyplanitemClient<$Result.GetResult<Prisma.$studyplanitemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Studyplanitem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studyplanitemFindFirstArgs} args - Arguments to find a Studyplanitem
     * @example
     * // Get one Studyplanitem
     * const studyplanitem = await prisma.studyplanitem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends studyplanitemFindFirstArgs>(args?: SelectSubset<T, studyplanitemFindFirstArgs<ExtArgs>>): Prisma__studyplanitemClient<$Result.GetResult<Prisma.$studyplanitemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Studyplanitem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studyplanitemFindFirstOrThrowArgs} args - Arguments to find a Studyplanitem
     * @example
     * // Get one Studyplanitem
     * const studyplanitem = await prisma.studyplanitem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends studyplanitemFindFirstOrThrowArgs>(args?: SelectSubset<T, studyplanitemFindFirstOrThrowArgs<ExtArgs>>): Prisma__studyplanitemClient<$Result.GetResult<Prisma.$studyplanitemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Studyplanitems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studyplanitemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Studyplanitems
     * const studyplanitems = await prisma.studyplanitem.findMany()
     * 
     * // Get first 10 Studyplanitems
     * const studyplanitems = await prisma.studyplanitem.findMany({ take: 10 })
     * 
     * // Only select the `SPIID`
     * const studyplanitemWithSPIIDOnly = await prisma.studyplanitem.findMany({ select: { SPIID: true } })
     * 
     */
    findMany<T extends studyplanitemFindManyArgs>(args?: SelectSubset<T, studyplanitemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$studyplanitemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Studyplanitem.
     * @param {studyplanitemCreateArgs} args - Arguments to create a Studyplanitem.
     * @example
     * // Create one Studyplanitem
     * const Studyplanitem = await prisma.studyplanitem.create({
     *   data: {
     *     // ... data to create a Studyplanitem
     *   }
     * })
     * 
     */
    create<T extends studyplanitemCreateArgs>(args: SelectSubset<T, studyplanitemCreateArgs<ExtArgs>>): Prisma__studyplanitemClient<$Result.GetResult<Prisma.$studyplanitemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Studyplanitems.
     * @param {studyplanitemCreateManyArgs} args - Arguments to create many Studyplanitems.
     * @example
     * // Create many Studyplanitems
     * const studyplanitem = await prisma.studyplanitem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends studyplanitemCreateManyArgs>(args?: SelectSubset<T, studyplanitemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Studyplanitem.
     * @param {studyplanitemDeleteArgs} args - Arguments to delete one Studyplanitem.
     * @example
     * // Delete one Studyplanitem
     * const Studyplanitem = await prisma.studyplanitem.delete({
     *   where: {
     *     // ... filter to delete one Studyplanitem
     *   }
     * })
     * 
     */
    delete<T extends studyplanitemDeleteArgs>(args: SelectSubset<T, studyplanitemDeleteArgs<ExtArgs>>): Prisma__studyplanitemClient<$Result.GetResult<Prisma.$studyplanitemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Studyplanitem.
     * @param {studyplanitemUpdateArgs} args - Arguments to update one Studyplanitem.
     * @example
     * // Update one Studyplanitem
     * const studyplanitem = await prisma.studyplanitem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends studyplanitemUpdateArgs>(args: SelectSubset<T, studyplanitemUpdateArgs<ExtArgs>>): Prisma__studyplanitemClient<$Result.GetResult<Prisma.$studyplanitemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Studyplanitems.
     * @param {studyplanitemDeleteManyArgs} args - Arguments to filter Studyplanitems to delete.
     * @example
     * // Delete a few Studyplanitems
     * const { count } = await prisma.studyplanitem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends studyplanitemDeleteManyArgs>(args?: SelectSubset<T, studyplanitemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Studyplanitems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studyplanitemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Studyplanitems
     * const studyplanitem = await prisma.studyplanitem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends studyplanitemUpdateManyArgs>(args: SelectSubset<T, studyplanitemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Studyplanitem.
     * @param {studyplanitemUpsertArgs} args - Arguments to update or create a Studyplanitem.
     * @example
     * // Update or create a Studyplanitem
     * const studyplanitem = await prisma.studyplanitem.upsert({
     *   create: {
     *     // ... data to create a Studyplanitem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Studyplanitem we want to update
     *   }
     * })
     */
    upsert<T extends studyplanitemUpsertArgs>(args: SelectSubset<T, studyplanitemUpsertArgs<ExtArgs>>): Prisma__studyplanitemClient<$Result.GetResult<Prisma.$studyplanitemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Studyplanitems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studyplanitemCountArgs} args - Arguments to filter Studyplanitems to count.
     * @example
     * // Count the number of Studyplanitems
     * const count = await prisma.studyplanitem.count({
     *   where: {
     *     // ... the filter for the Studyplanitems we want to count
     *   }
     * })
    **/
    count<T extends studyplanitemCountArgs>(
      args?: Subset<T, studyplanitemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudyplanitemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Studyplanitem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyplanitemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudyplanitemAggregateArgs>(args: Subset<T, StudyplanitemAggregateArgs>): Prisma.PrismaPromise<GetStudyplanitemAggregateType<T>>

    /**
     * Group by Studyplanitem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studyplanitemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends studyplanitemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: studyplanitemGroupByArgs['orderBy'] }
        : { orderBy?: studyplanitemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, studyplanitemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudyplanitemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the studyplanitem model
   */
  readonly fields: studyplanitemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for studyplanitem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__studyplanitemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    exercise<T extends studyplanitem$exerciseArgs<ExtArgs> = {}>(args?: Subset<T, studyplanitem$exerciseArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$exercisePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    studyplan<T extends studyplanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, studyplanDefaultArgs<ExtArgs>>): Prisma__studyplanClient<$Result.GetResult<Prisma.$studyplanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the studyplanitem model
   */
  interface studyplanitemFieldRefs {
    readonly SPIID: FieldRef<"studyplanitem", 'Int'>
    readonly SPID: FieldRef<"studyplanitem", 'Int'>
    readonly Name: FieldRef<"studyplanitem", 'String'>
  }
    

  // Custom InputTypes
  /**
   * studyplanitem findUnique
   */
  export type studyplanitemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studyplanitem
     */
    select?: studyplanitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the studyplanitem
     */
    omit?: studyplanitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studyplanitemInclude<ExtArgs> | null
    /**
     * Filter, which studyplanitem to fetch.
     */
    where: studyplanitemWhereUniqueInput
  }

  /**
   * studyplanitem findUniqueOrThrow
   */
  export type studyplanitemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studyplanitem
     */
    select?: studyplanitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the studyplanitem
     */
    omit?: studyplanitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studyplanitemInclude<ExtArgs> | null
    /**
     * Filter, which studyplanitem to fetch.
     */
    where: studyplanitemWhereUniqueInput
  }

  /**
   * studyplanitem findFirst
   */
  export type studyplanitemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studyplanitem
     */
    select?: studyplanitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the studyplanitem
     */
    omit?: studyplanitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studyplanitemInclude<ExtArgs> | null
    /**
     * Filter, which studyplanitem to fetch.
     */
    where?: studyplanitemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of studyplanitems to fetch.
     */
    orderBy?: studyplanitemOrderByWithRelationInput | studyplanitemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for studyplanitems.
     */
    cursor?: studyplanitemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` studyplanitems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` studyplanitems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of studyplanitems.
     */
    distinct?: StudyplanitemScalarFieldEnum | StudyplanitemScalarFieldEnum[]
  }

  /**
   * studyplanitem findFirstOrThrow
   */
  export type studyplanitemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studyplanitem
     */
    select?: studyplanitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the studyplanitem
     */
    omit?: studyplanitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studyplanitemInclude<ExtArgs> | null
    /**
     * Filter, which studyplanitem to fetch.
     */
    where?: studyplanitemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of studyplanitems to fetch.
     */
    orderBy?: studyplanitemOrderByWithRelationInput | studyplanitemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for studyplanitems.
     */
    cursor?: studyplanitemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` studyplanitems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` studyplanitems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of studyplanitems.
     */
    distinct?: StudyplanitemScalarFieldEnum | StudyplanitemScalarFieldEnum[]
  }

  /**
   * studyplanitem findMany
   */
  export type studyplanitemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studyplanitem
     */
    select?: studyplanitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the studyplanitem
     */
    omit?: studyplanitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studyplanitemInclude<ExtArgs> | null
    /**
     * Filter, which studyplanitems to fetch.
     */
    where?: studyplanitemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of studyplanitems to fetch.
     */
    orderBy?: studyplanitemOrderByWithRelationInput | studyplanitemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing studyplanitems.
     */
    cursor?: studyplanitemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` studyplanitems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` studyplanitems.
     */
    skip?: number
    distinct?: StudyplanitemScalarFieldEnum | StudyplanitemScalarFieldEnum[]
  }

  /**
   * studyplanitem create
   */
  export type studyplanitemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studyplanitem
     */
    select?: studyplanitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the studyplanitem
     */
    omit?: studyplanitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studyplanitemInclude<ExtArgs> | null
    /**
     * The data needed to create a studyplanitem.
     */
    data: XOR<studyplanitemCreateInput, studyplanitemUncheckedCreateInput>
  }

  /**
   * studyplanitem createMany
   */
  export type studyplanitemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many studyplanitems.
     */
    data: studyplanitemCreateManyInput | studyplanitemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * studyplanitem update
   */
  export type studyplanitemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studyplanitem
     */
    select?: studyplanitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the studyplanitem
     */
    omit?: studyplanitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studyplanitemInclude<ExtArgs> | null
    /**
     * The data needed to update a studyplanitem.
     */
    data: XOR<studyplanitemUpdateInput, studyplanitemUncheckedUpdateInput>
    /**
     * Choose, which studyplanitem to update.
     */
    where: studyplanitemWhereUniqueInput
  }

  /**
   * studyplanitem updateMany
   */
  export type studyplanitemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update studyplanitems.
     */
    data: XOR<studyplanitemUpdateManyMutationInput, studyplanitemUncheckedUpdateManyInput>
    /**
     * Filter which studyplanitems to update
     */
    where?: studyplanitemWhereInput
    /**
     * Limit how many studyplanitems to update.
     */
    limit?: number
  }

  /**
   * studyplanitem upsert
   */
  export type studyplanitemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studyplanitem
     */
    select?: studyplanitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the studyplanitem
     */
    omit?: studyplanitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studyplanitemInclude<ExtArgs> | null
    /**
     * The filter to search for the studyplanitem to update in case it exists.
     */
    where: studyplanitemWhereUniqueInput
    /**
     * In case the studyplanitem found by the `where` argument doesn't exist, create a new studyplanitem with this data.
     */
    create: XOR<studyplanitemCreateInput, studyplanitemUncheckedCreateInput>
    /**
     * In case the studyplanitem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<studyplanitemUpdateInput, studyplanitemUncheckedUpdateInput>
  }

  /**
   * studyplanitem delete
   */
  export type studyplanitemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studyplanitem
     */
    select?: studyplanitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the studyplanitem
     */
    omit?: studyplanitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studyplanitemInclude<ExtArgs> | null
    /**
     * Filter which studyplanitem to delete.
     */
    where: studyplanitemWhereUniqueInput
  }

  /**
   * studyplanitem deleteMany
   */
  export type studyplanitemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which studyplanitems to delete
     */
    where?: studyplanitemWhereInput
    /**
     * Limit how many studyplanitems to delete.
     */
    limit?: number
  }

  /**
   * studyplanitem.exercise
   */
  export type studyplanitem$exerciseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise
     */
    select?: exerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise
     */
    omit?: exerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciseInclude<ExtArgs> | null
    where?: exerciseWhereInput
    orderBy?: exerciseOrderByWithRelationInput | exerciseOrderByWithRelationInput[]
    cursor?: exerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }

  /**
   * studyplanitem without action
   */
  export type studyplanitemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studyplanitem
     */
    select?: studyplanitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the studyplanitem
     */
    omit?: studyplanitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studyplanitemInclude<ExtArgs> | null
  }


  /**
   * Model exerciseprogress
   */

  export type AggregateExerciseprogress = {
    _count: ExerciseprogressCountAggregateOutputType | null
    _avg: ExerciseprogressAvgAggregateOutputType | null
    _sum: ExerciseprogressSumAggregateOutputType | null
    _min: ExerciseprogressMinAggregateOutputType | null
    _max: ExerciseprogressMaxAggregateOutputType | null
  }

  export type ExerciseprogressAvgAggregateOutputType = {
    ID: number | null
    EID: number | null
  }

  export type ExerciseprogressSumAggregateOutputType = {
    ID: number | null
    EID: number | null
  }

  export type ExerciseprogressMinAggregateOutputType = {
    ID: number | null
    UID: string | null
    EID: number | null
    Status: $Enums.exerciseprogress_Status | null
    UpdatedAt: Date | null
  }

  export type ExerciseprogressMaxAggregateOutputType = {
    ID: number | null
    UID: string | null
    EID: number | null
    Status: $Enums.exerciseprogress_Status | null
    UpdatedAt: Date | null
  }

  export type ExerciseprogressCountAggregateOutputType = {
    ID: number
    UID: number
    EID: number
    Status: number
    UpdatedAt: number
    _all: number
  }


  export type ExerciseprogressAvgAggregateInputType = {
    ID?: true
    EID?: true
  }

  export type ExerciseprogressSumAggregateInputType = {
    ID?: true
    EID?: true
  }

  export type ExerciseprogressMinAggregateInputType = {
    ID?: true
    UID?: true
    EID?: true
    Status?: true
    UpdatedAt?: true
  }

  export type ExerciseprogressMaxAggregateInputType = {
    ID?: true
    UID?: true
    EID?: true
    Status?: true
    UpdatedAt?: true
  }

  export type ExerciseprogressCountAggregateInputType = {
    ID?: true
    UID?: true
    EID?: true
    Status?: true
    UpdatedAt?: true
    _all?: true
  }

  export type ExerciseprogressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which exerciseprogress to aggregate.
     */
    where?: exerciseprogressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of exerciseprogresses to fetch.
     */
    orderBy?: exerciseprogressOrderByWithRelationInput | exerciseprogressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: exerciseprogressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` exerciseprogresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` exerciseprogresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned exerciseprogresses
    **/
    _count?: true | ExerciseprogressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExerciseprogressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExerciseprogressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExerciseprogressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExerciseprogressMaxAggregateInputType
  }

  export type GetExerciseprogressAggregateType<T extends ExerciseprogressAggregateArgs> = {
        [P in keyof T & keyof AggregateExerciseprogress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExerciseprogress[P]>
      : GetScalarType<T[P], AggregateExerciseprogress[P]>
  }




  export type exerciseprogressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: exerciseprogressWhereInput
    orderBy?: exerciseprogressOrderByWithAggregationInput | exerciseprogressOrderByWithAggregationInput[]
    by: ExerciseprogressScalarFieldEnum[] | ExerciseprogressScalarFieldEnum
    having?: exerciseprogressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExerciseprogressCountAggregateInputType | true
    _avg?: ExerciseprogressAvgAggregateInputType
    _sum?: ExerciseprogressSumAggregateInputType
    _min?: ExerciseprogressMinAggregateInputType
    _max?: ExerciseprogressMaxAggregateInputType
  }

  export type ExerciseprogressGroupByOutputType = {
    ID: number
    UID: string
    EID: number
    Status: $Enums.exerciseprogress_Status | null
    UpdatedAt: Date | null
    _count: ExerciseprogressCountAggregateOutputType | null
    _avg: ExerciseprogressAvgAggregateOutputType | null
    _sum: ExerciseprogressSumAggregateOutputType | null
    _min: ExerciseprogressMinAggregateOutputType | null
    _max: ExerciseprogressMaxAggregateOutputType | null
  }

  type GetExerciseprogressGroupByPayload<T extends exerciseprogressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExerciseprogressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExerciseprogressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExerciseprogressGroupByOutputType[P]>
            : GetScalarType<T[P], ExerciseprogressGroupByOutputType[P]>
        }
      >
    >


  export type exerciseprogressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    UID?: boolean
    EID?: boolean
    Status?: boolean
    UpdatedAt?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
    exercise?: boolean | exerciseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exerciseprogress"]>



  export type exerciseprogressSelectScalar = {
    ID?: boolean
    UID?: boolean
    EID?: boolean
    Status?: boolean
    UpdatedAt?: boolean
  }

  export type exerciseprogressOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"ID" | "UID" | "EID" | "Status" | "UpdatedAt", ExtArgs["result"]["exerciseprogress"]>
  export type exerciseprogressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
    exercise?: boolean | exerciseDefaultArgs<ExtArgs>
  }

  export type $exerciseprogressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "exerciseprogress"
    objects: {
      user: Prisma.$userPayload<ExtArgs>
      exercise: Prisma.$exercisePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      ID: number
      UID: string
      EID: number
      Status: $Enums.exerciseprogress_Status | null
      UpdatedAt: Date | null
    }, ExtArgs["result"]["exerciseprogress"]>
    composites: {}
  }

  type exerciseprogressGetPayload<S extends boolean | null | undefined | exerciseprogressDefaultArgs> = $Result.GetResult<Prisma.$exerciseprogressPayload, S>

  type exerciseprogressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<exerciseprogressFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ExerciseprogressCountAggregateInputType | true
    }

  export interface exerciseprogressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['exerciseprogress'], meta: { name: 'exerciseprogress' } }
    /**
     * Find zero or one Exerciseprogress that matches the filter.
     * @param {exerciseprogressFindUniqueArgs} args - Arguments to find a Exerciseprogress
     * @example
     * // Get one Exerciseprogress
     * const exerciseprogress = await prisma.exerciseprogress.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends exerciseprogressFindUniqueArgs>(args: SelectSubset<T, exerciseprogressFindUniqueArgs<ExtArgs>>): Prisma__exerciseprogressClient<$Result.GetResult<Prisma.$exerciseprogressPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Exerciseprogress that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {exerciseprogressFindUniqueOrThrowArgs} args - Arguments to find a Exerciseprogress
     * @example
     * // Get one Exerciseprogress
     * const exerciseprogress = await prisma.exerciseprogress.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends exerciseprogressFindUniqueOrThrowArgs>(args: SelectSubset<T, exerciseprogressFindUniqueOrThrowArgs<ExtArgs>>): Prisma__exerciseprogressClient<$Result.GetResult<Prisma.$exerciseprogressPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Exerciseprogress that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exerciseprogressFindFirstArgs} args - Arguments to find a Exerciseprogress
     * @example
     * // Get one Exerciseprogress
     * const exerciseprogress = await prisma.exerciseprogress.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends exerciseprogressFindFirstArgs>(args?: SelectSubset<T, exerciseprogressFindFirstArgs<ExtArgs>>): Prisma__exerciseprogressClient<$Result.GetResult<Prisma.$exerciseprogressPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Exerciseprogress that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exerciseprogressFindFirstOrThrowArgs} args - Arguments to find a Exerciseprogress
     * @example
     * // Get one Exerciseprogress
     * const exerciseprogress = await prisma.exerciseprogress.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends exerciseprogressFindFirstOrThrowArgs>(args?: SelectSubset<T, exerciseprogressFindFirstOrThrowArgs<ExtArgs>>): Prisma__exerciseprogressClient<$Result.GetResult<Prisma.$exerciseprogressPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Exerciseprogresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exerciseprogressFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Exerciseprogresses
     * const exerciseprogresses = await prisma.exerciseprogress.findMany()
     * 
     * // Get first 10 Exerciseprogresses
     * const exerciseprogresses = await prisma.exerciseprogress.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const exerciseprogressWithIDOnly = await prisma.exerciseprogress.findMany({ select: { ID: true } })
     * 
     */
    findMany<T extends exerciseprogressFindManyArgs>(args?: SelectSubset<T, exerciseprogressFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$exerciseprogressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Exerciseprogress.
     * @param {exerciseprogressCreateArgs} args - Arguments to create a Exerciseprogress.
     * @example
     * // Create one Exerciseprogress
     * const Exerciseprogress = await prisma.exerciseprogress.create({
     *   data: {
     *     // ... data to create a Exerciseprogress
     *   }
     * })
     * 
     */
    create<T extends exerciseprogressCreateArgs>(args: SelectSubset<T, exerciseprogressCreateArgs<ExtArgs>>): Prisma__exerciseprogressClient<$Result.GetResult<Prisma.$exerciseprogressPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Exerciseprogresses.
     * @param {exerciseprogressCreateManyArgs} args - Arguments to create many Exerciseprogresses.
     * @example
     * // Create many Exerciseprogresses
     * const exerciseprogress = await prisma.exerciseprogress.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends exerciseprogressCreateManyArgs>(args?: SelectSubset<T, exerciseprogressCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Exerciseprogress.
     * @param {exerciseprogressDeleteArgs} args - Arguments to delete one Exerciseprogress.
     * @example
     * // Delete one Exerciseprogress
     * const Exerciseprogress = await prisma.exerciseprogress.delete({
     *   where: {
     *     // ... filter to delete one Exerciseprogress
     *   }
     * })
     * 
     */
    delete<T extends exerciseprogressDeleteArgs>(args: SelectSubset<T, exerciseprogressDeleteArgs<ExtArgs>>): Prisma__exerciseprogressClient<$Result.GetResult<Prisma.$exerciseprogressPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Exerciseprogress.
     * @param {exerciseprogressUpdateArgs} args - Arguments to update one Exerciseprogress.
     * @example
     * // Update one Exerciseprogress
     * const exerciseprogress = await prisma.exerciseprogress.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends exerciseprogressUpdateArgs>(args: SelectSubset<T, exerciseprogressUpdateArgs<ExtArgs>>): Prisma__exerciseprogressClient<$Result.GetResult<Prisma.$exerciseprogressPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Exerciseprogresses.
     * @param {exerciseprogressDeleteManyArgs} args - Arguments to filter Exerciseprogresses to delete.
     * @example
     * // Delete a few Exerciseprogresses
     * const { count } = await prisma.exerciseprogress.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends exerciseprogressDeleteManyArgs>(args?: SelectSubset<T, exerciseprogressDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exerciseprogresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exerciseprogressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Exerciseprogresses
     * const exerciseprogress = await prisma.exerciseprogress.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends exerciseprogressUpdateManyArgs>(args: SelectSubset<T, exerciseprogressUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Exerciseprogress.
     * @param {exerciseprogressUpsertArgs} args - Arguments to update or create a Exerciseprogress.
     * @example
     * // Update or create a Exerciseprogress
     * const exerciseprogress = await prisma.exerciseprogress.upsert({
     *   create: {
     *     // ... data to create a Exerciseprogress
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Exerciseprogress we want to update
     *   }
     * })
     */
    upsert<T extends exerciseprogressUpsertArgs>(args: SelectSubset<T, exerciseprogressUpsertArgs<ExtArgs>>): Prisma__exerciseprogressClient<$Result.GetResult<Prisma.$exerciseprogressPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Exerciseprogresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exerciseprogressCountArgs} args - Arguments to filter Exerciseprogresses to count.
     * @example
     * // Count the number of Exerciseprogresses
     * const count = await prisma.exerciseprogress.count({
     *   where: {
     *     // ... the filter for the Exerciseprogresses we want to count
     *   }
     * })
    **/
    count<T extends exerciseprogressCountArgs>(
      args?: Subset<T, exerciseprogressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExerciseprogressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Exerciseprogress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseprogressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExerciseprogressAggregateArgs>(args: Subset<T, ExerciseprogressAggregateArgs>): Prisma.PrismaPromise<GetExerciseprogressAggregateType<T>>

    /**
     * Group by Exerciseprogress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exerciseprogressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends exerciseprogressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: exerciseprogressGroupByArgs['orderBy'] }
        : { orderBy?: exerciseprogressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, exerciseprogressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExerciseprogressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the exerciseprogress model
   */
  readonly fields: exerciseprogressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for exerciseprogress.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__exerciseprogressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    exercise<T extends exerciseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, exerciseDefaultArgs<ExtArgs>>): Prisma__exerciseClient<$Result.GetResult<Prisma.$exercisePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the exerciseprogress model
   */
  interface exerciseprogressFieldRefs {
    readonly ID: FieldRef<"exerciseprogress", 'Int'>
    readonly UID: FieldRef<"exerciseprogress", 'String'>
    readonly EID: FieldRef<"exerciseprogress", 'Int'>
    readonly Status: FieldRef<"exerciseprogress", 'exerciseprogress_Status'>
    readonly UpdatedAt: FieldRef<"exerciseprogress", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * exerciseprogress findUnique
   */
  export type exerciseprogressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exerciseprogress
     */
    select?: exerciseprogressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exerciseprogress
     */
    omit?: exerciseprogressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciseprogressInclude<ExtArgs> | null
    /**
     * Filter, which exerciseprogress to fetch.
     */
    where: exerciseprogressWhereUniqueInput
  }

  /**
   * exerciseprogress findUniqueOrThrow
   */
  export type exerciseprogressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exerciseprogress
     */
    select?: exerciseprogressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exerciseprogress
     */
    omit?: exerciseprogressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciseprogressInclude<ExtArgs> | null
    /**
     * Filter, which exerciseprogress to fetch.
     */
    where: exerciseprogressWhereUniqueInput
  }

  /**
   * exerciseprogress findFirst
   */
  export type exerciseprogressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exerciseprogress
     */
    select?: exerciseprogressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exerciseprogress
     */
    omit?: exerciseprogressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciseprogressInclude<ExtArgs> | null
    /**
     * Filter, which exerciseprogress to fetch.
     */
    where?: exerciseprogressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of exerciseprogresses to fetch.
     */
    orderBy?: exerciseprogressOrderByWithRelationInput | exerciseprogressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for exerciseprogresses.
     */
    cursor?: exerciseprogressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` exerciseprogresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` exerciseprogresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of exerciseprogresses.
     */
    distinct?: ExerciseprogressScalarFieldEnum | ExerciseprogressScalarFieldEnum[]
  }

  /**
   * exerciseprogress findFirstOrThrow
   */
  export type exerciseprogressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exerciseprogress
     */
    select?: exerciseprogressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exerciseprogress
     */
    omit?: exerciseprogressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciseprogressInclude<ExtArgs> | null
    /**
     * Filter, which exerciseprogress to fetch.
     */
    where?: exerciseprogressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of exerciseprogresses to fetch.
     */
    orderBy?: exerciseprogressOrderByWithRelationInput | exerciseprogressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for exerciseprogresses.
     */
    cursor?: exerciseprogressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` exerciseprogresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` exerciseprogresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of exerciseprogresses.
     */
    distinct?: ExerciseprogressScalarFieldEnum | ExerciseprogressScalarFieldEnum[]
  }

  /**
   * exerciseprogress findMany
   */
  export type exerciseprogressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exerciseprogress
     */
    select?: exerciseprogressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exerciseprogress
     */
    omit?: exerciseprogressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciseprogressInclude<ExtArgs> | null
    /**
     * Filter, which exerciseprogresses to fetch.
     */
    where?: exerciseprogressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of exerciseprogresses to fetch.
     */
    orderBy?: exerciseprogressOrderByWithRelationInput | exerciseprogressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing exerciseprogresses.
     */
    cursor?: exerciseprogressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` exerciseprogresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` exerciseprogresses.
     */
    skip?: number
    distinct?: ExerciseprogressScalarFieldEnum | ExerciseprogressScalarFieldEnum[]
  }

  /**
   * exerciseprogress create
   */
  export type exerciseprogressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exerciseprogress
     */
    select?: exerciseprogressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exerciseprogress
     */
    omit?: exerciseprogressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciseprogressInclude<ExtArgs> | null
    /**
     * The data needed to create a exerciseprogress.
     */
    data: XOR<exerciseprogressCreateInput, exerciseprogressUncheckedCreateInput>
  }

  /**
   * exerciseprogress createMany
   */
  export type exerciseprogressCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many exerciseprogresses.
     */
    data: exerciseprogressCreateManyInput | exerciseprogressCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * exerciseprogress update
   */
  export type exerciseprogressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exerciseprogress
     */
    select?: exerciseprogressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exerciseprogress
     */
    omit?: exerciseprogressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciseprogressInclude<ExtArgs> | null
    /**
     * The data needed to update a exerciseprogress.
     */
    data: XOR<exerciseprogressUpdateInput, exerciseprogressUncheckedUpdateInput>
    /**
     * Choose, which exerciseprogress to update.
     */
    where: exerciseprogressWhereUniqueInput
  }

  /**
   * exerciseprogress updateMany
   */
  export type exerciseprogressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update exerciseprogresses.
     */
    data: XOR<exerciseprogressUpdateManyMutationInput, exerciseprogressUncheckedUpdateManyInput>
    /**
     * Filter which exerciseprogresses to update
     */
    where?: exerciseprogressWhereInput
    /**
     * Limit how many exerciseprogresses to update.
     */
    limit?: number
  }

  /**
   * exerciseprogress upsert
   */
  export type exerciseprogressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exerciseprogress
     */
    select?: exerciseprogressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exerciseprogress
     */
    omit?: exerciseprogressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciseprogressInclude<ExtArgs> | null
    /**
     * The filter to search for the exerciseprogress to update in case it exists.
     */
    where: exerciseprogressWhereUniqueInput
    /**
     * In case the exerciseprogress found by the `where` argument doesn't exist, create a new exerciseprogress with this data.
     */
    create: XOR<exerciseprogressCreateInput, exerciseprogressUncheckedCreateInput>
    /**
     * In case the exerciseprogress was found with the provided `where` argument, update it with this data.
     */
    update: XOR<exerciseprogressUpdateInput, exerciseprogressUncheckedUpdateInput>
  }

  /**
   * exerciseprogress delete
   */
  export type exerciseprogressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exerciseprogress
     */
    select?: exerciseprogressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exerciseprogress
     */
    omit?: exerciseprogressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciseprogressInclude<ExtArgs> | null
    /**
     * Filter which exerciseprogress to delete.
     */
    where: exerciseprogressWhereUniqueInput
  }

  /**
   * exerciseprogress deleteMany
   */
  export type exerciseprogressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which exerciseprogresses to delete
     */
    where?: exerciseprogressWhereInput
    /**
     * Limit how many exerciseprogresses to delete.
     */
    limit?: number
  }

  /**
   * exerciseprogress without action
   */
  export type exerciseprogressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exerciseprogress
     */
    select?: exerciseprogressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exerciseprogress
     */
    omit?: exerciseprogressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciseprogressInclude<ExtArgs> | null
  }


  /**
   * Model studyplanprogress
   */

  export type AggregateStudyplanprogress = {
    _count: StudyplanprogressCountAggregateOutputType | null
    _avg: StudyplanprogressAvgAggregateOutputType | null
    _sum: StudyplanprogressSumAggregateOutputType | null
    _min: StudyplanprogressMinAggregateOutputType | null
    _max: StudyplanprogressMaxAggregateOutputType | null
  }

  export type StudyplanprogressAvgAggregateOutputType = {
    SPPID: number | null
    SPID: number | null
  }

  export type StudyplanprogressSumAggregateOutputType = {
    SPPID: number | null
    SPID: number | null
  }

  export type StudyplanprogressMinAggregateOutputType = {
    SPPID: number | null
    SPID: number | null
    UID: string | null
    Status: $Enums.studyplanprogress_Status | null
    StartTime: Date | null
    EndTime: Date | null
  }

  export type StudyplanprogressMaxAggregateOutputType = {
    SPPID: number | null
    SPID: number | null
    UID: string | null
    Status: $Enums.studyplanprogress_Status | null
    StartTime: Date | null
    EndTime: Date | null
  }

  export type StudyplanprogressCountAggregateOutputType = {
    SPPID: number
    SPID: number
    UID: number
    Status: number
    StartTime: number
    EndTime: number
    _all: number
  }


  export type StudyplanprogressAvgAggregateInputType = {
    SPPID?: true
    SPID?: true
  }

  export type StudyplanprogressSumAggregateInputType = {
    SPPID?: true
    SPID?: true
  }

  export type StudyplanprogressMinAggregateInputType = {
    SPPID?: true
    SPID?: true
    UID?: true
    Status?: true
    StartTime?: true
    EndTime?: true
  }

  export type StudyplanprogressMaxAggregateInputType = {
    SPPID?: true
    SPID?: true
    UID?: true
    Status?: true
    StartTime?: true
    EndTime?: true
  }

  export type StudyplanprogressCountAggregateInputType = {
    SPPID?: true
    SPID?: true
    UID?: true
    Status?: true
    StartTime?: true
    EndTime?: true
    _all?: true
  }

  export type StudyplanprogressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which studyplanprogress to aggregate.
     */
    where?: studyplanprogressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of studyplanprogresses to fetch.
     */
    orderBy?: studyplanprogressOrderByWithRelationInput | studyplanprogressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: studyplanprogressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` studyplanprogresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` studyplanprogresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned studyplanprogresses
    **/
    _count?: true | StudyplanprogressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudyplanprogressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudyplanprogressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudyplanprogressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudyplanprogressMaxAggregateInputType
  }

  export type GetStudyplanprogressAggregateType<T extends StudyplanprogressAggregateArgs> = {
        [P in keyof T & keyof AggregateStudyplanprogress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudyplanprogress[P]>
      : GetScalarType<T[P], AggregateStudyplanprogress[P]>
  }




  export type studyplanprogressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: studyplanprogressWhereInput
    orderBy?: studyplanprogressOrderByWithAggregationInput | studyplanprogressOrderByWithAggregationInput[]
    by: StudyplanprogressScalarFieldEnum[] | StudyplanprogressScalarFieldEnum
    having?: studyplanprogressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudyplanprogressCountAggregateInputType | true
    _avg?: StudyplanprogressAvgAggregateInputType
    _sum?: StudyplanprogressSumAggregateInputType
    _min?: StudyplanprogressMinAggregateInputType
    _max?: StudyplanprogressMaxAggregateInputType
  }

  export type StudyplanprogressGroupByOutputType = {
    SPPID: number
    SPID: number
    UID: string
    Status: $Enums.studyplanprogress_Status
    StartTime: Date | null
    EndTime: Date | null
    _count: StudyplanprogressCountAggregateOutputType | null
    _avg: StudyplanprogressAvgAggregateOutputType | null
    _sum: StudyplanprogressSumAggregateOutputType | null
    _min: StudyplanprogressMinAggregateOutputType | null
    _max: StudyplanprogressMaxAggregateOutputType | null
  }

  type GetStudyplanprogressGroupByPayload<T extends studyplanprogressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudyplanprogressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudyplanprogressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudyplanprogressGroupByOutputType[P]>
            : GetScalarType<T[P], StudyplanprogressGroupByOutputType[P]>
        }
      >
    >


  export type studyplanprogressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    SPPID?: boolean
    SPID?: boolean
    UID?: boolean
    Status?: boolean
    StartTime?: boolean
    EndTime?: boolean
    studyplan?: boolean | studyplanDefaultArgs<ExtArgs>
    user?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studyplanprogress"]>



  export type studyplanprogressSelectScalar = {
    SPPID?: boolean
    SPID?: boolean
    UID?: boolean
    Status?: boolean
    StartTime?: boolean
    EndTime?: boolean
  }

  export type studyplanprogressOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"SPPID" | "SPID" | "UID" | "Status" | "StartTime" | "EndTime", ExtArgs["result"]["studyplanprogress"]>
  export type studyplanprogressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    studyplan?: boolean | studyplanDefaultArgs<ExtArgs>
    user?: boolean | userDefaultArgs<ExtArgs>
  }

  export type $studyplanprogressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "studyplanprogress"
    objects: {
      studyplan: Prisma.$studyplanPayload<ExtArgs>
      user: Prisma.$userPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      SPPID: number
      SPID: number
      UID: string
      Status: $Enums.studyplanprogress_Status
      StartTime: Date | null
      EndTime: Date | null
    }, ExtArgs["result"]["studyplanprogress"]>
    composites: {}
  }

  type studyplanprogressGetPayload<S extends boolean | null | undefined | studyplanprogressDefaultArgs> = $Result.GetResult<Prisma.$studyplanprogressPayload, S>

  type studyplanprogressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<studyplanprogressFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudyplanprogressCountAggregateInputType | true
    }

  export interface studyplanprogressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['studyplanprogress'], meta: { name: 'studyplanprogress' } }
    /**
     * Find zero or one Studyplanprogress that matches the filter.
     * @param {studyplanprogressFindUniqueArgs} args - Arguments to find a Studyplanprogress
     * @example
     * // Get one Studyplanprogress
     * const studyplanprogress = await prisma.studyplanprogress.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends studyplanprogressFindUniqueArgs>(args: SelectSubset<T, studyplanprogressFindUniqueArgs<ExtArgs>>): Prisma__studyplanprogressClient<$Result.GetResult<Prisma.$studyplanprogressPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Studyplanprogress that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {studyplanprogressFindUniqueOrThrowArgs} args - Arguments to find a Studyplanprogress
     * @example
     * // Get one Studyplanprogress
     * const studyplanprogress = await prisma.studyplanprogress.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends studyplanprogressFindUniqueOrThrowArgs>(args: SelectSubset<T, studyplanprogressFindUniqueOrThrowArgs<ExtArgs>>): Prisma__studyplanprogressClient<$Result.GetResult<Prisma.$studyplanprogressPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Studyplanprogress that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studyplanprogressFindFirstArgs} args - Arguments to find a Studyplanprogress
     * @example
     * // Get one Studyplanprogress
     * const studyplanprogress = await prisma.studyplanprogress.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends studyplanprogressFindFirstArgs>(args?: SelectSubset<T, studyplanprogressFindFirstArgs<ExtArgs>>): Prisma__studyplanprogressClient<$Result.GetResult<Prisma.$studyplanprogressPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Studyplanprogress that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studyplanprogressFindFirstOrThrowArgs} args - Arguments to find a Studyplanprogress
     * @example
     * // Get one Studyplanprogress
     * const studyplanprogress = await prisma.studyplanprogress.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends studyplanprogressFindFirstOrThrowArgs>(args?: SelectSubset<T, studyplanprogressFindFirstOrThrowArgs<ExtArgs>>): Prisma__studyplanprogressClient<$Result.GetResult<Prisma.$studyplanprogressPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Studyplanprogresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studyplanprogressFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Studyplanprogresses
     * const studyplanprogresses = await prisma.studyplanprogress.findMany()
     * 
     * // Get first 10 Studyplanprogresses
     * const studyplanprogresses = await prisma.studyplanprogress.findMany({ take: 10 })
     * 
     * // Only select the `SPPID`
     * const studyplanprogressWithSPPIDOnly = await prisma.studyplanprogress.findMany({ select: { SPPID: true } })
     * 
     */
    findMany<T extends studyplanprogressFindManyArgs>(args?: SelectSubset<T, studyplanprogressFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$studyplanprogressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Studyplanprogress.
     * @param {studyplanprogressCreateArgs} args - Arguments to create a Studyplanprogress.
     * @example
     * // Create one Studyplanprogress
     * const Studyplanprogress = await prisma.studyplanprogress.create({
     *   data: {
     *     // ... data to create a Studyplanprogress
     *   }
     * })
     * 
     */
    create<T extends studyplanprogressCreateArgs>(args: SelectSubset<T, studyplanprogressCreateArgs<ExtArgs>>): Prisma__studyplanprogressClient<$Result.GetResult<Prisma.$studyplanprogressPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Studyplanprogresses.
     * @param {studyplanprogressCreateManyArgs} args - Arguments to create many Studyplanprogresses.
     * @example
     * // Create many Studyplanprogresses
     * const studyplanprogress = await prisma.studyplanprogress.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends studyplanprogressCreateManyArgs>(args?: SelectSubset<T, studyplanprogressCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Studyplanprogress.
     * @param {studyplanprogressDeleteArgs} args - Arguments to delete one Studyplanprogress.
     * @example
     * // Delete one Studyplanprogress
     * const Studyplanprogress = await prisma.studyplanprogress.delete({
     *   where: {
     *     // ... filter to delete one Studyplanprogress
     *   }
     * })
     * 
     */
    delete<T extends studyplanprogressDeleteArgs>(args: SelectSubset<T, studyplanprogressDeleteArgs<ExtArgs>>): Prisma__studyplanprogressClient<$Result.GetResult<Prisma.$studyplanprogressPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Studyplanprogress.
     * @param {studyplanprogressUpdateArgs} args - Arguments to update one Studyplanprogress.
     * @example
     * // Update one Studyplanprogress
     * const studyplanprogress = await prisma.studyplanprogress.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends studyplanprogressUpdateArgs>(args: SelectSubset<T, studyplanprogressUpdateArgs<ExtArgs>>): Prisma__studyplanprogressClient<$Result.GetResult<Prisma.$studyplanprogressPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Studyplanprogresses.
     * @param {studyplanprogressDeleteManyArgs} args - Arguments to filter Studyplanprogresses to delete.
     * @example
     * // Delete a few Studyplanprogresses
     * const { count } = await prisma.studyplanprogress.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends studyplanprogressDeleteManyArgs>(args?: SelectSubset<T, studyplanprogressDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Studyplanprogresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studyplanprogressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Studyplanprogresses
     * const studyplanprogress = await prisma.studyplanprogress.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends studyplanprogressUpdateManyArgs>(args: SelectSubset<T, studyplanprogressUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Studyplanprogress.
     * @param {studyplanprogressUpsertArgs} args - Arguments to update or create a Studyplanprogress.
     * @example
     * // Update or create a Studyplanprogress
     * const studyplanprogress = await prisma.studyplanprogress.upsert({
     *   create: {
     *     // ... data to create a Studyplanprogress
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Studyplanprogress we want to update
     *   }
     * })
     */
    upsert<T extends studyplanprogressUpsertArgs>(args: SelectSubset<T, studyplanprogressUpsertArgs<ExtArgs>>): Prisma__studyplanprogressClient<$Result.GetResult<Prisma.$studyplanprogressPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Studyplanprogresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studyplanprogressCountArgs} args - Arguments to filter Studyplanprogresses to count.
     * @example
     * // Count the number of Studyplanprogresses
     * const count = await prisma.studyplanprogress.count({
     *   where: {
     *     // ... the filter for the Studyplanprogresses we want to count
     *   }
     * })
    **/
    count<T extends studyplanprogressCountArgs>(
      args?: Subset<T, studyplanprogressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudyplanprogressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Studyplanprogress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyplanprogressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudyplanprogressAggregateArgs>(args: Subset<T, StudyplanprogressAggregateArgs>): Prisma.PrismaPromise<GetStudyplanprogressAggregateType<T>>

    /**
     * Group by Studyplanprogress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studyplanprogressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends studyplanprogressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: studyplanprogressGroupByArgs['orderBy'] }
        : { orderBy?: studyplanprogressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, studyplanprogressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudyplanprogressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the studyplanprogress model
   */
  readonly fields: studyplanprogressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for studyplanprogress.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__studyplanprogressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    studyplan<T extends studyplanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, studyplanDefaultArgs<ExtArgs>>): Prisma__studyplanClient<$Result.GetResult<Prisma.$studyplanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the studyplanprogress model
   */
  interface studyplanprogressFieldRefs {
    readonly SPPID: FieldRef<"studyplanprogress", 'Int'>
    readonly SPID: FieldRef<"studyplanprogress", 'Int'>
    readonly UID: FieldRef<"studyplanprogress", 'String'>
    readonly Status: FieldRef<"studyplanprogress", 'studyplanprogress_Status'>
    readonly StartTime: FieldRef<"studyplanprogress", 'DateTime'>
    readonly EndTime: FieldRef<"studyplanprogress", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * studyplanprogress findUnique
   */
  export type studyplanprogressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studyplanprogress
     */
    select?: studyplanprogressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the studyplanprogress
     */
    omit?: studyplanprogressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studyplanprogressInclude<ExtArgs> | null
    /**
     * Filter, which studyplanprogress to fetch.
     */
    where: studyplanprogressWhereUniqueInput
  }

  /**
   * studyplanprogress findUniqueOrThrow
   */
  export type studyplanprogressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studyplanprogress
     */
    select?: studyplanprogressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the studyplanprogress
     */
    omit?: studyplanprogressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studyplanprogressInclude<ExtArgs> | null
    /**
     * Filter, which studyplanprogress to fetch.
     */
    where: studyplanprogressWhereUniqueInput
  }

  /**
   * studyplanprogress findFirst
   */
  export type studyplanprogressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studyplanprogress
     */
    select?: studyplanprogressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the studyplanprogress
     */
    omit?: studyplanprogressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studyplanprogressInclude<ExtArgs> | null
    /**
     * Filter, which studyplanprogress to fetch.
     */
    where?: studyplanprogressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of studyplanprogresses to fetch.
     */
    orderBy?: studyplanprogressOrderByWithRelationInput | studyplanprogressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for studyplanprogresses.
     */
    cursor?: studyplanprogressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` studyplanprogresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` studyplanprogresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of studyplanprogresses.
     */
    distinct?: StudyplanprogressScalarFieldEnum | StudyplanprogressScalarFieldEnum[]
  }

  /**
   * studyplanprogress findFirstOrThrow
   */
  export type studyplanprogressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studyplanprogress
     */
    select?: studyplanprogressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the studyplanprogress
     */
    omit?: studyplanprogressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studyplanprogressInclude<ExtArgs> | null
    /**
     * Filter, which studyplanprogress to fetch.
     */
    where?: studyplanprogressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of studyplanprogresses to fetch.
     */
    orderBy?: studyplanprogressOrderByWithRelationInput | studyplanprogressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for studyplanprogresses.
     */
    cursor?: studyplanprogressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` studyplanprogresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` studyplanprogresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of studyplanprogresses.
     */
    distinct?: StudyplanprogressScalarFieldEnum | StudyplanprogressScalarFieldEnum[]
  }

  /**
   * studyplanprogress findMany
   */
  export type studyplanprogressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studyplanprogress
     */
    select?: studyplanprogressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the studyplanprogress
     */
    omit?: studyplanprogressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studyplanprogressInclude<ExtArgs> | null
    /**
     * Filter, which studyplanprogresses to fetch.
     */
    where?: studyplanprogressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of studyplanprogresses to fetch.
     */
    orderBy?: studyplanprogressOrderByWithRelationInput | studyplanprogressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing studyplanprogresses.
     */
    cursor?: studyplanprogressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` studyplanprogresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` studyplanprogresses.
     */
    skip?: number
    distinct?: StudyplanprogressScalarFieldEnum | StudyplanprogressScalarFieldEnum[]
  }

  /**
   * studyplanprogress create
   */
  export type studyplanprogressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studyplanprogress
     */
    select?: studyplanprogressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the studyplanprogress
     */
    omit?: studyplanprogressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studyplanprogressInclude<ExtArgs> | null
    /**
     * The data needed to create a studyplanprogress.
     */
    data: XOR<studyplanprogressCreateInput, studyplanprogressUncheckedCreateInput>
  }

  /**
   * studyplanprogress createMany
   */
  export type studyplanprogressCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many studyplanprogresses.
     */
    data: studyplanprogressCreateManyInput | studyplanprogressCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * studyplanprogress update
   */
  export type studyplanprogressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studyplanprogress
     */
    select?: studyplanprogressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the studyplanprogress
     */
    omit?: studyplanprogressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studyplanprogressInclude<ExtArgs> | null
    /**
     * The data needed to update a studyplanprogress.
     */
    data: XOR<studyplanprogressUpdateInput, studyplanprogressUncheckedUpdateInput>
    /**
     * Choose, which studyplanprogress to update.
     */
    where: studyplanprogressWhereUniqueInput
  }

  /**
   * studyplanprogress updateMany
   */
  export type studyplanprogressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update studyplanprogresses.
     */
    data: XOR<studyplanprogressUpdateManyMutationInput, studyplanprogressUncheckedUpdateManyInput>
    /**
     * Filter which studyplanprogresses to update
     */
    where?: studyplanprogressWhereInput
    /**
     * Limit how many studyplanprogresses to update.
     */
    limit?: number
  }

  /**
   * studyplanprogress upsert
   */
  export type studyplanprogressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studyplanprogress
     */
    select?: studyplanprogressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the studyplanprogress
     */
    omit?: studyplanprogressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studyplanprogressInclude<ExtArgs> | null
    /**
     * The filter to search for the studyplanprogress to update in case it exists.
     */
    where: studyplanprogressWhereUniqueInput
    /**
     * In case the studyplanprogress found by the `where` argument doesn't exist, create a new studyplanprogress with this data.
     */
    create: XOR<studyplanprogressCreateInput, studyplanprogressUncheckedCreateInput>
    /**
     * In case the studyplanprogress was found with the provided `where` argument, update it with this data.
     */
    update: XOR<studyplanprogressUpdateInput, studyplanprogressUncheckedUpdateInput>
  }

  /**
   * studyplanprogress delete
   */
  export type studyplanprogressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studyplanprogress
     */
    select?: studyplanprogressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the studyplanprogress
     */
    omit?: studyplanprogressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studyplanprogressInclude<ExtArgs> | null
    /**
     * Filter which studyplanprogress to delete.
     */
    where: studyplanprogressWhereUniqueInput
  }

  /**
   * studyplanprogress deleteMany
   */
  export type studyplanprogressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which studyplanprogresses to delete
     */
    where?: studyplanprogressWhereInput
    /**
     * Limit how many studyplanprogresses to delete.
     */
    limit?: number
  }

  /**
   * studyplanprogress without action
   */
  export type studyplanprogressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studyplanprogress
     */
    select?: studyplanprogressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the studyplanprogress
     */
    omit?: studyplanprogressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studyplanprogressInclude<ExtArgs> | null
  }


  /**
   * Model list
   */

  export type AggregateList = {
    _count: ListCountAggregateOutputType | null
    _avg: ListAvgAggregateOutputType | null
    _sum: ListSumAggregateOutputType | null
    _min: ListMinAggregateOutputType | null
    _max: ListMaxAggregateOutputType | null
  }

  export type ListAvgAggregateOutputType = {
    LID: number | null
  }

  export type ListSumAggregateOutputType = {
    LID: number | null
  }

  export type ListMinAggregateOutputType = {
    LID: number | null
    UID: string | null
    Name: string | null
    Description: string | null
    CreatedAt: Date | null
  }

  export type ListMaxAggregateOutputType = {
    LID: number | null
    UID: string | null
    Name: string | null
    Description: string | null
    CreatedAt: Date | null
  }

  export type ListCountAggregateOutputType = {
    LID: number
    UID: number
    Name: number
    Description: number
    CreatedAt: number
    _all: number
  }


  export type ListAvgAggregateInputType = {
    LID?: true
  }

  export type ListSumAggregateInputType = {
    LID?: true
  }

  export type ListMinAggregateInputType = {
    LID?: true
    UID?: true
    Name?: true
    Description?: true
    CreatedAt?: true
  }

  export type ListMaxAggregateInputType = {
    LID?: true
    UID?: true
    Name?: true
    Description?: true
    CreatedAt?: true
  }

  export type ListCountAggregateInputType = {
    LID?: true
    UID?: true
    Name?: true
    Description?: true
    CreatedAt?: true
    _all?: true
  }

  export type ListAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which list to aggregate.
     */
    where?: listWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lists to fetch.
     */
    orderBy?: listOrderByWithRelationInput | listOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: listWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned lists
    **/
    _count?: true | ListCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ListAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ListSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ListMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ListMaxAggregateInputType
  }

  export type GetListAggregateType<T extends ListAggregateArgs> = {
        [P in keyof T & keyof AggregateList]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateList[P]>
      : GetScalarType<T[P], AggregateList[P]>
  }




  export type listGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: listWhereInput
    orderBy?: listOrderByWithAggregationInput | listOrderByWithAggregationInput[]
    by: ListScalarFieldEnum[] | ListScalarFieldEnum
    having?: listScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ListCountAggregateInputType | true
    _avg?: ListAvgAggregateInputType
    _sum?: ListSumAggregateInputType
    _min?: ListMinAggregateInputType
    _max?: ListMaxAggregateInputType
  }

  export type ListGroupByOutputType = {
    LID: number
    UID: string
    Name: string
    Description: string | null
    CreatedAt: Date | null
    _count: ListCountAggregateOutputType | null
    _avg: ListAvgAggregateOutputType | null
    _sum: ListSumAggregateOutputType | null
    _min: ListMinAggregateOutputType | null
    _max: ListMaxAggregateOutputType | null
  }

  type GetListGroupByPayload<T extends listGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ListGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ListGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ListGroupByOutputType[P]>
            : GetScalarType<T[P], ListGroupByOutputType[P]>
        }
      >
    >


  export type listSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    LID?: boolean
    UID?: boolean
    Name?: boolean
    Description?: boolean
    CreatedAt?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
    listitem?: boolean | list$listitemArgs<ExtArgs>
    _count?: boolean | ListCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["list"]>



  export type listSelectScalar = {
    LID?: boolean
    UID?: boolean
    Name?: boolean
    Description?: boolean
    CreatedAt?: boolean
  }

  export type listOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"LID" | "UID" | "Name" | "Description" | "CreatedAt", ExtArgs["result"]["list"]>
  export type listInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
    listitem?: boolean | list$listitemArgs<ExtArgs>
    _count?: boolean | ListCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $listPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "list"
    objects: {
      user: Prisma.$userPayload<ExtArgs>
      listitem: Prisma.$listitemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      LID: number
      UID: string
      Name: string
      Description: string | null
      CreatedAt: Date | null
    }, ExtArgs["result"]["list"]>
    composites: {}
  }

  type listGetPayload<S extends boolean | null | undefined | listDefaultArgs> = $Result.GetResult<Prisma.$listPayload, S>

  type listCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<listFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ListCountAggregateInputType | true
    }

  export interface listDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['list'], meta: { name: 'list' } }
    /**
     * Find zero or one List that matches the filter.
     * @param {listFindUniqueArgs} args - Arguments to find a List
     * @example
     * // Get one List
     * const list = await prisma.list.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends listFindUniqueArgs>(args: SelectSubset<T, listFindUniqueArgs<ExtArgs>>): Prisma__listClient<$Result.GetResult<Prisma.$listPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one List that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {listFindUniqueOrThrowArgs} args - Arguments to find a List
     * @example
     * // Get one List
     * const list = await prisma.list.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends listFindUniqueOrThrowArgs>(args: SelectSubset<T, listFindUniqueOrThrowArgs<ExtArgs>>): Prisma__listClient<$Result.GetResult<Prisma.$listPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first List that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {listFindFirstArgs} args - Arguments to find a List
     * @example
     * // Get one List
     * const list = await prisma.list.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends listFindFirstArgs>(args?: SelectSubset<T, listFindFirstArgs<ExtArgs>>): Prisma__listClient<$Result.GetResult<Prisma.$listPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first List that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {listFindFirstOrThrowArgs} args - Arguments to find a List
     * @example
     * // Get one List
     * const list = await prisma.list.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends listFindFirstOrThrowArgs>(args?: SelectSubset<T, listFindFirstOrThrowArgs<ExtArgs>>): Prisma__listClient<$Result.GetResult<Prisma.$listPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Lists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {listFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lists
     * const lists = await prisma.list.findMany()
     * 
     * // Get first 10 Lists
     * const lists = await prisma.list.findMany({ take: 10 })
     * 
     * // Only select the `LID`
     * const listWithLIDOnly = await prisma.list.findMany({ select: { LID: true } })
     * 
     */
    findMany<T extends listFindManyArgs>(args?: SelectSubset<T, listFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$listPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a List.
     * @param {listCreateArgs} args - Arguments to create a List.
     * @example
     * // Create one List
     * const List = await prisma.list.create({
     *   data: {
     *     // ... data to create a List
     *   }
     * })
     * 
     */
    create<T extends listCreateArgs>(args: SelectSubset<T, listCreateArgs<ExtArgs>>): Prisma__listClient<$Result.GetResult<Prisma.$listPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Lists.
     * @param {listCreateManyArgs} args - Arguments to create many Lists.
     * @example
     * // Create many Lists
     * const list = await prisma.list.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends listCreateManyArgs>(args?: SelectSubset<T, listCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a List.
     * @param {listDeleteArgs} args - Arguments to delete one List.
     * @example
     * // Delete one List
     * const List = await prisma.list.delete({
     *   where: {
     *     // ... filter to delete one List
     *   }
     * })
     * 
     */
    delete<T extends listDeleteArgs>(args: SelectSubset<T, listDeleteArgs<ExtArgs>>): Prisma__listClient<$Result.GetResult<Prisma.$listPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one List.
     * @param {listUpdateArgs} args - Arguments to update one List.
     * @example
     * // Update one List
     * const list = await prisma.list.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends listUpdateArgs>(args: SelectSubset<T, listUpdateArgs<ExtArgs>>): Prisma__listClient<$Result.GetResult<Prisma.$listPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Lists.
     * @param {listDeleteManyArgs} args - Arguments to filter Lists to delete.
     * @example
     * // Delete a few Lists
     * const { count } = await prisma.list.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends listDeleteManyArgs>(args?: SelectSubset<T, listDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {listUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lists
     * const list = await prisma.list.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends listUpdateManyArgs>(args: SelectSubset<T, listUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one List.
     * @param {listUpsertArgs} args - Arguments to update or create a List.
     * @example
     * // Update or create a List
     * const list = await prisma.list.upsert({
     *   create: {
     *     // ... data to create a List
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the List we want to update
     *   }
     * })
     */
    upsert<T extends listUpsertArgs>(args: SelectSubset<T, listUpsertArgs<ExtArgs>>): Prisma__listClient<$Result.GetResult<Prisma.$listPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Lists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {listCountArgs} args - Arguments to filter Lists to count.
     * @example
     * // Count the number of Lists
     * const count = await prisma.list.count({
     *   where: {
     *     // ... the filter for the Lists we want to count
     *   }
     * })
    **/
    count<T extends listCountArgs>(
      args?: Subset<T, listCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ListCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a List.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ListAggregateArgs>(args: Subset<T, ListAggregateArgs>): Prisma.PrismaPromise<GetListAggregateType<T>>

    /**
     * Group by List.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {listGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends listGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: listGroupByArgs['orderBy'] }
        : { orderBy?: listGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, listGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetListGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the list model
   */
  readonly fields: listFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for list.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__listClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    listitem<T extends list$listitemArgs<ExtArgs> = {}>(args?: Subset<T, list$listitemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$listitemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the list model
   */
  interface listFieldRefs {
    readonly LID: FieldRef<"list", 'Int'>
    readonly UID: FieldRef<"list", 'String'>
    readonly Name: FieldRef<"list", 'String'>
    readonly Description: FieldRef<"list", 'String'>
    readonly CreatedAt: FieldRef<"list", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * list findUnique
   */
  export type listFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the list
     */
    select?: listSelect<ExtArgs> | null
    /**
     * Omit specific fields from the list
     */
    omit?: listOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: listInclude<ExtArgs> | null
    /**
     * Filter, which list to fetch.
     */
    where: listWhereUniqueInput
  }

  /**
   * list findUniqueOrThrow
   */
  export type listFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the list
     */
    select?: listSelect<ExtArgs> | null
    /**
     * Omit specific fields from the list
     */
    omit?: listOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: listInclude<ExtArgs> | null
    /**
     * Filter, which list to fetch.
     */
    where: listWhereUniqueInput
  }

  /**
   * list findFirst
   */
  export type listFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the list
     */
    select?: listSelect<ExtArgs> | null
    /**
     * Omit specific fields from the list
     */
    omit?: listOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: listInclude<ExtArgs> | null
    /**
     * Filter, which list to fetch.
     */
    where?: listWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lists to fetch.
     */
    orderBy?: listOrderByWithRelationInput | listOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for lists.
     */
    cursor?: listWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of lists.
     */
    distinct?: ListScalarFieldEnum | ListScalarFieldEnum[]
  }

  /**
   * list findFirstOrThrow
   */
  export type listFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the list
     */
    select?: listSelect<ExtArgs> | null
    /**
     * Omit specific fields from the list
     */
    omit?: listOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: listInclude<ExtArgs> | null
    /**
     * Filter, which list to fetch.
     */
    where?: listWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lists to fetch.
     */
    orderBy?: listOrderByWithRelationInput | listOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for lists.
     */
    cursor?: listWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of lists.
     */
    distinct?: ListScalarFieldEnum | ListScalarFieldEnum[]
  }

  /**
   * list findMany
   */
  export type listFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the list
     */
    select?: listSelect<ExtArgs> | null
    /**
     * Omit specific fields from the list
     */
    omit?: listOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: listInclude<ExtArgs> | null
    /**
     * Filter, which lists to fetch.
     */
    where?: listWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lists to fetch.
     */
    orderBy?: listOrderByWithRelationInput | listOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing lists.
     */
    cursor?: listWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lists.
     */
    skip?: number
    distinct?: ListScalarFieldEnum | ListScalarFieldEnum[]
  }

  /**
   * list create
   */
  export type listCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the list
     */
    select?: listSelect<ExtArgs> | null
    /**
     * Omit specific fields from the list
     */
    omit?: listOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: listInclude<ExtArgs> | null
    /**
     * The data needed to create a list.
     */
    data: XOR<listCreateInput, listUncheckedCreateInput>
  }

  /**
   * list createMany
   */
  export type listCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many lists.
     */
    data: listCreateManyInput | listCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * list update
   */
  export type listUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the list
     */
    select?: listSelect<ExtArgs> | null
    /**
     * Omit specific fields from the list
     */
    omit?: listOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: listInclude<ExtArgs> | null
    /**
     * The data needed to update a list.
     */
    data: XOR<listUpdateInput, listUncheckedUpdateInput>
    /**
     * Choose, which list to update.
     */
    where: listWhereUniqueInput
  }

  /**
   * list updateMany
   */
  export type listUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update lists.
     */
    data: XOR<listUpdateManyMutationInput, listUncheckedUpdateManyInput>
    /**
     * Filter which lists to update
     */
    where?: listWhereInput
    /**
     * Limit how many lists to update.
     */
    limit?: number
  }

  /**
   * list upsert
   */
  export type listUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the list
     */
    select?: listSelect<ExtArgs> | null
    /**
     * Omit specific fields from the list
     */
    omit?: listOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: listInclude<ExtArgs> | null
    /**
     * The filter to search for the list to update in case it exists.
     */
    where: listWhereUniqueInput
    /**
     * In case the list found by the `where` argument doesn't exist, create a new list with this data.
     */
    create: XOR<listCreateInput, listUncheckedCreateInput>
    /**
     * In case the list was found with the provided `where` argument, update it with this data.
     */
    update: XOR<listUpdateInput, listUncheckedUpdateInput>
  }

  /**
   * list delete
   */
  export type listDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the list
     */
    select?: listSelect<ExtArgs> | null
    /**
     * Omit specific fields from the list
     */
    omit?: listOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: listInclude<ExtArgs> | null
    /**
     * Filter which list to delete.
     */
    where: listWhereUniqueInput
  }

  /**
   * list deleteMany
   */
  export type listDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which lists to delete
     */
    where?: listWhereInput
    /**
     * Limit how many lists to delete.
     */
    limit?: number
  }

  /**
   * list.listitem
   */
  export type list$listitemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the listitem
     */
    select?: listitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the listitem
     */
    omit?: listitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: listitemInclude<ExtArgs> | null
    where?: listitemWhereInput
    orderBy?: listitemOrderByWithRelationInput | listitemOrderByWithRelationInput[]
    cursor?: listitemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ListitemScalarFieldEnum | ListitemScalarFieldEnum[]
  }

  /**
   * list without action
   */
  export type listDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the list
     */
    select?: listSelect<ExtArgs> | null
    /**
     * Omit specific fields from the list
     */
    omit?: listOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: listInclude<ExtArgs> | null
  }


  /**
   * Model listitem
   */

  export type AggregateListitem = {
    _count: ListitemCountAggregateOutputType | null
    _avg: ListitemAvgAggregateOutputType | null
    _sum: ListitemSumAggregateOutputType | null
    _min: ListitemMinAggregateOutputType | null
    _max: ListitemMaxAggregateOutputType | null
  }

  export type ListitemAvgAggregateOutputType = {
    LID: number | null
    EID: number | null
  }

  export type ListitemSumAggregateOutputType = {
    LID: number | null
    EID: number | null
  }

  export type ListitemMinAggregateOutputType = {
    LID: number | null
    EID: number | null
  }

  export type ListitemMaxAggregateOutputType = {
    LID: number | null
    EID: number | null
  }

  export type ListitemCountAggregateOutputType = {
    LID: number
    EID: number
    _all: number
  }


  export type ListitemAvgAggregateInputType = {
    LID?: true
    EID?: true
  }

  export type ListitemSumAggregateInputType = {
    LID?: true
    EID?: true
  }

  export type ListitemMinAggregateInputType = {
    LID?: true
    EID?: true
  }

  export type ListitemMaxAggregateInputType = {
    LID?: true
    EID?: true
  }

  export type ListitemCountAggregateInputType = {
    LID?: true
    EID?: true
    _all?: true
  }

  export type ListitemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which listitem to aggregate.
     */
    where?: listitemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of listitems to fetch.
     */
    orderBy?: listitemOrderByWithRelationInput | listitemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: listitemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` listitems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` listitems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned listitems
    **/
    _count?: true | ListitemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ListitemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ListitemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ListitemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ListitemMaxAggregateInputType
  }

  export type GetListitemAggregateType<T extends ListitemAggregateArgs> = {
        [P in keyof T & keyof AggregateListitem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateListitem[P]>
      : GetScalarType<T[P], AggregateListitem[P]>
  }




  export type listitemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: listitemWhereInput
    orderBy?: listitemOrderByWithAggregationInput | listitemOrderByWithAggregationInput[]
    by: ListitemScalarFieldEnum[] | ListitemScalarFieldEnum
    having?: listitemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ListitemCountAggregateInputType | true
    _avg?: ListitemAvgAggregateInputType
    _sum?: ListitemSumAggregateInputType
    _min?: ListitemMinAggregateInputType
    _max?: ListitemMaxAggregateInputType
  }

  export type ListitemGroupByOutputType = {
    LID: number
    EID: number
    _count: ListitemCountAggregateOutputType | null
    _avg: ListitemAvgAggregateOutputType | null
    _sum: ListitemSumAggregateOutputType | null
    _min: ListitemMinAggregateOutputType | null
    _max: ListitemMaxAggregateOutputType | null
  }

  type GetListitemGroupByPayload<T extends listitemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ListitemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ListitemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ListitemGroupByOutputType[P]>
            : GetScalarType<T[P], ListitemGroupByOutputType[P]>
        }
      >
    >


  export type listitemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    LID?: boolean
    EID?: boolean
    list?: boolean | listDefaultArgs<ExtArgs>
    exercise?: boolean | exerciseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["listitem"]>



  export type listitemSelectScalar = {
    LID?: boolean
    EID?: boolean
  }

  export type listitemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"LID" | "EID", ExtArgs["result"]["listitem"]>
  export type listitemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    list?: boolean | listDefaultArgs<ExtArgs>
    exercise?: boolean | exerciseDefaultArgs<ExtArgs>
  }

  export type $listitemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "listitem"
    objects: {
      list: Prisma.$listPayload<ExtArgs>
      exercise: Prisma.$exercisePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      LID: number
      EID: number
    }, ExtArgs["result"]["listitem"]>
    composites: {}
  }

  type listitemGetPayload<S extends boolean | null | undefined | listitemDefaultArgs> = $Result.GetResult<Prisma.$listitemPayload, S>

  type listitemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<listitemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ListitemCountAggregateInputType | true
    }

  export interface listitemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['listitem'], meta: { name: 'listitem' } }
    /**
     * Find zero or one Listitem that matches the filter.
     * @param {listitemFindUniqueArgs} args - Arguments to find a Listitem
     * @example
     * // Get one Listitem
     * const listitem = await prisma.listitem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends listitemFindUniqueArgs>(args: SelectSubset<T, listitemFindUniqueArgs<ExtArgs>>): Prisma__listitemClient<$Result.GetResult<Prisma.$listitemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Listitem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {listitemFindUniqueOrThrowArgs} args - Arguments to find a Listitem
     * @example
     * // Get one Listitem
     * const listitem = await prisma.listitem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends listitemFindUniqueOrThrowArgs>(args: SelectSubset<T, listitemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__listitemClient<$Result.GetResult<Prisma.$listitemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Listitem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {listitemFindFirstArgs} args - Arguments to find a Listitem
     * @example
     * // Get one Listitem
     * const listitem = await prisma.listitem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends listitemFindFirstArgs>(args?: SelectSubset<T, listitemFindFirstArgs<ExtArgs>>): Prisma__listitemClient<$Result.GetResult<Prisma.$listitemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Listitem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {listitemFindFirstOrThrowArgs} args - Arguments to find a Listitem
     * @example
     * // Get one Listitem
     * const listitem = await prisma.listitem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends listitemFindFirstOrThrowArgs>(args?: SelectSubset<T, listitemFindFirstOrThrowArgs<ExtArgs>>): Prisma__listitemClient<$Result.GetResult<Prisma.$listitemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Listitems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {listitemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Listitems
     * const listitems = await prisma.listitem.findMany()
     * 
     * // Get first 10 Listitems
     * const listitems = await prisma.listitem.findMany({ take: 10 })
     * 
     * // Only select the `LID`
     * const listitemWithLIDOnly = await prisma.listitem.findMany({ select: { LID: true } })
     * 
     */
    findMany<T extends listitemFindManyArgs>(args?: SelectSubset<T, listitemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$listitemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Listitem.
     * @param {listitemCreateArgs} args - Arguments to create a Listitem.
     * @example
     * // Create one Listitem
     * const Listitem = await prisma.listitem.create({
     *   data: {
     *     // ... data to create a Listitem
     *   }
     * })
     * 
     */
    create<T extends listitemCreateArgs>(args: SelectSubset<T, listitemCreateArgs<ExtArgs>>): Prisma__listitemClient<$Result.GetResult<Prisma.$listitemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Listitems.
     * @param {listitemCreateManyArgs} args - Arguments to create many Listitems.
     * @example
     * // Create many Listitems
     * const listitem = await prisma.listitem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends listitemCreateManyArgs>(args?: SelectSubset<T, listitemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Listitem.
     * @param {listitemDeleteArgs} args - Arguments to delete one Listitem.
     * @example
     * // Delete one Listitem
     * const Listitem = await prisma.listitem.delete({
     *   where: {
     *     // ... filter to delete one Listitem
     *   }
     * })
     * 
     */
    delete<T extends listitemDeleteArgs>(args: SelectSubset<T, listitemDeleteArgs<ExtArgs>>): Prisma__listitemClient<$Result.GetResult<Prisma.$listitemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Listitem.
     * @param {listitemUpdateArgs} args - Arguments to update one Listitem.
     * @example
     * // Update one Listitem
     * const listitem = await prisma.listitem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends listitemUpdateArgs>(args: SelectSubset<T, listitemUpdateArgs<ExtArgs>>): Prisma__listitemClient<$Result.GetResult<Prisma.$listitemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Listitems.
     * @param {listitemDeleteManyArgs} args - Arguments to filter Listitems to delete.
     * @example
     * // Delete a few Listitems
     * const { count } = await prisma.listitem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends listitemDeleteManyArgs>(args?: SelectSubset<T, listitemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Listitems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {listitemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Listitems
     * const listitem = await prisma.listitem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends listitemUpdateManyArgs>(args: SelectSubset<T, listitemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Listitem.
     * @param {listitemUpsertArgs} args - Arguments to update or create a Listitem.
     * @example
     * // Update or create a Listitem
     * const listitem = await prisma.listitem.upsert({
     *   create: {
     *     // ... data to create a Listitem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Listitem we want to update
     *   }
     * })
     */
    upsert<T extends listitemUpsertArgs>(args: SelectSubset<T, listitemUpsertArgs<ExtArgs>>): Prisma__listitemClient<$Result.GetResult<Prisma.$listitemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Listitems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {listitemCountArgs} args - Arguments to filter Listitems to count.
     * @example
     * // Count the number of Listitems
     * const count = await prisma.listitem.count({
     *   where: {
     *     // ... the filter for the Listitems we want to count
     *   }
     * })
    **/
    count<T extends listitemCountArgs>(
      args?: Subset<T, listitemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ListitemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Listitem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListitemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ListitemAggregateArgs>(args: Subset<T, ListitemAggregateArgs>): Prisma.PrismaPromise<GetListitemAggregateType<T>>

    /**
     * Group by Listitem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {listitemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends listitemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: listitemGroupByArgs['orderBy'] }
        : { orderBy?: listitemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, listitemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetListitemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the listitem model
   */
  readonly fields: listitemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for listitem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__listitemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    list<T extends listDefaultArgs<ExtArgs> = {}>(args?: Subset<T, listDefaultArgs<ExtArgs>>): Prisma__listClient<$Result.GetResult<Prisma.$listPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    exercise<T extends exerciseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, exerciseDefaultArgs<ExtArgs>>): Prisma__exerciseClient<$Result.GetResult<Prisma.$exercisePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the listitem model
   */
  interface listitemFieldRefs {
    readonly LID: FieldRef<"listitem", 'Int'>
    readonly EID: FieldRef<"listitem", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * listitem findUnique
   */
  export type listitemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the listitem
     */
    select?: listitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the listitem
     */
    omit?: listitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: listitemInclude<ExtArgs> | null
    /**
     * Filter, which listitem to fetch.
     */
    where: listitemWhereUniqueInput
  }

  /**
   * listitem findUniqueOrThrow
   */
  export type listitemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the listitem
     */
    select?: listitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the listitem
     */
    omit?: listitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: listitemInclude<ExtArgs> | null
    /**
     * Filter, which listitem to fetch.
     */
    where: listitemWhereUniqueInput
  }

  /**
   * listitem findFirst
   */
  export type listitemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the listitem
     */
    select?: listitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the listitem
     */
    omit?: listitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: listitemInclude<ExtArgs> | null
    /**
     * Filter, which listitem to fetch.
     */
    where?: listitemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of listitems to fetch.
     */
    orderBy?: listitemOrderByWithRelationInput | listitemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for listitems.
     */
    cursor?: listitemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` listitems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` listitems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of listitems.
     */
    distinct?: ListitemScalarFieldEnum | ListitemScalarFieldEnum[]
  }

  /**
   * listitem findFirstOrThrow
   */
  export type listitemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the listitem
     */
    select?: listitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the listitem
     */
    omit?: listitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: listitemInclude<ExtArgs> | null
    /**
     * Filter, which listitem to fetch.
     */
    where?: listitemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of listitems to fetch.
     */
    orderBy?: listitemOrderByWithRelationInput | listitemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for listitems.
     */
    cursor?: listitemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` listitems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` listitems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of listitems.
     */
    distinct?: ListitemScalarFieldEnum | ListitemScalarFieldEnum[]
  }

  /**
   * listitem findMany
   */
  export type listitemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the listitem
     */
    select?: listitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the listitem
     */
    omit?: listitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: listitemInclude<ExtArgs> | null
    /**
     * Filter, which listitems to fetch.
     */
    where?: listitemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of listitems to fetch.
     */
    orderBy?: listitemOrderByWithRelationInput | listitemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing listitems.
     */
    cursor?: listitemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` listitems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` listitems.
     */
    skip?: number
    distinct?: ListitemScalarFieldEnum | ListitemScalarFieldEnum[]
  }

  /**
   * listitem create
   */
  export type listitemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the listitem
     */
    select?: listitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the listitem
     */
    omit?: listitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: listitemInclude<ExtArgs> | null
    /**
     * The data needed to create a listitem.
     */
    data: XOR<listitemCreateInput, listitemUncheckedCreateInput>
  }

  /**
   * listitem createMany
   */
  export type listitemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many listitems.
     */
    data: listitemCreateManyInput | listitemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * listitem update
   */
  export type listitemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the listitem
     */
    select?: listitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the listitem
     */
    omit?: listitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: listitemInclude<ExtArgs> | null
    /**
     * The data needed to update a listitem.
     */
    data: XOR<listitemUpdateInput, listitemUncheckedUpdateInput>
    /**
     * Choose, which listitem to update.
     */
    where: listitemWhereUniqueInput
  }

  /**
   * listitem updateMany
   */
  export type listitemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update listitems.
     */
    data: XOR<listitemUpdateManyMutationInput, listitemUncheckedUpdateManyInput>
    /**
     * Filter which listitems to update
     */
    where?: listitemWhereInput
    /**
     * Limit how many listitems to update.
     */
    limit?: number
  }

  /**
   * listitem upsert
   */
  export type listitemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the listitem
     */
    select?: listitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the listitem
     */
    omit?: listitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: listitemInclude<ExtArgs> | null
    /**
     * The filter to search for the listitem to update in case it exists.
     */
    where: listitemWhereUniqueInput
    /**
     * In case the listitem found by the `where` argument doesn't exist, create a new listitem with this data.
     */
    create: XOR<listitemCreateInput, listitemUncheckedCreateInput>
    /**
     * In case the listitem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<listitemUpdateInput, listitemUncheckedUpdateInput>
  }

  /**
   * listitem delete
   */
  export type listitemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the listitem
     */
    select?: listitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the listitem
     */
    omit?: listitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: listitemInclude<ExtArgs> | null
    /**
     * Filter which listitem to delete.
     */
    where: listitemWhereUniqueInput
  }

  /**
   * listitem deleteMany
   */
  export type listitemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which listitems to delete
     */
    where?: listitemWhereInput
    /**
     * Limit how many listitems to delete.
     */
    limit?: number
  }

  /**
   * listitem without action
   */
  export type listitemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the listitem
     */
    select?: listitemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the listitem
     */
    omit?: listitemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: listitemInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ExerciseScalarFieldEnum: {
    EID: 'EID',
    TpID: 'TpID',
    SPIID: 'SPIID',
    Name: 'Name',
    Slug: 'Slug',
    Content: 'Content',
    Difficulty: 'Difficulty',
    template: 'template'
  };

  export type ExerciseScalarFieldEnum = (typeof ExerciseScalarFieldEnum)[keyof typeof ExerciseScalarFieldEnum]


  export const SubmissionScalarFieldEnum: {
    SID: 'SID',
    UID: 'UID',
    EID: 'EID',
    Code: 'Code',
    CreatedAt: 'CreatedAt',
    Result: 'Result',
    isPublic: 'isPublic'
  };

  export type SubmissionScalarFieldEnum = (typeof SubmissionScalarFieldEnum)[keyof typeof SubmissionScalarFieldEnum]


  export const TestcaseScalarFieldEnum: {
    TCID: 'TCID',
    EID: 'EID',
    Input: 'Input',
    ExpectedOutput: 'ExpectedOutput',
    isHidden: 'isHidden'
  };

  export type TestcaseScalarFieldEnum = (typeof TestcaseScalarFieldEnum)[keyof typeof TestcaseScalarFieldEnum]


  export const TestcaseresultScalarFieldEnum: {
    TCRID: 'TCRID',
    SID: 'SID',
    TCID: 'TCID',
    ActualOutput: 'ActualOutput',
    Result: 'Result'
  };

  export type TestcaseresultScalarFieldEnum = (typeof TestcaseresultScalarFieldEnum)[keyof typeof TestcaseresultScalarFieldEnum]


  export const TopicScalarFieldEnum: {
    TpID: 'TpID',
    Name: 'Name',
    Slug: 'Slug'
  };

  export type TopicScalarFieldEnum = (typeof TopicScalarFieldEnum)[keyof typeof TopicScalarFieldEnum]


  export const UserScalarFieldEnum: {
    UID: 'UID',
    Username: 'Username',
    Email: 'Email',
    Password: 'Password',
    Role: 'Role',
    CreatedAt: 'CreatedAt',
    Image: 'Image'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const FriendshipScalarFieldEnum: {
    FID: 'FID',
    requester: 'requester',
    addressee: 'addressee',
    status: 'status',
    CreatedAt: 'CreatedAt'
  };

  export type FriendshipScalarFieldEnum = (typeof FriendshipScalarFieldEnum)[keyof typeof FriendshipScalarFieldEnum]


  export const ChapterScalarFieldEnum: {
    CID: 'CID',
    ChapterIndex: 'ChapterIndex',
    Name: 'Name'
  };

  export type ChapterScalarFieldEnum = (typeof ChapterScalarFieldEnum)[keyof typeof ChapterScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    CoID: 'CoID',
    UID: 'UID',
    LID: 'LID',
    EID: 'EID',
    Content: 'Content',
    CreatedAt: 'CreatedAt'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const CommentlikeScalarFieldEnum: {
    CLID: 'CLID',
    UID: 'UID',
    CoID: 'CoID',
    CreatedAt: 'CreatedAt'
  };

  export type CommentlikeScalarFieldEnum = (typeof CommentlikeScalarFieldEnum)[keyof typeof CommentlikeScalarFieldEnum]


  export const ExerciselikeScalarFieldEnum: {
    ELID: 'ELID',
    UID: 'UID',
    EID: 'EID',
    CreatedAt: 'CreatedAt'
  };

  export type ExerciselikeScalarFieldEnum = (typeof ExerciselikeScalarFieldEnum)[keyof typeof ExerciselikeScalarFieldEnum]


  export const LessonScalarFieldEnum: {
    LID: 'LID',
    CID: 'CID',
    LessonIndex: 'LessonIndex',
    Title: 'Title',
    Slug: 'Slug'
  };

  export type LessonScalarFieldEnum = (typeof LessonScalarFieldEnum)[keyof typeof LessonScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    NID: 'NID',
    UID: 'UID',
    Type: 'Type',
    FromUser: 'FromUser',
    Message: 'Message',
    CoID: 'CoID',
    CreatedAt: 'CreatedAt',
    isRead: 'isRead'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const StudyplanScalarFieldEnum: {
    SPID: 'SPID',
    Name: 'Name',
    Description: 'Description',
    Icon: 'Icon',
    Slug: 'Slug'
  };

  export type StudyplanScalarFieldEnum = (typeof StudyplanScalarFieldEnum)[keyof typeof StudyplanScalarFieldEnum]


  export const StudyplanitemScalarFieldEnum: {
    SPIID: 'SPIID',
    SPID: 'SPID',
    Name: 'Name'
  };

  export type StudyplanitemScalarFieldEnum = (typeof StudyplanitemScalarFieldEnum)[keyof typeof StudyplanitemScalarFieldEnum]


  export const ExerciseprogressScalarFieldEnum: {
    ID: 'ID',
    UID: 'UID',
    EID: 'EID',
    Status: 'Status',
    UpdatedAt: 'UpdatedAt'
  };

  export type ExerciseprogressScalarFieldEnum = (typeof ExerciseprogressScalarFieldEnum)[keyof typeof ExerciseprogressScalarFieldEnum]


  export const StudyplanprogressScalarFieldEnum: {
    SPPID: 'SPPID',
    SPID: 'SPID',
    UID: 'UID',
    Status: 'Status',
    StartTime: 'StartTime',
    EndTime: 'EndTime'
  };

  export type StudyplanprogressScalarFieldEnum = (typeof StudyplanprogressScalarFieldEnum)[keyof typeof StudyplanprogressScalarFieldEnum]


  export const ListScalarFieldEnum: {
    LID: 'LID',
    UID: 'UID',
    Name: 'Name',
    Description: 'Description',
    CreatedAt: 'CreatedAt'
  };

  export type ListScalarFieldEnum = (typeof ListScalarFieldEnum)[keyof typeof ListScalarFieldEnum]


  export const ListitemScalarFieldEnum: {
    LID: 'LID',
    EID: 'EID'
  };

  export type ListitemScalarFieldEnum = (typeof ListitemScalarFieldEnum)[keyof typeof ListitemScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const exerciseOrderByRelevanceFieldEnum: {
    Name: 'Name',
    Slug: 'Slug',
    Content: 'Content',
    template: 'template'
  };

  export type exerciseOrderByRelevanceFieldEnum = (typeof exerciseOrderByRelevanceFieldEnum)[keyof typeof exerciseOrderByRelevanceFieldEnum]


  export const submissionOrderByRelevanceFieldEnum: {
    UID: 'UID',
    Code: 'Code'
  };

  export type submissionOrderByRelevanceFieldEnum = (typeof submissionOrderByRelevanceFieldEnum)[keyof typeof submissionOrderByRelevanceFieldEnum]


  export const testcaseOrderByRelevanceFieldEnum: {
    Input: 'Input',
    ExpectedOutput: 'ExpectedOutput'
  };

  export type testcaseOrderByRelevanceFieldEnum = (typeof testcaseOrderByRelevanceFieldEnum)[keyof typeof testcaseOrderByRelevanceFieldEnum]


  export const testcaseresultOrderByRelevanceFieldEnum: {
    ActualOutput: 'ActualOutput'
  };

  export type testcaseresultOrderByRelevanceFieldEnum = (typeof testcaseresultOrderByRelevanceFieldEnum)[keyof typeof testcaseresultOrderByRelevanceFieldEnum]


  export const topicOrderByRelevanceFieldEnum: {
    Name: 'Name',
    Slug: 'Slug'
  };

  export type topicOrderByRelevanceFieldEnum = (typeof topicOrderByRelevanceFieldEnum)[keyof typeof topicOrderByRelevanceFieldEnum]


  export const userOrderByRelevanceFieldEnum: {
    UID: 'UID',
    Username: 'Username',
    Email: 'Email',
    Password: 'Password',
    Image: 'Image'
  };

  export type userOrderByRelevanceFieldEnum = (typeof userOrderByRelevanceFieldEnum)[keyof typeof userOrderByRelevanceFieldEnum]


  export const friendshipOrderByRelevanceFieldEnum: {
    requester: 'requester',
    addressee: 'addressee'
  };

  export type friendshipOrderByRelevanceFieldEnum = (typeof friendshipOrderByRelevanceFieldEnum)[keyof typeof friendshipOrderByRelevanceFieldEnum]


  export const chapterOrderByRelevanceFieldEnum: {
    Name: 'Name'
  };

  export type chapterOrderByRelevanceFieldEnum = (typeof chapterOrderByRelevanceFieldEnum)[keyof typeof chapterOrderByRelevanceFieldEnum]


  export const commentOrderByRelevanceFieldEnum: {
    UID: 'UID',
    Content: 'Content'
  };

  export type commentOrderByRelevanceFieldEnum = (typeof commentOrderByRelevanceFieldEnum)[keyof typeof commentOrderByRelevanceFieldEnum]


  export const commentlikeOrderByRelevanceFieldEnum: {
    UID: 'UID'
  };

  export type commentlikeOrderByRelevanceFieldEnum = (typeof commentlikeOrderByRelevanceFieldEnum)[keyof typeof commentlikeOrderByRelevanceFieldEnum]


  export const exerciselikeOrderByRelevanceFieldEnum: {
    UID: 'UID'
  };

  export type exerciselikeOrderByRelevanceFieldEnum = (typeof exerciselikeOrderByRelevanceFieldEnum)[keyof typeof exerciselikeOrderByRelevanceFieldEnum]


  export const lessonOrderByRelevanceFieldEnum: {
    Title: 'Title',
    Slug: 'Slug'
  };

  export type lessonOrderByRelevanceFieldEnum = (typeof lessonOrderByRelevanceFieldEnum)[keyof typeof lessonOrderByRelevanceFieldEnum]


  export const notificationOrderByRelevanceFieldEnum: {
    UID: 'UID',
    FromUser: 'FromUser',
    Message: 'Message'
  };

  export type notificationOrderByRelevanceFieldEnum = (typeof notificationOrderByRelevanceFieldEnum)[keyof typeof notificationOrderByRelevanceFieldEnum]


  export const studyplanOrderByRelevanceFieldEnum: {
    Name: 'Name',
    Description: 'Description',
    Icon: 'Icon',
    Slug: 'Slug'
  };

  export type studyplanOrderByRelevanceFieldEnum = (typeof studyplanOrderByRelevanceFieldEnum)[keyof typeof studyplanOrderByRelevanceFieldEnum]


  export const studyplanitemOrderByRelevanceFieldEnum: {
    Name: 'Name'
  };

  export type studyplanitemOrderByRelevanceFieldEnum = (typeof studyplanitemOrderByRelevanceFieldEnum)[keyof typeof studyplanitemOrderByRelevanceFieldEnum]


  export const exerciseprogressOrderByRelevanceFieldEnum: {
    UID: 'UID'
  };

  export type exerciseprogressOrderByRelevanceFieldEnum = (typeof exerciseprogressOrderByRelevanceFieldEnum)[keyof typeof exerciseprogressOrderByRelevanceFieldEnum]


  export const studyplanprogressOrderByRelevanceFieldEnum: {
    UID: 'UID'
  };

  export type studyplanprogressOrderByRelevanceFieldEnum = (typeof studyplanprogressOrderByRelevanceFieldEnum)[keyof typeof studyplanprogressOrderByRelevanceFieldEnum]


  export const listOrderByRelevanceFieldEnum: {
    UID: 'UID',
    Name: 'Name',
    Description: 'Description'
  };

  export type listOrderByRelevanceFieldEnum = (typeof listOrderByRelevanceFieldEnum)[keyof typeof listOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'exercise_Difficulty'
   */
  export type Enumexercise_DifficultyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'exercise_Difficulty'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'submission_Result'
   */
  export type Enumsubmission_ResultFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'submission_Result'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'testcaseresult_Result'
   */
  export type Enumtestcaseresult_ResultFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'testcaseresult_Result'>
    


  /**
   * Reference to a field of type 'user_Role'
   */
  export type Enumuser_RoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'user_Role'>
    


  /**
   * Reference to a field of type 'friendship_status'
   */
  export type Enumfriendship_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'friendship_status'>
    


  /**
   * Reference to a field of type 'notification_Type'
   */
  export type Enumnotification_TypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'notification_Type'>
    


  /**
   * Reference to a field of type 'exerciseprogress_Status'
   */
  export type Enumexerciseprogress_StatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'exerciseprogress_Status'>
    


  /**
   * Reference to a field of type 'studyplanprogress_Status'
   */
  export type Enumstudyplanprogress_StatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'studyplanprogress_Status'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type exerciseWhereInput = {
    AND?: exerciseWhereInput | exerciseWhereInput[]
    OR?: exerciseWhereInput[]
    NOT?: exerciseWhereInput | exerciseWhereInput[]
    EID?: IntFilter<"exercise"> | number
    TpID?: IntNullableFilter<"exercise"> | number | null
    SPIID?: IntNullableFilter<"exercise"> | number | null
    Name?: StringFilter<"exercise"> | string
    Slug?: StringFilter<"exercise"> | string
    Content?: StringFilter<"exercise"> | string
    Difficulty?: Enumexercise_DifficultyFilter<"exercise"> | $Enums.exercise_Difficulty
    template?: StringNullableFilter<"exercise"> | string | null
    comment?: CommentListRelationFilter
    topic?: XOR<TopicNullableScalarRelationFilter, topicWhereInput> | null
    studyplanitem?: XOR<StudyplanitemNullableScalarRelationFilter, studyplanitemWhereInput> | null
    exerciselike?: ExerciselikeListRelationFilter
    exerciseprogress?: ExerciseprogressListRelationFilter
    listitem?: ListitemListRelationFilter
    submission?: SubmissionListRelationFilter
    testcase?: TestcaseListRelationFilter
  }

  export type exerciseOrderByWithRelationInput = {
    EID?: SortOrder
    TpID?: SortOrderInput | SortOrder
    SPIID?: SortOrderInput | SortOrder
    Name?: SortOrder
    Slug?: SortOrder
    Content?: SortOrder
    Difficulty?: SortOrder
    template?: SortOrderInput | SortOrder
    comment?: commentOrderByRelationAggregateInput
    topic?: topicOrderByWithRelationInput
    studyplanitem?: studyplanitemOrderByWithRelationInput
    exerciselike?: exerciselikeOrderByRelationAggregateInput
    exerciseprogress?: exerciseprogressOrderByRelationAggregateInput
    listitem?: listitemOrderByRelationAggregateInput
    submission?: submissionOrderByRelationAggregateInput
    testcase?: testcaseOrderByRelationAggregateInput
    _relevance?: exerciseOrderByRelevanceInput
  }

  export type exerciseWhereUniqueInput = Prisma.AtLeast<{
    EID?: number
    Slug?: string
    AND?: exerciseWhereInput | exerciseWhereInput[]
    OR?: exerciseWhereInput[]
    NOT?: exerciseWhereInput | exerciseWhereInput[]
    TpID?: IntNullableFilter<"exercise"> | number | null
    SPIID?: IntNullableFilter<"exercise"> | number | null
    Name?: StringFilter<"exercise"> | string
    Content?: StringFilter<"exercise"> | string
    Difficulty?: Enumexercise_DifficultyFilter<"exercise"> | $Enums.exercise_Difficulty
    template?: StringNullableFilter<"exercise"> | string | null
    comment?: CommentListRelationFilter
    topic?: XOR<TopicNullableScalarRelationFilter, topicWhereInput> | null
    studyplanitem?: XOR<StudyplanitemNullableScalarRelationFilter, studyplanitemWhereInput> | null
    exerciselike?: ExerciselikeListRelationFilter
    exerciseprogress?: ExerciseprogressListRelationFilter
    listitem?: ListitemListRelationFilter
    submission?: SubmissionListRelationFilter
    testcase?: TestcaseListRelationFilter
  }, "EID" | "Slug">

  export type exerciseOrderByWithAggregationInput = {
    EID?: SortOrder
    TpID?: SortOrderInput | SortOrder
    SPIID?: SortOrderInput | SortOrder
    Name?: SortOrder
    Slug?: SortOrder
    Content?: SortOrder
    Difficulty?: SortOrder
    template?: SortOrderInput | SortOrder
    _count?: exerciseCountOrderByAggregateInput
    _avg?: exerciseAvgOrderByAggregateInput
    _max?: exerciseMaxOrderByAggregateInput
    _min?: exerciseMinOrderByAggregateInput
    _sum?: exerciseSumOrderByAggregateInput
  }

  export type exerciseScalarWhereWithAggregatesInput = {
    AND?: exerciseScalarWhereWithAggregatesInput | exerciseScalarWhereWithAggregatesInput[]
    OR?: exerciseScalarWhereWithAggregatesInput[]
    NOT?: exerciseScalarWhereWithAggregatesInput | exerciseScalarWhereWithAggregatesInput[]
    EID?: IntWithAggregatesFilter<"exercise"> | number
    TpID?: IntNullableWithAggregatesFilter<"exercise"> | number | null
    SPIID?: IntNullableWithAggregatesFilter<"exercise"> | number | null
    Name?: StringWithAggregatesFilter<"exercise"> | string
    Slug?: StringWithAggregatesFilter<"exercise"> | string
    Content?: StringWithAggregatesFilter<"exercise"> | string
    Difficulty?: Enumexercise_DifficultyWithAggregatesFilter<"exercise"> | $Enums.exercise_Difficulty
    template?: StringNullableWithAggregatesFilter<"exercise"> | string | null
  }

  export type submissionWhereInput = {
    AND?: submissionWhereInput | submissionWhereInput[]
    OR?: submissionWhereInput[]
    NOT?: submissionWhereInput | submissionWhereInput[]
    SID?: IntFilter<"submission"> | number
    UID?: StringFilter<"submission"> | string
    EID?: IntFilter<"submission"> | number
    Code?: StringNullableFilter<"submission"> | string | null
    CreatedAt?: DateTimeNullableFilter<"submission"> | Date | string | null
    Result?: Enumsubmission_ResultNullableFilter<"submission"> | $Enums.submission_Result | null
    isPublic?: BoolNullableFilter<"submission"> | boolean | null
    exercise?: XOR<ExerciseScalarRelationFilter, exerciseWhereInput>
    user?: XOR<UserScalarRelationFilter, userWhereInput>
    testcaseresult?: TestcaseresultListRelationFilter
  }

  export type submissionOrderByWithRelationInput = {
    SID?: SortOrder
    UID?: SortOrder
    EID?: SortOrder
    Code?: SortOrderInput | SortOrder
    CreatedAt?: SortOrderInput | SortOrder
    Result?: SortOrderInput | SortOrder
    isPublic?: SortOrderInput | SortOrder
    exercise?: exerciseOrderByWithRelationInput
    user?: userOrderByWithRelationInput
    testcaseresult?: testcaseresultOrderByRelationAggregateInput
    _relevance?: submissionOrderByRelevanceInput
  }

  export type submissionWhereUniqueInput = Prisma.AtLeast<{
    SID?: number
    AND?: submissionWhereInput | submissionWhereInput[]
    OR?: submissionWhereInput[]
    NOT?: submissionWhereInput | submissionWhereInput[]
    UID?: StringFilter<"submission"> | string
    EID?: IntFilter<"submission"> | number
    Code?: StringNullableFilter<"submission"> | string | null
    CreatedAt?: DateTimeNullableFilter<"submission"> | Date | string | null
    Result?: Enumsubmission_ResultNullableFilter<"submission"> | $Enums.submission_Result | null
    isPublic?: BoolNullableFilter<"submission"> | boolean | null
    exercise?: XOR<ExerciseScalarRelationFilter, exerciseWhereInput>
    user?: XOR<UserScalarRelationFilter, userWhereInput>
    testcaseresult?: TestcaseresultListRelationFilter
  }, "SID">

  export type submissionOrderByWithAggregationInput = {
    SID?: SortOrder
    UID?: SortOrder
    EID?: SortOrder
    Code?: SortOrderInput | SortOrder
    CreatedAt?: SortOrderInput | SortOrder
    Result?: SortOrderInput | SortOrder
    isPublic?: SortOrderInput | SortOrder
    _count?: submissionCountOrderByAggregateInput
    _avg?: submissionAvgOrderByAggregateInput
    _max?: submissionMaxOrderByAggregateInput
    _min?: submissionMinOrderByAggregateInput
    _sum?: submissionSumOrderByAggregateInput
  }

  export type submissionScalarWhereWithAggregatesInput = {
    AND?: submissionScalarWhereWithAggregatesInput | submissionScalarWhereWithAggregatesInput[]
    OR?: submissionScalarWhereWithAggregatesInput[]
    NOT?: submissionScalarWhereWithAggregatesInput | submissionScalarWhereWithAggregatesInput[]
    SID?: IntWithAggregatesFilter<"submission"> | number
    UID?: StringWithAggregatesFilter<"submission"> | string
    EID?: IntWithAggregatesFilter<"submission"> | number
    Code?: StringNullableWithAggregatesFilter<"submission"> | string | null
    CreatedAt?: DateTimeNullableWithAggregatesFilter<"submission"> | Date | string | null
    Result?: Enumsubmission_ResultNullableWithAggregatesFilter<"submission"> | $Enums.submission_Result | null
    isPublic?: BoolNullableWithAggregatesFilter<"submission"> | boolean | null
  }

  export type testcaseWhereInput = {
    AND?: testcaseWhereInput | testcaseWhereInput[]
    OR?: testcaseWhereInput[]
    NOT?: testcaseWhereInput | testcaseWhereInput[]
    TCID?: IntFilter<"testcase"> | number
    EID?: IntFilter<"testcase"> | number
    Input?: StringNullableFilter<"testcase"> | string | null
    ExpectedOutput?: StringFilter<"testcase"> | string
    isHidden?: BoolNullableFilter<"testcase"> | boolean | null
    exercise?: XOR<ExerciseScalarRelationFilter, exerciseWhereInput>
    testcaseresult?: TestcaseresultListRelationFilter
  }

  export type testcaseOrderByWithRelationInput = {
    TCID?: SortOrder
    EID?: SortOrder
    Input?: SortOrderInput | SortOrder
    ExpectedOutput?: SortOrder
    isHidden?: SortOrderInput | SortOrder
    exercise?: exerciseOrderByWithRelationInput
    testcaseresult?: testcaseresultOrderByRelationAggregateInput
    _relevance?: testcaseOrderByRelevanceInput
  }

  export type testcaseWhereUniqueInput = Prisma.AtLeast<{
    TCID?: number
    AND?: testcaseWhereInput | testcaseWhereInput[]
    OR?: testcaseWhereInput[]
    NOT?: testcaseWhereInput | testcaseWhereInput[]
    EID?: IntFilter<"testcase"> | number
    Input?: StringNullableFilter<"testcase"> | string | null
    ExpectedOutput?: StringFilter<"testcase"> | string
    isHidden?: BoolNullableFilter<"testcase"> | boolean | null
    exercise?: XOR<ExerciseScalarRelationFilter, exerciseWhereInput>
    testcaseresult?: TestcaseresultListRelationFilter
  }, "TCID">

  export type testcaseOrderByWithAggregationInput = {
    TCID?: SortOrder
    EID?: SortOrder
    Input?: SortOrderInput | SortOrder
    ExpectedOutput?: SortOrder
    isHidden?: SortOrderInput | SortOrder
    _count?: testcaseCountOrderByAggregateInput
    _avg?: testcaseAvgOrderByAggregateInput
    _max?: testcaseMaxOrderByAggregateInput
    _min?: testcaseMinOrderByAggregateInput
    _sum?: testcaseSumOrderByAggregateInput
  }

  export type testcaseScalarWhereWithAggregatesInput = {
    AND?: testcaseScalarWhereWithAggregatesInput | testcaseScalarWhereWithAggregatesInput[]
    OR?: testcaseScalarWhereWithAggregatesInput[]
    NOT?: testcaseScalarWhereWithAggregatesInput | testcaseScalarWhereWithAggregatesInput[]
    TCID?: IntWithAggregatesFilter<"testcase"> | number
    EID?: IntWithAggregatesFilter<"testcase"> | number
    Input?: StringNullableWithAggregatesFilter<"testcase"> | string | null
    ExpectedOutput?: StringWithAggregatesFilter<"testcase"> | string
    isHidden?: BoolNullableWithAggregatesFilter<"testcase"> | boolean | null
  }

  export type testcaseresultWhereInput = {
    AND?: testcaseresultWhereInput | testcaseresultWhereInput[]
    OR?: testcaseresultWhereInput[]
    NOT?: testcaseresultWhereInput | testcaseresultWhereInput[]
    TCRID?: IntFilter<"testcaseresult"> | number
    SID?: IntFilter<"testcaseresult"> | number
    TCID?: IntFilter<"testcaseresult"> | number
    ActualOutput?: StringFilter<"testcaseresult"> | string
    Result?: Enumtestcaseresult_ResultFilter<"testcaseresult"> | $Enums.testcaseresult_Result
    submission?: XOR<SubmissionScalarRelationFilter, submissionWhereInput>
    testcase?: XOR<TestcaseScalarRelationFilter, testcaseWhereInput>
  }

  export type testcaseresultOrderByWithRelationInput = {
    TCRID?: SortOrder
    SID?: SortOrder
    TCID?: SortOrder
    ActualOutput?: SortOrder
    Result?: SortOrder
    submission?: submissionOrderByWithRelationInput
    testcase?: testcaseOrderByWithRelationInput
    _relevance?: testcaseresultOrderByRelevanceInput
  }

  export type testcaseresultWhereUniqueInput = Prisma.AtLeast<{
    TCRID?: number
    AND?: testcaseresultWhereInput | testcaseresultWhereInput[]
    OR?: testcaseresultWhereInput[]
    NOT?: testcaseresultWhereInput | testcaseresultWhereInput[]
    SID?: IntFilter<"testcaseresult"> | number
    TCID?: IntFilter<"testcaseresult"> | number
    ActualOutput?: StringFilter<"testcaseresult"> | string
    Result?: Enumtestcaseresult_ResultFilter<"testcaseresult"> | $Enums.testcaseresult_Result
    submission?: XOR<SubmissionScalarRelationFilter, submissionWhereInput>
    testcase?: XOR<TestcaseScalarRelationFilter, testcaseWhereInput>
  }, "TCRID">

  export type testcaseresultOrderByWithAggregationInput = {
    TCRID?: SortOrder
    SID?: SortOrder
    TCID?: SortOrder
    ActualOutput?: SortOrder
    Result?: SortOrder
    _count?: testcaseresultCountOrderByAggregateInput
    _avg?: testcaseresultAvgOrderByAggregateInput
    _max?: testcaseresultMaxOrderByAggregateInput
    _min?: testcaseresultMinOrderByAggregateInput
    _sum?: testcaseresultSumOrderByAggregateInput
  }

  export type testcaseresultScalarWhereWithAggregatesInput = {
    AND?: testcaseresultScalarWhereWithAggregatesInput | testcaseresultScalarWhereWithAggregatesInput[]
    OR?: testcaseresultScalarWhereWithAggregatesInput[]
    NOT?: testcaseresultScalarWhereWithAggregatesInput | testcaseresultScalarWhereWithAggregatesInput[]
    TCRID?: IntWithAggregatesFilter<"testcaseresult"> | number
    SID?: IntWithAggregatesFilter<"testcaseresult"> | number
    TCID?: IntWithAggregatesFilter<"testcaseresult"> | number
    ActualOutput?: StringWithAggregatesFilter<"testcaseresult"> | string
    Result?: Enumtestcaseresult_ResultWithAggregatesFilter<"testcaseresult"> | $Enums.testcaseresult_Result
  }

  export type topicWhereInput = {
    AND?: topicWhereInput | topicWhereInput[]
    OR?: topicWhereInput[]
    NOT?: topicWhereInput | topicWhereInput[]
    TpID?: IntFilter<"topic"> | number
    Name?: StringFilter<"topic"> | string
    Slug?: StringFilter<"topic"> | string
    exercise?: ExerciseListRelationFilter
  }

  export type topicOrderByWithRelationInput = {
    TpID?: SortOrder
    Name?: SortOrder
    Slug?: SortOrder
    exercise?: exerciseOrderByRelationAggregateInput
    _relevance?: topicOrderByRelevanceInput
  }

  export type topicWhereUniqueInput = Prisma.AtLeast<{
    TpID?: number
    Slug?: string
    AND?: topicWhereInput | topicWhereInput[]
    OR?: topicWhereInput[]
    NOT?: topicWhereInput | topicWhereInput[]
    Name?: StringFilter<"topic"> | string
    exercise?: ExerciseListRelationFilter
  }, "TpID" | "Slug">

  export type topicOrderByWithAggregationInput = {
    TpID?: SortOrder
    Name?: SortOrder
    Slug?: SortOrder
    _count?: topicCountOrderByAggregateInput
    _avg?: topicAvgOrderByAggregateInput
    _max?: topicMaxOrderByAggregateInput
    _min?: topicMinOrderByAggregateInput
    _sum?: topicSumOrderByAggregateInput
  }

  export type topicScalarWhereWithAggregatesInput = {
    AND?: topicScalarWhereWithAggregatesInput | topicScalarWhereWithAggregatesInput[]
    OR?: topicScalarWhereWithAggregatesInput[]
    NOT?: topicScalarWhereWithAggregatesInput | topicScalarWhereWithAggregatesInput[]
    TpID?: IntWithAggregatesFilter<"topic"> | number
    Name?: StringWithAggregatesFilter<"topic"> | string
    Slug?: StringWithAggregatesFilter<"topic"> | string
  }

  export type userWhereInput = {
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    UID?: StringFilter<"user"> | string
    Username?: StringFilter<"user"> | string
    Email?: StringFilter<"user"> | string
    Password?: StringFilter<"user"> | string
    Role?: Enumuser_RoleFilter<"user"> | $Enums.user_Role
    CreatedAt?: DateTimeNullableFilter<"user"> | Date | string | null
    Image?: StringNullableFilter<"user"> | string | null
    comment?: CommentListRelationFilter
    commentlike?: CommentlikeListRelationFilter
    exerciselike?: ExerciselikeListRelationFilter
    exerciseprogress?: ExerciseprogressListRelationFilter
    friendship_friendship_requesterTouser?: FriendshipListRelationFilter
    friendship_friendship_addresseeTouser?: FriendshipListRelationFilter
    list?: ListListRelationFilter
    notification_notification_UIDTouser?: NotificationListRelationFilter
    notification_notification_FromUserTouser?: NotificationListRelationFilter
    studyplanprogress?: StudyplanprogressListRelationFilter
    submission?: SubmissionListRelationFilter
  }

  export type userOrderByWithRelationInput = {
    UID?: SortOrder
    Username?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
    Role?: SortOrder
    CreatedAt?: SortOrderInput | SortOrder
    Image?: SortOrderInput | SortOrder
    comment?: commentOrderByRelationAggregateInput
    commentlike?: commentlikeOrderByRelationAggregateInput
    exerciselike?: exerciselikeOrderByRelationAggregateInput
    exerciseprogress?: exerciseprogressOrderByRelationAggregateInput
    friendship_friendship_requesterTouser?: friendshipOrderByRelationAggregateInput
    friendship_friendship_addresseeTouser?: friendshipOrderByRelationAggregateInput
    list?: listOrderByRelationAggregateInput
    notification_notification_UIDTouser?: notificationOrderByRelationAggregateInput
    notification_notification_FromUserTouser?: notificationOrderByRelationAggregateInput
    studyplanprogress?: studyplanprogressOrderByRelationAggregateInput
    submission?: submissionOrderByRelationAggregateInput
    _relevance?: userOrderByRelevanceInput
  }

  export type userWhereUniqueInput = Prisma.AtLeast<{
    UID?: string
    Email?: string
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    Username?: StringFilter<"user"> | string
    Password?: StringFilter<"user"> | string
    Role?: Enumuser_RoleFilter<"user"> | $Enums.user_Role
    CreatedAt?: DateTimeNullableFilter<"user"> | Date | string | null
    Image?: StringNullableFilter<"user"> | string | null
    comment?: CommentListRelationFilter
    commentlike?: CommentlikeListRelationFilter
    exerciselike?: ExerciselikeListRelationFilter
    exerciseprogress?: ExerciseprogressListRelationFilter
    friendship_friendship_requesterTouser?: FriendshipListRelationFilter
    friendship_friendship_addresseeTouser?: FriendshipListRelationFilter
    list?: ListListRelationFilter
    notification_notification_UIDTouser?: NotificationListRelationFilter
    notification_notification_FromUserTouser?: NotificationListRelationFilter
    studyplanprogress?: StudyplanprogressListRelationFilter
    submission?: SubmissionListRelationFilter
  }, "UID" | "Email">

  export type userOrderByWithAggregationInput = {
    UID?: SortOrder
    Username?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
    Role?: SortOrder
    CreatedAt?: SortOrderInput | SortOrder
    Image?: SortOrderInput | SortOrder
    _count?: userCountOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    OR?: userScalarWhereWithAggregatesInput[]
    NOT?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    UID?: StringWithAggregatesFilter<"user"> | string
    Username?: StringWithAggregatesFilter<"user"> | string
    Email?: StringWithAggregatesFilter<"user"> | string
    Password?: StringWithAggregatesFilter<"user"> | string
    Role?: Enumuser_RoleWithAggregatesFilter<"user"> | $Enums.user_Role
    CreatedAt?: DateTimeNullableWithAggregatesFilter<"user"> | Date | string | null
    Image?: StringNullableWithAggregatesFilter<"user"> | string | null
  }

  export type friendshipWhereInput = {
    AND?: friendshipWhereInput | friendshipWhereInput[]
    OR?: friendshipWhereInput[]
    NOT?: friendshipWhereInput | friendshipWhereInput[]
    FID?: IntFilter<"friendship"> | number
    requester?: StringFilter<"friendship"> | string
    addressee?: StringFilter<"friendship"> | string
    status?: Enumfriendship_statusFilter<"friendship"> | $Enums.friendship_status
    CreatedAt?: DateTimeNullableFilter<"friendship"> | Date | string | null
    user_friendship_requesterTouser?: XOR<UserScalarRelationFilter, userWhereInput>
    user_friendship_addresseeTouser?: XOR<UserScalarRelationFilter, userWhereInput>
  }

  export type friendshipOrderByWithRelationInput = {
    FID?: SortOrder
    requester?: SortOrder
    addressee?: SortOrder
    status?: SortOrder
    CreatedAt?: SortOrderInput | SortOrder
    user_friendship_requesterTouser?: userOrderByWithRelationInput
    user_friendship_addresseeTouser?: userOrderByWithRelationInput
    _relevance?: friendshipOrderByRelevanceInput
  }

  export type friendshipWhereUniqueInput = Prisma.AtLeast<{
    FID?: number
    requester_addressee?: friendshipRequesterAddresseeCompoundUniqueInput
    AND?: friendshipWhereInput | friendshipWhereInput[]
    OR?: friendshipWhereInput[]
    NOT?: friendshipWhereInput | friendshipWhereInput[]
    requester?: StringFilter<"friendship"> | string
    addressee?: StringFilter<"friendship"> | string
    status?: Enumfriendship_statusFilter<"friendship"> | $Enums.friendship_status
    CreatedAt?: DateTimeNullableFilter<"friendship"> | Date | string | null
    user_friendship_requesterTouser?: XOR<UserScalarRelationFilter, userWhereInput>
    user_friendship_addresseeTouser?: XOR<UserScalarRelationFilter, userWhereInput>
  }, "FID" | "requester_addressee">

  export type friendshipOrderByWithAggregationInput = {
    FID?: SortOrder
    requester?: SortOrder
    addressee?: SortOrder
    status?: SortOrder
    CreatedAt?: SortOrderInput | SortOrder
    _count?: friendshipCountOrderByAggregateInput
    _avg?: friendshipAvgOrderByAggregateInput
    _max?: friendshipMaxOrderByAggregateInput
    _min?: friendshipMinOrderByAggregateInput
    _sum?: friendshipSumOrderByAggregateInput
  }

  export type friendshipScalarWhereWithAggregatesInput = {
    AND?: friendshipScalarWhereWithAggregatesInput | friendshipScalarWhereWithAggregatesInput[]
    OR?: friendshipScalarWhereWithAggregatesInput[]
    NOT?: friendshipScalarWhereWithAggregatesInput | friendshipScalarWhereWithAggregatesInput[]
    FID?: IntWithAggregatesFilter<"friendship"> | number
    requester?: StringWithAggregatesFilter<"friendship"> | string
    addressee?: StringWithAggregatesFilter<"friendship"> | string
    status?: Enumfriendship_statusWithAggregatesFilter<"friendship"> | $Enums.friendship_status
    CreatedAt?: DateTimeNullableWithAggregatesFilter<"friendship"> | Date | string | null
  }

  export type chapterWhereInput = {
    AND?: chapterWhereInput | chapterWhereInput[]
    OR?: chapterWhereInput[]
    NOT?: chapterWhereInput | chapterWhereInput[]
    CID?: IntFilter<"chapter"> | number
    ChapterIndex?: IntFilter<"chapter"> | number
    Name?: StringFilter<"chapter"> | string
    lesson?: LessonListRelationFilter
  }

  export type chapterOrderByWithRelationInput = {
    CID?: SortOrder
    ChapterIndex?: SortOrder
    Name?: SortOrder
    lesson?: lessonOrderByRelationAggregateInput
    _relevance?: chapterOrderByRelevanceInput
  }

  export type chapterWhereUniqueInput = Prisma.AtLeast<{
    CID?: number
    AND?: chapterWhereInput | chapterWhereInput[]
    OR?: chapterWhereInput[]
    NOT?: chapterWhereInput | chapterWhereInput[]
    ChapterIndex?: IntFilter<"chapter"> | number
    Name?: StringFilter<"chapter"> | string
    lesson?: LessonListRelationFilter
  }, "CID">

  export type chapterOrderByWithAggregationInput = {
    CID?: SortOrder
    ChapterIndex?: SortOrder
    Name?: SortOrder
    _count?: chapterCountOrderByAggregateInput
    _avg?: chapterAvgOrderByAggregateInput
    _max?: chapterMaxOrderByAggregateInput
    _min?: chapterMinOrderByAggregateInput
    _sum?: chapterSumOrderByAggregateInput
  }

  export type chapterScalarWhereWithAggregatesInput = {
    AND?: chapterScalarWhereWithAggregatesInput | chapterScalarWhereWithAggregatesInput[]
    OR?: chapterScalarWhereWithAggregatesInput[]
    NOT?: chapterScalarWhereWithAggregatesInput | chapterScalarWhereWithAggregatesInput[]
    CID?: IntWithAggregatesFilter<"chapter"> | number
    ChapterIndex?: IntWithAggregatesFilter<"chapter"> | number
    Name?: StringWithAggregatesFilter<"chapter"> | string
  }

  export type commentWhereInput = {
    AND?: commentWhereInput | commentWhereInput[]
    OR?: commentWhereInput[]
    NOT?: commentWhereInput | commentWhereInput[]
    CoID?: IntFilter<"comment"> | number
    UID?: StringFilter<"comment"> | string
    LID?: IntNullableFilter<"comment"> | number | null
    EID?: IntNullableFilter<"comment"> | number | null
    Content?: StringFilter<"comment"> | string
    CreatedAt?: DateTimeNullableFilter<"comment"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, userWhereInput>
    lesson?: XOR<LessonNullableScalarRelationFilter, lessonWhereInput> | null
    exercise?: XOR<ExerciseNullableScalarRelationFilter, exerciseWhereInput> | null
    commentlike?: CommentlikeListRelationFilter
    notification?: NotificationListRelationFilter
  }

  export type commentOrderByWithRelationInput = {
    CoID?: SortOrder
    UID?: SortOrder
    LID?: SortOrderInput | SortOrder
    EID?: SortOrderInput | SortOrder
    Content?: SortOrder
    CreatedAt?: SortOrderInput | SortOrder
    user?: userOrderByWithRelationInput
    lesson?: lessonOrderByWithRelationInput
    exercise?: exerciseOrderByWithRelationInput
    commentlike?: commentlikeOrderByRelationAggregateInput
    notification?: notificationOrderByRelationAggregateInput
    _relevance?: commentOrderByRelevanceInput
  }

  export type commentWhereUniqueInput = Prisma.AtLeast<{
    CoID?: number
    AND?: commentWhereInput | commentWhereInput[]
    OR?: commentWhereInput[]
    NOT?: commentWhereInput | commentWhereInput[]
    UID?: StringFilter<"comment"> | string
    LID?: IntNullableFilter<"comment"> | number | null
    EID?: IntNullableFilter<"comment"> | number | null
    Content?: StringFilter<"comment"> | string
    CreatedAt?: DateTimeNullableFilter<"comment"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, userWhereInput>
    lesson?: XOR<LessonNullableScalarRelationFilter, lessonWhereInput> | null
    exercise?: XOR<ExerciseNullableScalarRelationFilter, exerciseWhereInput> | null
    commentlike?: CommentlikeListRelationFilter
    notification?: NotificationListRelationFilter
  }, "CoID">

  export type commentOrderByWithAggregationInput = {
    CoID?: SortOrder
    UID?: SortOrder
    LID?: SortOrderInput | SortOrder
    EID?: SortOrderInput | SortOrder
    Content?: SortOrder
    CreatedAt?: SortOrderInput | SortOrder
    _count?: commentCountOrderByAggregateInput
    _avg?: commentAvgOrderByAggregateInput
    _max?: commentMaxOrderByAggregateInput
    _min?: commentMinOrderByAggregateInput
    _sum?: commentSumOrderByAggregateInput
  }

  export type commentScalarWhereWithAggregatesInput = {
    AND?: commentScalarWhereWithAggregatesInput | commentScalarWhereWithAggregatesInput[]
    OR?: commentScalarWhereWithAggregatesInput[]
    NOT?: commentScalarWhereWithAggregatesInput | commentScalarWhereWithAggregatesInput[]
    CoID?: IntWithAggregatesFilter<"comment"> | number
    UID?: StringWithAggregatesFilter<"comment"> | string
    LID?: IntNullableWithAggregatesFilter<"comment"> | number | null
    EID?: IntNullableWithAggregatesFilter<"comment"> | number | null
    Content?: StringWithAggregatesFilter<"comment"> | string
    CreatedAt?: DateTimeNullableWithAggregatesFilter<"comment"> | Date | string | null
  }

  export type commentlikeWhereInput = {
    AND?: commentlikeWhereInput | commentlikeWhereInput[]
    OR?: commentlikeWhereInput[]
    NOT?: commentlikeWhereInput | commentlikeWhereInput[]
    CLID?: IntFilter<"commentlike"> | number
    UID?: StringFilter<"commentlike"> | string
    CoID?: IntFilter<"commentlike"> | number
    CreatedAt?: DateTimeNullableFilter<"commentlike"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, userWhereInput>
    comment?: XOR<CommentScalarRelationFilter, commentWhereInput>
  }

  export type commentlikeOrderByWithRelationInput = {
    CLID?: SortOrder
    UID?: SortOrder
    CoID?: SortOrder
    CreatedAt?: SortOrderInput | SortOrder
    user?: userOrderByWithRelationInput
    comment?: commentOrderByWithRelationInput
    _relevance?: commentlikeOrderByRelevanceInput
  }

  export type commentlikeWhereUniqueInput = Prisma.AtLeast<{
    CLID?: number
    UID_CoID?: commentlikeUIDCoIDCompoundUniqueInput
    AND?: commentlikeWhereInput | commentlikeWhereInput[]
    OR?: commentlikeWhereInput[]
    NOT?: commentlikeWhereInput | commentlikeWhereInput[]
    UID?: StringFilter<"commentlike"> | string
    CoID?: IntFilter<"commentlike"> | number
    CreatedAt?: DateTimeNullableFilter<"commentlike"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, userWhereInput>
    comment?: XOR<CommentScalarRelationFilter, commentWhereInput>
  }, "CLID" | "UID_CoID">

  export type commentlikeOrderByWithAggregationInput = {
    CLID?: SortOrder
    UID?: SortOrder
    CoID?: SortOrder
    CreatedAt?: SortOrderInput | SortOrder
    _count?: commentlikeCountOrderByAggregateInput
    _avg?: commentlikeAvgOrderByAggregateInput
    _max?: commentlikeMaxOrderByAggregateInput
    _min?: commentlikeMinOrderByAggregateInput
    _sum?: commentlikeSumOrderByAggregateInput
  }

  export type commentlikeScalarWhereWithAggregatesInput = {
    AND?: commentlikeScalarWhereWithAggregatesInput | commentlikeScalarWhereWithAggregatesInput[]
    OR?: commentlikeScalarWhereWithAggregatesInput[]
    NOT?: commentlikeScalarWhereWithAggregatesInput | commentlikeScalarWhereWithAggregatesInput[]
    CLID?: IntWithAggregatesFilter<"commentlike"> | number
    UID?: StringWithAggregatesFilter<"commentlike"> | string
    CoID?: IntWithAggregatesFilter<"commentlike"> | number
    CreatedAt?: DateTimeNullableWithAggregatesFilter<"commentlike"> | Date | string | null
  }

  export type exerciselikeWhereInput = {
    AND?: exerciselikeWhereInput | exerciselikeWhereInput[]
    OR?: exerciselikeWhereInput[]
    NOT?: exerciselikeWhereInput | exerciselikeWhereInput[]
    ELID?: IntFilter<"exerciselike"> | number
    UID?: StringFilter<"exerciselike"> | string
    EID?: IntFilter<"exerciselike"> | number
    CreatedAt?: DateTimeNullableFilter<"exerciselike"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, userWhereInput>
    exercise?: XOR<ExerciseScalarRelationFilter, exerciseWhereInput>
  }

  export type exerciselikeOrderByWithRelationInput = {
    ELID?: SortOrder
    UID?: SortOrder
    EID?: SortOrder
    CreatedAt?: SortOrderInput | SortOrder
    user?: userOrderByWithRelationInput
    exercise?: exerciseOrderByWithRelationInput
    _relevance?: exerciselikeOrderByRelevanceInput
  }

  export type exerciselikeWhereUniqueInput = Prisma.AtLeast<{
    ELID?: number
    UID_EID?: exerciselikeUIDEIDCompoundUniqueInput
    AND?: exerciselikeWhereInput | exerciselikeWhereInput[]
    OR?: exerciselikeWhereInput[]
    NOT?: exerciselikeWhereInput | exerciselikeWhereInput[]
    UID?: StringFilter<"exerciselike"> | string
    EID?: IntFilter<"exerciselike"> | number
    CreatedAt?: DateTimeNullableFilter<"exerciselike"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, userWhereInput>
    exercise?: XOR<ExerciseScalarRelationFilter, exerciseWhereInput>
  }, "ELID" | "UID_EID">

  export type exerciselikeOrderByWithAggregationInput = {
    ELID?: SortOrder
    UID?: SortOrder
    EID?: SortOrder
    CreatedAt?: SortOrderInput | SortOrder
    _count?: exerciselikeCountOrderByAggregateInput
    _avg?: exerciselikeAvgOrderByAggregateInput
    _max?: exerciselikeMaxOrderByAggregateInput
    _min?: exerciselikeMinOrderByAggregateInput
    _sum?: exerciselikeSumOrderByAggregateInput
  }

  export type exerciselikeScalarWhereWithAggregatesInput = {
    AND?: exerciselikeScalarWhereWithAggregatesInput | exerciselikeScalarWhereWithAggregatesInput[]
    OR?: exerciselikeScalarWhereWithAggregatesInput[]
    NOT?: exerciselikeScalarWhereWithAggregatesInput | exerciselikeScalarWhereWithAggregatesInput[]
    ELID?: IntWithAggregatesFilter<"exerciselike"> | number
    UID?: StringWithAggregatesFilter<"exerciselike"> | string
    EID?: IntWithAggregatesFilter<"exerciselike"> | number
    CreatedAt?: DateTimeNullableWithAggregatesFilter<"exerciselike"> | Date | string | null
  }

  export type lessonWhereInput = {
    AND?: lessonWhereInput | lessonWhereInput[]
    OR?: lessonWhereInput[]
    NOT?: lessonWhereInput | lessonWhereInput[]
    LID?: IntFilter<"lesson"> | number
    CID?: IntFilter<"lesson"> | number
    LessonIndex?: IntFilter<"lesson"> | number
    Title?: StringFilter<"lesson"> | string
    Slug?: StringFilter<"lesson"> | string
    comment?: CommentListRelationFilter
    chapter?: XOR<ChapterScalarRelationFilter, chapterWhereInput>
  }

  export type lessonOrderByWithRelationInput = {
    LID?: SortOrder
    CID?: SortOrder
    LessonIndex?: SortOrder
    Title?: SortOrder
    Slug?: SortOrder
    comment?: commentOrderByRelationAggregateInput
    chapter?: chapterOrderByWithRelationInput
    _relevance?: lessonOrderByRelevanceInput
  }

  export type lessonWhereUniqueInput = Prisma.AtLeast<{
    LID?: number
    Slug?: string
    AND?: lessonWhereInput | lessonWhereInput[]
    OR?: lessonWhereInput[]
    NOT?: lessonWhereInput | lessonWhereInput[]
    CID?: IntFilter<"lesson"> | number
    LessonIndex?: IntFilter<"lesson"> | number
    Title?: StringFilter<"lesson"> | string
    comment?: CommentListRelationFilter
    chapter?: XOR<ChapterScalarRelationFilter, chapterWhereInput>
  }, "LID" | "Slug">

  export type lessonOrderByWithAggregationInput = {
    LID?: SortOrder
    CID?: SortOrder
    LessonIndex?: SortOrder
    Title?: SortOrder
    Slug?: SortOrder
    _count?: lessonCountOrderByAggregateInput
    _avg?: lessonAvgOrderByAggregateInput
    _max?: lessonMaxOrderByAggregateInput
    _min?: lessonMinOrderByAggregateInput
    _sum?: lessonSumOrderByAggregateInput
  }

  export type lessonScalarWhereWithAggregatesInput = {
    AND?: lessonScalarWhereWithAggregatesInput | lessonScalarWhereWithAggregatesInput[]
    OR?: lessonScalarWhereWithAggregatesInput[]
    NOT?: lessonScalarWhereWithAggregatesInput | lessonScalarWhereWithAggregatesInput[]
    LID?: IntWithAggregatesFilter<"lesson"> | number
    CID?: IntWithAggregatesFilter<"lesson"> | number
    LessonIndex?: IntWithAggregatesFilter<"lesson"> | number
    Title?: StringWithAggregatesFilter<"lesson"> | string
    Slug?: StringWithAggregatesFilter<"lesson"> | string
  }

  export type notificationWhereInput = {
    AND?: notificationWhereInput | notificationWhereInput[]
    OR?: notificationWhereInput[]
    NOT?: notificationWhereInput | notificationWhereInput[]
    NID?: IntFilter<"notification"> | number
    UID?: StringFilter<"notification"> | string
    Type?: Enumnotification_TypeFilter<"notification"> | $Enums.notification_Type
    FromUser?: StringFilter<"notification"> | string
    Message?: StringFilter<"notification"> | string
    CoID?: IntNullableFilter<"notification"> | number | null
    CreatedAt?: DateTimeNullableFilter<"notification"> | Date | string | null
    isRead?: BoolNullableFilter<"notification"> | boolean | null
    user_notification_UIDTouser?: XOR<UserScalarRelationFilter, userWhereInput>
    user_notification_FromUserTouser?: XOR<UserScalarRelationFilter, userWhereInput>
    comment?: XOR<CommentNullableScalarRelationFilter, commentWhereInput> | null
  }

  export type notificationOrderByWithRelationInput = {
    NID?: SortOrder
    UID?: SortOrder
    Type?: SortOrder
    FromUser?: SortOrder
    Message?: SortOrder
    CoID?: SortOrderInput | SortOrder
    CreatedAt?: SortOrderInput | SortOrder
    isRead?: SortOrderInput | SortOrder
    user_notification_UIDTouser?: userOrderByWithRelationInput
    user_notification_FromUserTouser?: userOrderByWithRelationInput
    comment?: commentOrderByWithRelationInput
    _relevance?: notificationOrderByRelevanceInput
  }

  export type notificationWhereUniqueInput = Prisma.AtLeast<{
    NID?: number
    AND?: notificationWhereInput | notificationWhereInput[]
    OR?: notificationWhereInput[]
    NOT?: notificationWhereInput | notificationWhereInput[]
    UID?: StringFilter<"notification"> | string
    Type?: Enumnotification_TypeFilter<"notification"> | $Enums.notification_Type
    FromUser?: StringFilter<"notification"> | string
    Message?: StringFilter<"notification"> | string
    CoID?: IntNullableFilter<"notification"> | number | null
    CreatedAt?: DateTimeNullableFilter<"notification"> | Date | string | null
    isRead?: BoolNullableFilter<"notification"> | boolean | null
    user_notification_UIDTouser?: XOR<UserScalarRelationFilter, userWhereInput>
    user_notification_FromUserTouser?: XOR<UserScalarRelationFilter, userWhereInput>
    comment?: XOR<CommentNullableScalarRelationFilter, commentWhereInput> | null
  }, "NID">

  export type notificationOrderByWithAggregationInput = {
    NID?: SortOrder
    UID?: SortOrder
    Type?: SortOrder
    FromUser?: SortOrder
    Message?: SortOrder
    CoID?: SortOrderInput | SortOrder
    CreatedAt?: SortOrderInput | SortOrder
    isRead?: SortOrderInput | SortOrder
    _count?: notificationCountOrderByAggregateInput
    _avg?: notificationAvgOrderByAggregateInput
    _max?: notificationMaxOrderByAggregateInput
    _min?: notificationMinOrderByAggregateInput
    _sum?: notificationSumOrderByAggregateInput
  }

  export type notificationScalarWhereWithAggregatesInput = {
    AND?: notificationScalarWhereWithAggregatesInput | notificationScalarWhereWithAggregatesInput[]
    OR?: notificationScalarWhereWithAggregatesInput[]
    NOT?: notificationScalarWhereWithAggregatesInput | notificationScalarWhereWithAggregatesInput[]
    NID?: IntWithAggregatesFilter<"notification"> | number
    UID?: StringWithAggregatesFilter<"notification"> | string
    Type?: Enumnotification_TypeWithAggregatesFilter<"notification"> | $Enums.notification_Type
    FromUser?: StringWithAggregatesFilter<"notification"> | string
    Message?: StringWithAggregatesFilter<"notification"> | string
    CoID?: IntNullableWithAggregatesFilter<"notification"> | number | null
    CreatedAt?: DateTimeNullableWithAggregatesFilter<"notification"> | Date | string | null
    isRead?: BoolNullableWithAggregatesFilter<"notification"> | boolean | null
  }

  export type studyplanWhereInput = {
    AND?: studyplanWhereInput | studyplanWhereInput[]
    OR?: studyplanWhereInput[]
    NOT?: studyplanWhereInput | studyplanWhereInput[]
    SPID?: IntFilter<"studyplan"> | number
    Name?: StringFilter<"studyplan"> | string
    Description?: StringFilter<"studyplan"> | string
    Icon?: StringNullableFilter<"studyplan"> | string | null
    Slug?: StringNullableFilter<"studyplan"> | string | null
    studyplanitem?: StudyplanitemListRelationFilter
    studyplanprogress?: StudyplanprogressListRelationFilter
  }

  export type studyplanOrderByWithRelationInput = {
    SPID?: SortOrder
    Name?: SortOrder
    Description?: SortOrder
    Icon?: SortOrderInput | SortOrder
    Slug?: SortOrderInput | SortOrder
    studyplanitem?: studyplanitemOrderByRelationAggregateInput
    studyplanprogress?: studyplanprogressOrderByRelationAggregateInput
    _relevance?: studyplanOrderByRelevanceInput
  }

  export type studyplanWhereUniqueInput = Prisma.AtLeast<{
    SPID?: number
    Slug?: string
    AND?: studyplanWhereInput | studyplanWhereInput[]
    OR?: studyplanWhereInput[]
    NOT?: studyplanWhereInput | studyplanWhereInput[]
    Name?: StringFilter<"studyplan"> | string
    Description?: StringFilter<"studyplan"> | string
    Icon?: StringNullableFilter<"studyplan"> | string | null
    studyplanitem?: StudyplanitemListRelationFilter
    studyplanprogress?: StudyplanprogressListRelationFilter
  }, "SPID" | "Slug">

  export type studyplanOrderByWithAggregationInput = {
    SPID?: SortOrder
    Name?: SortOrder
    Description?: SortOrder
    Icon?: SortOrderInput | SortOrder
    Slug?: SortOrderInput | SortOrder
    _count?: studyplanCountOrderByAggregateInput
    _avg?: studyplanAvgOrderByAggregateInput
    _max?: studyplanMaxOrderByAggregateInput
    _min?: studyplanMinOrderByAggregateInput
    _sum?: studyplanSumOrderByAggregateInput
  }

  export type studyplanScalarWhereWithAggregatesInput = {
    AND?: studyplanScalarWhereWithAggregatesInput | studyplanScalarWhereWithAggregatesInput[]
    OR?: studyplanScalarWhereWithAggregatesInput[]
    NOT?: studyplanScalarWhereWithAggregatesInput | studyplanScalarWhereWithAggregatesInput[]
    SPID?: IntWithAggregatesFilter<"studyplan"> | number
    Name?: StringWithAggregatesFilter<"studyplan"> | string
    Description?: StringWithAggregatesFilter<"studyplan"> | string
    Icon?: StringNullableWithAggregatesFilter<"studyplan"> | string | null
    Slug?: StringNullableWithAggregatesFilter<"studyplan"> | string | null
  }

  export type studyplanitemWhereInput = {
    AND?: studyplanitemWhereInput | studyplanitemWhereInput[]
    OR?: studyplanitemWhereInput[]
    NOT?: studyplanitemWhereInput | studyplanitemWhereInput[]
    SPIID?: IntFilter<"studyplanitem"> | number
    SPID?: IntFilter<"studyplanitem"> | number
    Name?: StringFilter<"studyplanitem"> | string
    exercise?: ExerciseListRelationFilter
    studyplan?: XOR<StudyplanScalarRelationFilter, studyplanWhereInput>
  }

  export type studyplanitemOrderByWithRelationInput = {
    SPIID?: SortOrder
    SPID?: SortOrder
    Name?: SortOrder
    exercise?: exerciseOrderByRelationAggregateInput
    studyplan?: studyplanOrderByWithRelationInput
    _relevance?: studyplanitemOrderByRelevanceInput
  }

  export type studyplanitemWhereUniqueInput = Prisma.AtLeast<{
    SPIID?: number
    AND?: studyplanitemWhereInput | studyplanitemWhereInput[]
    OR?: studyplanitemWhereInput[]
    NOT?: studyplanitemWhereInput | studyplanitemWhereInput[]
    SPID?: IntFilter<"studyplanitem"> | number
    Name?: StringFilter<"studyplanitem"> | string
    exercise?: ExerciseListRelationFilter
    studyplan?: XOR<StudyplanScalarRelationFilter, studyplanWhereInput>
  }, "SPIID">

  export type studyplanitemOrderByWithAggregationInput = {
    SPIID?: SortOrder
    SPID?: SortOrder
    Name?: SortOrder
    _count?: studyplanitemCountOrderByAggregateInput
    _avg?: studyplanitemAvgOrderByAggregateInput
    _max?: studyplanitemMaxOrderByAggregateInput
    _min?: studyplanitemMinOrderByAggregateInput
    _sum?: studyplanitemSumOrderByAggregateInput
  }

  export type studyplanitemScalarWhereWithAggregatesInput = {
    AND?: studyplanitemScalarWhereWithAggregatesInput | studyplanitemScalarWhereWithAggregatesInput[]
    OR?: studyplanitemScalarWhereWithAggregatesInput[]
    NOT?: studyplanitemScalarWhereWithAggregatesInput | studyplanitemScalarWhereWithAggregatesInput[]
    SPIID?: IntWithAggregatesFilter<"studyplanitem"> | number
    SPID?: IntWithAggregatesFilter<"studyplanitem"> | number
    Name?: StringWithAggregatesFilter<"studyplanitem"> | string
  }

  export type exerciseprogressWhereInput = {
    AND?: exerciseprogressWhereInput | exerciseprogressWhereInput[]
    OR?: exerciseprogressWhereInput[]
    NOT?: exerciseprogressWhereInput | exerciseprogressWhereInput[]
    ID?: IntFilter<"exerciseprogress"> | number
    UID?: StringFilter<"exerciseprogress"> | string
    EID?: IntFilter<"exerciseprogress"> | number
    Status?: Enumexerciseprogress_StatusNullableFilter<"exerciseprogress"> | $Enums.exerciseprogress_Status | null
    UpdatedAt?: DateTimeNullableFilter<"exerciseprogress"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, userWhereInput>
    exercise?: XOR<ExerciseScalarRelationFilter, exerciseWhereInput>
  }

  export type exerciseprogressOrderByWithRelationInput = {
    ID?: SortOrder
    UID?: SortOrder
    EID?: SortOrder
    Status?: SortOrderInput | SortOrder
    UpdatedAt?: SortOrderInput | SortOrder
    user?: userOrderByWithRelationInput
    exercise?: exerciseOrderByWithRelationInput
    _relevance?: exerciseprogressOrderByRelevanceInput
  }

  export type exerciseprogressWhereUniqueInput = Prisma.AtLeast<{
    ID?: number
    UID_EID?: exerciseprogressUIDEIDCompoundUniqueInput
    AND?: exerciseprogressWhereInput | exerciseprogressWhereInput[]
    OR?: exerciseprogressWhereInput[]
    NOT?: exerciseprogressWhereInput | exerciseprogressWhereInput[]
    UID?: StringFilter<"exerciseprogress"> | string
    EID?: IntFilter<"exerciseprogress"> | number
    Status?: Enumexerciseprogress_StatusNullableFilter<"exerciseprogress"> | $Enums.exerciseprogress_Status | null
    UpdatedAt?: DateTimeNullableFilter<"exerciseprogress"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, userWhereInput>
    exercise?: XOR<ExerciseScalarRelationFilter, exerciseWhereInput>
  }, "ID" | "UID_EID">

  export type exerciseprogressOrderByWithAggregationInput = {
    ID?: SortOrder
    UID?: SortOrder
    EID?: SortOrder
    Status?: SortOrderInput | SortOrder
    UpdatedAt?: SortOrderInput | SortOrder
    _count?: exerciseprogressCountOrderByAggregateInput
    _avg?: exerciseprogressAvgOrderByAggregateInput
    _max?: exerciseprogressMaxOrderByAggregateInput
    _min?: exerciseprogressMinOrderByAggregateInput
    _sum?: exerciseprogressSumOrderByAggregateInput
  }

  export type exerciseprogressScalarWhereWithAggregatesInput = {
    AND?: exerciseprogressScalarWhereWithAggregatesInput | exerciseprogressScalarWhereWithAggregatesInput[]
    OR?: exerciseprogressScalarWhereWithAggregatesInput[]
    NOT?: exerciseprogressScalarWhereWithAggregatesInput | exerciseprogressScalarWhereWithAggregatesInput[]
    ID?: IntWithAggregatesFilter<"exerciseprogress"> | number
    UID?: StringWithAggregatesFilter<"exerciseprogress"> | string
    EID?: IntWithAggregatesFilter<"exerciseprogress"> | number
    Status?: Enumexerciseprogress_StatusNullableWithAggregatesFilter<"exerciseprogress"> | $Enums.exerciseprogress_Status | null
    UpdatedAt?: DateTimeNullableWithAggregatesFilter<"exerciseprogress"> | Date | string | null
  }

  export type studyplanprogressWhereInput = {
    AND?: studyplanprogressWhereInput | studyplanprogressWhereInput[]
    OR?: studyplanprogressWhereInput[]
    NOT?: studyplanprogressWhereInput | studyplanprogressWhereInput[]
    SPPID?: IntFilter<"studyplanprogress"> | number
    SPID?: IntFilter<"studyplanprogress"> | number
    UID?: StringFilter<"studyplanprogress"> | string
    Status?: Enumstudyplanprogress_StatusFilter<"studyplanprogress"> | $Enums.studyplanprogress_Status
    StartTime?: DateTimeNullableFilter<"studyplanprogress"> | Date | string | null
    EndTime?: DateTimeNullableFilter<"studyplanprogress"> | Date | string | null
    studyplan?: XOR<StudyplanScalarRelationFilter, studyplanWhereInput>
    user?: XOR<UserScalarRelationFilter, userWhereInput>
  }

  export type studyplanprogressOrderByWithRelationInput = {
    SPPID?: SortOrder
    SPID?: SortOrder
    UID?: SortOrder
    Status?: SortOrder
    StartTime?: SortOrderInput | SortOrder
    EndTime?: SortOrderInput | SortOrder
    studyplan?: studyplanOrderByWithRelationInput
    user?: userOrderByWithRelationInput
    _relevance?: studyplanprogressOrderByRelevanceInput
  }

  export type studyplanprogressWhereUniqueInput = Prisma.AtLeast<{
    SPPID?: number
    AND?: studyplanprogressWhereInput | studyplanprogressWhereInput[]
    OR?: studyplanprogressWhereInput[]
    NOT?: studyplanprogressWhereInput | studyplanprogressWhereInput[]
    SPID?: IntFilter<"studyplanprogress"> | number
    UID?: StringFilter<"studyplanprogress"> | string
    Status?: Enumstudyplanprogress_StatusFilter<"studyplanprogress"> | $Enums.studyplanprogress_Status
    StartTime?: DateTimeNullableFilter<"studyplanprogress"> | Date | string | null
    EndTime?: DateTimeNullableFilter<"studyplanprogress"> | Date | string | null
    studyplan?: XOR<StudyplanScalarRelationFilter, studyplanWhereInput>
    user?: XOR<UserScalarRelationFilter, userWhereInput>
  }, "SPPID">

  export type studyplanprogressOrderByWithAggregationInput = {
    SPPID?: SortOrder
    SPID?: SortOrder
    UID?: SortOrder
    Status?: SortOrder
    StartTime?: SortOrderInput | SortOrder
    EndTime?: SortOrderInput | SortOrder
    _count?: studyplanprogressCountOrderByAggregateInput
    _avg?: studyplanprogressAvgOrderByAggregateInput
    _max?: studyplanprogressMaxOrderByAggregateInput
    _min?: studyplanprogressMinOrderByAggregateInput
    _sum?: studyplanprogressSumOrderByAggregateInput
  }

  export type studyplanprogressScalarWhereWithAggregatesInput = {
    AND?: studyplanprogressScalarWhereWithAggregatesInput | studyplanprogressScalarWhereWithAggregatesInput[]
    OR?: studyplanprogressScalarWhereWithAggregatesInput[]
    NOT?: studyplanprogressScalarWhereWithAggregatesInput | studyplanprogressScalarWhereWithAggregatesInput[]
    SPPID?: IntWithAggregatesFilter<"studyplanprogress"> | number
    SPID?: IntWithAggregatesFilter<"studyplanprogress"> | number
    UID?: StringWithAggregatesFilter<"studyplanprogress"> | string
    Status?: Enumstudyplanprogress_StatusWithAggregatesFilter<"studyplanprogress"> | $Enums.studyplanprogress_Status
    StartTime?: DateTimeNullableWithAggregatesFilter<"studyplanprogress"> | Date | string | null
    EndTime?: DateTimeNullableWithAggregatesFilter<"studyplanprogress"> | Date | string | null
  }

  export type listWhereInput = {
    AND?: listWhereInput | listWhereInput[]
    OR?: listWhereInput[]
    NOT?: listWhereInput | listWhereInput[]
    LID?: IntFilter<"list"> | number
    UID?: StringFilter<"list"> | string
    Name?: StringFilter<"list"> | string
    Description?: StringNullableFilter<"list"> | string | null
    CreatedAt?: DateTimeNullableFilter<"list"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, userWhereInput>
    listitem?: ListitemListRelationFilter
  }

  export type listOrderByWithRelationInput = {
    LID?: SortOrder
    UID?: SortOrder
    Name?: SortOrder
    Description?: SortOrderInput | SortOrder
    CreatedAt?: SortOrderInput | SortOrder
    user?: userOrderByWithRelationInput
    listitem?: listitemOrderByRelationAggregateInput
    _relevance?: listOrderByRelevanceInput
  }

  export type listWhereUniqueInput = Prisma.AtLeast<{
    LID?: number
    AND?: listWhereInput | listWhereInput[]
    OR?: listWhereInput[]
    NOT?: listWhereInput | listWhereInput[]
    UID?: StringFilter<"list"> | string
    Name?: StringFilter<"list"> | string
    Description?: StringNullableFilter<"list"> | string | null
    CreatedAt?: DateTimeNullableFilter<"list"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, userWhereInput>
    listitem?: ListitemListRelationFilter
  }, "LID">

  export type listOrderByWithAggregationInput = {
    LID?: SortOrder
    UID?: SortOrder
    Name?: SortOrder
    Description?: SortOrderInput | SortOrder
    CreatedAt?: SortOrderInput | SortOrder
    _count?: listCountOrderByAggregateInput
    _avg?: listAvgOrderByAggregateInput
    _max?: listMaxOrderByAggregateInput
    _min?: listMinOrderByAggregateInput
    _sum?: listSumOrderByAggregateInput
  }

  export type listScalarWhereWithAggregatesInput = {
    AND?: listScalarWhereWithAggregatesInput | listScalarWhereWithAggregatesInput[]
    OR?: listScalarWhereWithAggregatesInput[]
    NOT?: listScalarWhereWithAggregatesInput | listScalarWhereWithAggregatesInput[]
    LID?: IntWithAggregatesFilter<"list"> | number
    UID?: StringWithAggregatesFilter<"list"> | string
    Name?: StringWithAggregatesFilter<"list"> | string
    Description?: StringNullableWithAggregatesFilter<"list"> | string | null
    CreatedAt?: DateTimeNullableWithAggregatesFilter<"list"> | Date | string | null
  }

  export type listitemWhereInput = {
    AND?: listitemWhereInput | listitemWhereInput[]
    OR?: listitemWhereInput[]
    NOT?: listitemWhereInput | listitemWhereInput[]
    LID?: IntFilter<"listitem"> | number
    EID?: IntFilter<"listitem"> | number
    list?: XOR<ListScalarRelationFilter, listWhereInput>
    exercise?: XOR<ExerciseScalarRelationFilter, exerciseWhereInput>
  }

  export type listitemOrderByWithRelationInput = {
    LID?: SortOrder
    EID?: SortOrder
    list?: listOrderByWithRelationInput
    exercise?: exerciseOrderByWithRelationInput
  }

  export type listitemWhereUniqueInput = Prisma.AtLeast<{
    LID_EID?: listitemLIDEIDCompoundUniqueInput
    AND?: listitemWhereInput | listitemWhereInput[]
    OR?: listitemWhereInput[]
    NOT?: listitemWhereInput | listitemWhereInput[]
    LID?: IntFilter<"listitem"> | number
    EID?: IntFilter<"listitem"> | number
    list?: XOR<ListScalarRelationFilter, listWhereInput>
    exercise?: XOR<ExerciseScalarRelationFilter, exerciseWhereInput>
  }, "LID_EID">

  export type listitemOrderByWithAggregationInput = {
    LID?: SortOrder
    EID?: SortOrder
    _count?: listitemCountOrderByAggregateInput
    _avg?: listitemAvgOrderByAggregateInput
    _max?: listitemMaxOrderByAggregateInput
    _min?: listitemMinOrderByAggregateInput
    _sum?: listitemSumOrderByAggregateInput
  }

  export type listitemScalarWhereWithAggregatesInput = {
    AND?: listitemScalarWhereWithAggregatesInput | listitemScalarWhereWithAggregatesInput[]
    OR?: listitemScalarWhereWithAggregatesInput[]
    NOT?: listitemScalarWhereWithAggregatesInput | listitemScalarWhereWithAggregatesInput[]
    LID?: IntWithAggregatesFilter<"listitem"> | number
    EID?: IntWithAggregatesFilter<"listitem"> | number
  }

  export type exerciseCreateInput = {
    Name: string
    Slug: string
    Content: string
    Difficulty?: $Enums.exercise_Difficulty
    template?: string | null
    comment?: commentCreateNestedManyWithoutExerciseInput
    topic?: topicCreateNestedOneWithoutExerciseInput
    studyplanitem?: studyplanitemCreateNestedOneWithoutExerciseInput
    exerciselike?: exerciselikeCreateNestedManyWithoutExerciseInput
    exerciseprogress?: exerciseprogressCreateNestedManyWithoutExerciseInput
    listitem?: listitemCreateNestedManyWithoutExerciseInput
    submission?: submissionCreateNestedManyWithoutExerciseInput
    testcase?: testcaseCreateNestedManyWithoutExerciseInput
  }

  export type exerciseUncheckedCreateInput = {
    EID?: number
    TpID?: number | null
    SPIID?: number | null
    Name: string
    Slug: string
    Content: string
    Difficulty?: $Enums.exercise_Difficulty
    template?: string | null
    comment?: commentUncheckedCreateNestedManyWithoutExerciseInput
    exerciselike?: exerciselikeUncheckedCreateNestedManyWithoutExerciseInput
    exerciseprogress?: exerciseprogressUncheckedCreateNestedManyWithoutExerciseInput
    listitem?: listitemUncheckedCreateNestedManyWithoutExerciseInput
    submission?: submissionUncheckedCreateNestedManyWithoutExerciseInput
    testcase?: testcaseUncheckedCreateNestedManyWithoutExerciseInput
  }

  export type exerciseUpdateInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Slug?: StringFieldUpdateOperationsInput | string
    Content?: StringFieldUpdateOperationsInput | string
    Difficulty?: Enumexercise_DifficultyFieldUpdateOperationsInput | $Enums.exercise_Difficulty
    template?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: commentUpdateManyWithoutExerciseNestedInput
    topic?: topicUpdateOneWithoutExerciseNestedInput
    studyplanitem?: studyplanitemUpdateOneWithoutExerciseNestedInput
    exerciselike?: exerciselikeUpdateManyWithoutExerciseNestedInput
    exerciseprogress?: exerciseprogressUpdateManyWithoutExerciseNestedInput
    listitem?: listitemUpdateManyWithoutExerciseNestedInput
    submission?: submissionUpdateManyWithoutExerciseNestedInput
    testcase?: testcaseUpdateManyWithoutExerciseNestedInput
  }

  export type exerciseUncheckedUpdateInput = {
    EID?: IntFieldUpdateOperationsInput | number
    TpID?: NullableIntFieldUpdateOperationsInput | number | null
    SPIID?: NullableIntFieldUpdateOperationsInput | number | null
    Name?: StringFieldUpdateOperationsInput | string
    Slug?: StringFieldUpdateOperationsInput | string
    Content?: StringFieldUpdateOperationsInput | string
    Difficulty?: Enumexercise_DifficultyFieldUpdateOperationsInput | $Enums.exercise_Difficulty
    template?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: commentUncheckedUpdateManyWithoutExerciseNestedInput
    exerciselike?: exerciselikeUncheckedUpdateManyWithoutExerciseNestedInput
    exerciseprogress?: exerciseprogressUncheckedUpdateManyWithoutExerciseNestedInput
    listitem?: listitemUncheckedUpdateManyWithoutExerciseNestedInput
    submission?: submissionUncheckedUpdateManyWithoutExerciseNestedInput
    testcase?: testcaseUncheckedUpdateManyWithoutExerciseNestedInput
  }

  export type exerciseCreateManyInput = {
    EID?: number
    TpID?: number | null
    SPIID?: number | null
    Name: string
    Slug: string
    Content: string
    Difficulty?: $Enums.exercise_Difficulty
    template?: string | null
  }

  export type exerciseUpdateManyMutationInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Slug?: StringFieldUpdateOperationsInput | string
    Content?: StringFieldUpdateOperationsInput | string
    Difficulty?: Enumexercise_DifficultyFieldUpdateOperationsInput | $Enums.exercise_Difficulty
    template?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type exerciseUncheckedUpdateManyInput = {
    EID?: IntFieldUpdateOperationsInput | number
    TpID?: NullableIntFieldUpdateOperationsInput | number | null
    SPIID?: NullableIntFieldUpdateOperationsInput | number | null
    Name?: StringFieldUpdateOperationsInput | string
    Slug?: StringFieldUpdateOperationsInput | string
    Content?: StringFieldUpdateOperationsInput | string
    Difficulty?: Enumexercise_DifficultyFieldUpdateOperationsInput | $Enums.exercise_Difficulty
    template?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type submissionCreateInput = {
    Code?: string | null
    CreatedAt?: Date | string | null
    Result?: $Enums.submission_Result | null
    isPublic?: boolean | null
    exercise: exerciseCreateNestedOneWithoutSubmissionInput
    user: userCreateNestedOneWithoutSubmissionInput
    testcaseresult?: testcaseresultCreateNestedManyWithoutSubmissionInput
  }

  export type submissionUncheckedCreateInput = {
    SID?: number
    UID: string
    EID: number
    Code?: string | null
    CreatedAt?: Date | string | null
    Result?: $Enums.submission_Result | null
    isPublic?: boolean | null
    testcaseresult?: testcaseresultUncheckedCreateNestedManyWithoutSubmissionInput
  }

  export type submissionUpdateInput = {
    Code?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Result?: NullableEnumsubmission_ResultFieldUpdateOperationsInput | $Enums.submission_Result | null
    isPublic?: NullableBoolFieldUpdateOperationsInput | boolean | null
    exercise?: exerciseUpdateOneRequiredWithoutSubmissionNestedInput
    user?: userUpdateOneRequiredWithoutSubmissionNestedInput
    testcaseresult?: testcaseresultUpdateManyWithoutSubmissionNestedInput
  }

  export type submissionUncheckedUpdateInput = {
    SID?: IntFieldUpdateOperationsInput | number
    UID?: StringFieldUpdateOperationsInput | string
    EID?: IntFieldUpdateOperationsInput | number
    Code?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Result?: NullableEnumsubmission_ResultFieldUpdateOperationsInput | $Enums.submission_Result | null
    isPublic?: NullableBoolFieldUpdateOperationsInput | boolean | null
    testcaseresult?: testcaseresultUncheckedUpdateManyWithoutSubmissionNestedInput
  }

  export type submissionCreateManyInput = {
    SID?: number
    UID: string
    EID: number
    Code?: string | null
    CreatedAt?: Date | string | null
    Result?: $Enums.submission_Result | null
    isPublic?: boolean | null
  }

  export type submissionUpdateManyMutationInput = {
    Code?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Result?: NullableEnumsubmission_ResultFieldUpdateOperationsInput | $Enums.submission_Result | null
    isPublic?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type submissionUncheckedUpdateManyInput = {
    SID?: IntFieldUpdateOperationsInput | number
    UID?: StringFieldUpdateOperationsInput | string
    EID?: IntFieldUpdateOperationsInput | number
    Code?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Result?: NullableEnumsubmission_ResultFieldUpdateOperationsInput | $Enums.submission_Result | null
    isPublic?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type testcaseCreateInput = {
    Input?: string | null
    ExpectedOutput: string
    isHidden?: boolean | null
    exercise: exerciseCreateNestedOneWithoutTestcaseInput
    testcaseresult?: testcaseresultCreateNestedManyWithoutTestcaseInput
  }

  export type testcaseUncheckedCreateInput = {
    TCID?: number
    EID: number
    Input?: string | null
    ExpectedOutput: string
    isHidden?: boolean | null
    testcaseresult?: testcaseresultUncheckedCreateNestedManyWithoutTestcaseInput
  }

  export type testcaseUpdateInput = {
    Input?: NullableStringFieldUpdateOperationsInput | string | null
    ExpectedOutput?: StringFieldUpdateOperationsInput | string
    isHidden?: NullableBoolFieldUpdateOperationsInput | boolean | null
    exercise?: exerciseUpdateOneRequiredWithoutTestcaseNestedInput
    testcaseresult?: testcaseresultUpdateManyWithoutTestcaseNestedInput
  }

  export type testcaseUncheckedUpdateInput = {
    TCID?: IntFieldUpdateOperationsInput | number
    EID?: IntFieldUpdateOperationsInput | number
    Input?: NullableStringFieldUpdateOperationsInput | string | null
    ExpectedOutput?: StringFieldUpdateOperationsInput | string
    isHidden?: NullableBoolFieldUpdateOperationsInput | boolean | null
    testcaseresult?: testcaseresultUncheckedUpdateManyWithoutTestcaseNestedInput
  }

  export type testcaseCreateManyInput = {
    TCID?: number
    EID: number
    Input?: string | null
    ExpectedOutput: string
    isHidden?: boolean | null
  }

  export type testcaseUpdateManyMutationInput = {
    Input?: NullableStringFieldUpdateOperationsInput | string | null
    ExpectedOutput?: StringFieldUpdateOperationsInput | string
    isHidden?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type testcaseUncheckedUpdateManyInput = {
    TCID?: IntFieldUpdateOperationsInput | number
    EID?: IntFieldUpdateOperationsInput | number
    Input?: NullableStringFieldUpdateOperationsInput | string | null
    ExpectedOutput?: StringFieldUpdateOperationsInput | string
    isHidden?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type testcaseresultCreateInput = {
    ActualOutput: string
    Result?: $Enums.testcaseresult_Result
    submission: submissionCreateNestedOneWithoutTestcaseresultInput
    testcase: testcaseCreateNestedOneWithoutTestcaseresultInput
  }

  export type testcaseresultUncheckedCreateInput = {
    TCRID?: number
    SID: number
    TCID: number
    ActualOutput: string
    Result?: $Enums.testcaseresult_Result
  }

  export type testcaseresultUpdateInput = {
    ActualOutput?: StringFieldUpdateOperationsInput | string
    Result?: Enumtestcaseresult_ResultFieldUpdateOperationsInput | $Enums.testcaseresult_Result
    submission?: submissionUpdateOneRequiredWithoutTestcaseresultNestedInput
    testcase?: testcaseUpdateOneRequiredWithoutTestcaseresultNestedInput
  }

  export type testcaseresultUncheckedUpdateInput = {
    TCRID?: IntFieldUpdateOperationsInput | number
    SID?: IntFieldUpdateOperationsInput | number
    TCID?: IntFieldUpdateOperationsInput | number
    ActualOutput?: StringFieldUpdateOperationsInput | string
    Result?: Enumtestcaseresult_ResultFieldUpdateOperationsInput | $Enums.testcaseresult_Result
  }

  export type testcaseresultCreateManyInput = {
    TCRID?: number
    SID: number
    TCID: number
    ActualOutput: string
    Result?: $Enums.testcaseresult_Result
  }

  export type testcaseresultUpdateManyMutationInput = {
    ActualOutput?: StringFieldUpdateOperationsInput | string
    Result?: Enumtestcaseresult_ResultFieldUpdateOperationsInput | $Enums.testcaseresult_Result
  }

  export type testcaseresultUncheckedUpdateManyInput = {
    TCRID?: IntFieldUpdateOperationsInput | number
    SID?: IntFieldUpdateOperationsInput | number
    TCID?: IntFieldUpdateOperationsInput | number
    ActualOutput?: StringFieldUpdateOperationsInput | string
    Result?: Enumtestcaseresult_ResultFieldUpdateOperationsInput | $Enums.testcaseresult_Result
  }

  export type topicCreateInput = {
    Name: string
    Slug: string
    exercise?: exerciseCreateNestedManyWithoutTopicInput
  }

  export type topicUncheckedCreateInput = {
    TpID?: number
    Name: string
    Slug: string
    exercise?: exerciseUncheckedCreateNestedManyWithoutTopicInput
  }

  export type topicUpdateInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Slug?: StringFieldUpdateOperationsInput | string
    exercise?: exerciseUpdateManyWithoutTopicNestedInput
  }

  export type topicUncheckedUpdateInput = {
    TpID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Slug?: StringFieldUpdateOperationsInput | string
    exercise?: exerciseUncheckedUpdateManyWithoutTopicNestedInput
  }

  export type topicCreateManyInput = {
    TpID?: number
    Name: string
    Slug: string
  }

  export type topicUpdateManyMutationInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Slug?: StringFieldUpdateOperationsInput | string
  }

  export type topicUncheckedUpdateManyInput = {
    TpID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Slug?: StringFieldUpdateOperationsInput | string
  }

  export type userCreateInput = {
    UID?: string
    Username: string
    Email: string
    Password: string
    Role?: $Enums.user_Role
    CreatedAt?: Date | string | null
    Image?: string | null
    comment?: commentCreateNestedManyWithoutUserInput
    commentlike?: commentlikeCreateNestedManyWithoutUserInput
    exerciselike?: exerciselikeCreateNestedManyWithoutUserInput
    exerciseprogress?: exerciseprogressCreateNestedManyWithoutUserInput
    friendship_friendship_requesterTouser?: friendshipCreateNestedManyWithoutUser_friendship_requesterTouserInput
    friendship_friendship_addresseeTouser?: friendshipCreateNestedManyWithoutUser_friendship_addresseeTouserInput
    list?: listCreateNestedManyWithoutUserInput
    notification_notification_UIDTouser?: notificationCreateNestedManyWithoutUser_notification_UIDTouserInput
    notification_notification_FromUserTouser?: notificationCreateNestedManyWithoutUser_notification_FromUserTouserInput
    studyplanprogress?: studyplanprogressCreateNestedManyWithoutUserInput
    submission?: submissionCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateInput = {
    UID?: string
    Username: string
    Email: string
    Password: string
    Role?: $Enums.user_Role
    CreatedAt?: Date | string | null
    Image?: string | null
    comment?: commentUncheckedCreateNestedManyWithoutUserInput
    commentlike?: commentlikeUncheckedCreateNestedManyWithoutUserInput
    exerciselike?: exerciselikeUncheckedCreateNestedManyWithoutUserInput
    exerciseprogress?: exerciseprogressUncheckedCreateNestedManyWithoutUserInput
    friendship_friendship_requesterTouser?: friendshipUncheckedCreateNestedManyWithoutUser_friendship_requesterTouserInput
    friendship_friendship_addresseeTouser?: friendshipUncheckedCreateNestedManyWithoutUser_friendship_addresseeTouserInput
    list?: listUncheckedCreateNestedManyWithoutUserInput
    notification_notification_UIDTouser?: notificationUncheckedCreateNestedManyWithoutUser_notification_UIDTouserInput
    notification_notification_FromUserTouser?: notificationUncheckedCreateNestedManyWithoutUser_notification_FromUserTouserInput
    studyplanprogress?: studyplanprogressUncheckedCreateNestedManyWithoutUserInput
    submission?: submissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type userUpdateInput = {
    UID?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: Enumuser_RoleFieldUpdateOperationsInput | $Enums.user_Role
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Image?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: commentUpdateManyWithoutUserNestedInput
    commentlike?: commentlikeUpdateManyWithoutUserNestedInput
    exerciselike?: exerciselikeUpdateManyWithoutUserNestedInput
    exerciseprogress?: exerciseprogressUpdateManyWithoutUserNestedInput
    friendship_friendship_requesterTouser?: friendshipUpdateManyWithoutUser_friendship_requesterTouserNestedInput
    friendship_friendship_addresseeTouser?: friendshipUpdateManyWithoutUser_friendship_addresseeTouserNestedInput
    list?: listUpdateManyWithoutUserNestedInput
    notification_notification_UIDTouser?: notificationUpdateManyWithoutUser_notification_UIDTouserNestedInput
    notification_notification_FromUserTouser?: notificationUpdateManyWithoutUser_notification_FromUserTouserNestedInput
    studyplanprogress?: studyplanprogressUpdateManyWithoutUserNestedInput
    submission?: submissionUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateInput = {
    UID?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: Enumuser_RoleFieldUpdateOperationsInput | $Enums.user_Role
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Image?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: commentUncheckedUpdateManyWithoutUserNestedInput
    commentlike?: commentlikeUncheckedUpdateManyWithoutUserNestedInput
    exerciselike?: exerciselikeUncheckedUpdateManyWithoutUserNestedInput
    exerciseprogress?: exerciseprogressUncheckedUpdateManyWithoutUserNestedInput
    friendship_friendship_requesterTouser?: friendshipUncheckedUpdateManyWithoutUser_friendship_requesterTouserNestedInput
    friendship_friendship_addresseeTouser?: friendshipUncheckedUpdateManyWithoutUser_friendship_addresseeTouserNestedInput
    list?: listUncheckedUpdateManyWithoutUserNestedInput
    notification_notification_UIDTouser?: notificationUncheckedUpdateManyWithoutUser_notification_UIDTouserNestedInput
    notification_notification_FromUserTouser?: notificationUncheckedUpdateManyWithoutUser_notification_FromUserTouserNestedInput
    studyplanprogress?: studyplanprogressUncheckedUpdateManyWithoutUserNestedInput
    submission?: submissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type userCreateManyInput = {
    UID?: string
    Username: string
    Email: string
    Password: string
    Role?: $Enums.user_Role
    CreatedAt?: Date | string | null
    Image?: string | null
  }

  export type userUpdateManyMutationInput = {
    UID?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: Enumuser_RoleFieldUpdateOperationsInput | $Enums.user_Role
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type userUncheckedUpdateManyInput = {
    UID?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: Enumuser_RoleFieldUpdateOperationsInput | $Enums.user_Role
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type friendshipCreateInput = {
    status?: $Enums.friendship_status
    CreatedAt?: Date | string | null
    user_friendship_requesterTouser: userCreateNestedOneWithoutFriendship_friendship_requesterTouserInput
    user_friendship_addresseeTouser: userCreateNestedOneWithoutFriendship_friendship_addresseeTouserInput
  }

  export type friendshipUncheckedCreateInput = {
    FID?: number
    requester: string
    addressee: string
    status?: $Enums.friendship_status
    CreatedAt?: Date | string | null
  }

  export type friendshipUpdateInput = {
    status?: Enumfriendship_statusFieldUpdateOperationsInput | $Enums.friendship_status
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user_friendship_requesterTouser?: userUpdateOneRequiredWithoutFriendship_friendship_requesterTouserNestedInput
    user_friendship_addresseeTouser?: userUpdateOneRequiredWithoutFriendship_friendship_addresseeTouserNestedInput
  }

  export type friendshipUncheckedUpdateInput = {
    FID?: IntFieldUpdateOperationsInput | number
    requester?: StringFieldUpdateOperationsInput | string
    addressee?: StringFieldUpdateOperationsInput | string
    status?: Enumfriendship_statusFieldUpdateOperationsInput | $Enums.friendship_status
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type friendshipCreateManyInput = {
    FID?: number
    requester: string
    addressee: string
    status?: $Enums.friendship_status
    CreatedAt?: Date | string | null
  }

  export type friendshipUpdateManyMutationInput = {
    status?: Enumfriendship_statusFieldUpdateOperationsInput | $Enums.friendship_status
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type friendshipUncheckedUpdateManyInput = {
    FID?: IntFieldUpdateOperationsInput | number
    requester?: StringFieldUpdateOperationsInput | string
    addressee?: StringFieldUpdateOperationsInput | string
    status?: Enumfriendship_statusFieldUpdateOperationsInput | $Enums.friendship_status
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type chapterCreateInput = {
    ChapterIndex: number
    Name: string
    lesson?: lessonCreateNestedManyWithoutChapterInput
  }

  export type chapterUncheckedCreateInput = {
    CID?: number
    ChapterIndex: number
    Name: string
    lesson?: lessonUncheckedCreateNestedManyWithoutChapterInput
  }

  export type chapterUpdateInput = {
    ChapterIndex?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    lesson?: lessonUpdateManyWithoutChapterNestedInput
  }

  export type chapterUncheckedUpdateInput = {
    CID?: IntFieldUpdateOperationsInput | number
    ChapterIndex?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    lesson?: lessonUncheckedUpdateManyWithoutChapterNestedInput
  }

  export type chapterCreateManyInput = {
    CID?: number
    ChapterIndex: number
    Name: string
  }

  export type chapterUpdateManyMutationInput = {
    ChapterIndex?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
  }

  export type chapterUncheckedUpdateManyInput = {
    CID?: IntFieldUpdateOperationsInput | number
    ChapterIndex?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
  }

  export type commentCreateInput = {
    Content: string
    CreatedAt?: Date | string | null
    user: userCreateNestedOneWithoutCommentInput
    lesson?: lessonCreateNestedOneWithoutCommentInput
    exercise?: exerciseCreateNestedOneWithoutCommentInput
    commentlike?: commentlikeCreateNestedManyWithoutCommentInput
    notification?: notificationCreateNestedManyWithoutCommentInput
  }

  export type commentUncheckedCreateInput = {
    CoID?: number
    UID: string
    LID?: number | null
    EID?: number | null
    Content: string
    CreatedAt?: Date | string | null
    commentlike?: commentlikeUncheckedCreateNestedManyWithoutCommentInput
    notification?: notificationUncheckedCreateNestedManyWithoutCommentInput
  }

  export type commentUpdateInput = {
    Content?: StringFieldUpdateOperationsInput | string
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: userUpdateOneRequiredWithoutCommentNestedInput
    lesson?: lessonUpdateOneWithoutCommentNestedInput
    exercise?: exerciseUpdateOneWithoutCommentNestedInput
    commentlike?: commentlikeUpdateManyWithoutCommentNestedInput
    notification?: notificationUpdateManyWithoutCommentNestedInput
  }

  export type commentUncheckedUpdateInput = {
    CoID?: IntFieldUpdateOperationsInput | number
    UID?: StringFieldUpdateOperationsInput | string
    LID?: NullableIntFieldUpdateOperationsInput | number | null
    EID?: NullableIntFieldUpdateOperationsInput | number | null
    Content?: StringFieldUpdateOperationsInput | string
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    commentlike?: commentlikeUncheckedUpdateManyWithoutCommentNestedInput
    notification?: notificationUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type commentCreateManyInput = {
    CoID?: number
    UID: string
    LID?: number | null
    EID?: number | null
    Content: string
    CreatedAt?: Date | string | null
  }

  export type commentUpdateManyMutationInput = {
    Content?: StringFieldUpdateOperationsInput | string
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type commentUncheckedUpdateManyInput = {
    CoID?: IntFieldUpdateOperationsInput | number
    UID?: StringFieldUpdateOperationsInput | string
    LID?: NullableIntFieldUpdateOperationsInput | number | null
    EID?: NullableIntFieldUpdateOperationsInput | number | null
    Content?: StringFieldUpdateOperationsInput | string
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type commentlikeCreateInput = {
    CreatedAt?: Date | string | null
    user: userCreateNestedOneWithoutCommentlikeInput
    comment: commentCreateNestedOneWithoutCommentlikeInput
  }

  export type commentlikeUncheckedCreateInput = {
    CLID?: number
    UID: string
    CoID: number
    CreatedAt?: Date | string | null
  }

  export type commentlikeUpdateInput = {
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: userUpdateOneRequiredWithoutCommentlikeNestedInput
    comment?: commentUpdateOneRequiredWithoutCommentlikeNestedInput
  }

  export type commentlikeUncheckedUpdateInput = {
    CLID?: IntFieldUpdateOperationsInput | number
    UID?: StringFieldUpdateOperationsInput | string
    CoID?: IntFieldUpdateOperationsInput | number
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type commentlikeCreateManyInput = {
    CLID?: number
    UID: string
    CoID: number
    CreatedAt?: Date | string | null
  }

  export type commentlikeUpdateManyMutationInput = {
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type commentlikeUncheckedUpdateManyInput = {
    CLID?: IntFieldUpdateOperationsInput | number
    UID?: StringFieldUpdateOperationsInput | string
    CoID?: IntFieldUpdateOperationsInput | number
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type exerciselikeCreateInput = {
    CreatedAt?: Date | string | null
    user: userCreateNestedOneWithoutExerciselikeInput
    exercise: exerciseCreateNestedOneWithoutExerciselikeInput
  }

  export type exerciselikeUncheckedCreateInput = {
    ELID?: number
    UID: string
    EID: number
    CreatedAt?: Date | string | null
  }

  export type exerciselikeUpdateInput = {
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: userUpdateOneRequiredWithoutExerciselikeNestedInput
    exercise?: exerciseUpdateOneRequiredWithoutExerciselikeNestedInput
  }

  export type exerciselikeUncheckedUpdateInput = {
    ELID?: IntFieldUpdateOperationsInput | number
    UID?: StringFieldUpdateOperationsInput | string
    EID?: IntFieldUpdateOperationsInput | number
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type exerciselikeCreateManyInput = {
    ELID?: number
    UID: string
    EID: number
    CreatedAt?: Date | string | null
  }

  export type exerciselikeUpdateManyMutationInput = {
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type exerciselikeUncheckedUpdateManyInput = {
    ELID?: IntFieldUpdateOperationsInput | number
    UID?: StringFieldUpdateOperationsInput | string
    EID?: IntFieldUpdateOperationsInput | number
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type lessonCreateInput = {
    LessonIndex: number
    Title: string
    Slug: string
    comment?: commentCreateNestedManyWithoutLessonInput
    chapter: chapterCreateNestedOneWithoutLessonInput
  }

  export type lessonUncheckedCreateInput = {
    LID?: number
    CID: number
    LessonIndex: number
    Title: string
    Slug: string
    comment?: commentUncheckedCreateNestedManyWithoutLessonInput
  }

  export type lessonUpdateInput = {
    LessonIndex?: IntFieldUpdateOperationsInput | number
    Title?: StringFieldUpdateOperationsInput | string
    Slug?: StringFieldUpdateOperationsInput | string
    comment?: commentUpdateManyWithoutLessonNestedInput
    chapter?: chapterUpdateOneRequiredWithoutLessonNestedInput
  }

  export type lessonUncheckedUpdateInput = {
    LID?: IntFieldUpdateOperationsInput | number
    CID?: IntFieldUpdateOperationsInput | number
    LessonIndex?: IntFieldUpdateOperationsInput | number
    Title?: StringFieldUpdateOperationsInput | string
    Slug?: StringFieldUpdateOperationsInput | string
    comment?: commentUncheckedUpdateManyWithoutLessonNestedInput
  }

  export type lessonCreateManyInput = {
    LID?: number
    CID: number
    LessonIndex: number
    Title: string
    Slug: string
  }

  export type lessonUpdateManyMutationInput = {
    LessonIndex?: IntFieldUpdateOperationsInput | number
    Title?: StringFieldUpdateOperationsInput | string
    Slug?: StringFieldUpdateOperationsInput | string
  }

  export type lessonUncheckedUpdateManyInput = {
    LID?: IntFieldUpdateOperationsInput | number
    CID?: IntFieldUpdateOperationsInput | number
    LessonIndex?: IntFieldUpdateOperationsInput | number
    Title?: StringFieldUpdateOperationsInput | string
    Slug?: StringFieldUpdateOperationsInput | string
  }

  export type notificationCreateInput = {
    Type: $Enums.notification_Type
    Message: string
    CreatedAt?: Date | string | null
    isRead?: boolean | null
    user_notification_UIDTouser: userCreateNestedOneWithoutNotification_notification_UIDTouserInput
    user_notification_FromUserTouser: userCreateNestedOneWithoutNotification_notification_FromUserTouserInput
    comment?: commentCreateNestedOneWithoutNotificationInput
  }

  export type notificationUncheckedCreateInput = {
    NID?: number
    UID: string
    Type: $Enums.notification_Type
    FromUser: string
    Message: string
    CoID?: number | null
    CreatedAt?: Date | string | null
    isRead?: boolean | null
  }

  export type notificationUpdateInput = {
    Type?: Enumnotification_TypeFieldUpdateOperationsInput | $Enums.notification_Type
    Message?: StringFieldUpdateOperationsInput | string
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isRead?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user_notification_UIDTouser?: userUpdateOneRequiredWithoutNotification_notification_UIDTouserNestedInput
    user_notification_FromUserTouser?: userUpdateOneRequiredWithoutNotification_notification_FromUserTouserNestedInput
    comment?: commentUpdateOneWithoutNotificationNestedInput
  }

  export type notificationUncheckedUpdateInput = {
    NID?: IntFieldUpdateOperationsInput | number
    UID?: StringFieldUpdateOperationsInput | string
    Type?: Enumnotification_TypeFieldUpdateOperationsInput | $Enums.notification_Type
    FromUser?: StringFieldUpdateOperationsInput | string
    Message?: StringFieldUpdateOperationsInput | string
    CoID?: NullableIntFieldUpdateOperationsInput | number | null
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isRead?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type notificationCreateManyInput = {
    NID?: number
    UID: string
    Type: $Enums.notification_Type
    FromUser: string
    Message: string
    CoID?: number | null
    CreatedAt?: Date | string | null
    isRead?: boolean | null
  }

  export type notificationUpdateManyMutationInput = {
    Type?: Enumnotification_TypeFieldUpdateOperationsInput | $Enums.notification_Type
    Message?: StringFieldUpdateOperationsInput | string
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isRead?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type notificationUncheckedUpdateManyInput = {
    NID?: IntFieldUpdateOperationsInput | number
    UID?: StringFieldUpdateOperationsInput | string
    Type?: Enumnotification_TypeFieldUpdateOperationsInput | $Enums.notification_Type
    FromUser?: StringFieldUpdateOperationsInput | string
    Message?: StringFieldUpdateOperationsInput | string
    CoID?: NullableIntFieldUpdateOperationsInput | number | null
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isRead?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type studyplanCreateInput = {
    Name: string
    Description: string
    Icon?: string | null
    Slug?: string | null
    studyplanitem?: studyplanitemCreateNestedManyWithoutStudyplanInput
    studyplanprogress?: studyplanprogressCreateNestedManyWithoutStudyplanInput
  }

  export type studyplanUncheckedCreateInput = {
    SPID?: number
    Name: string
    Description: string
    Icon?: string | null
    Slug?: string | null
    studyplanitem?: studyplanitemUncheckedCreateNestedManyWithoutStudyplanInput
    studyplanprogress?: studyplanprogressUncheckedCreateNestedManyWithoutStudyplanInput
  }

  export type studyplanUpdateInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    Icon?: NullableStringFieldUpdateOperationsInput | string | null
    Slug?: NullableStringFieldUpdateOperationsInput | string | null
    studyplanitem?: studyplanitemUpdateManyWithoutStudyplanNestedInput
    studyplanprogress?: studyplanprogressUpdateManyWithoutStudyplanNestedInput
  }

  export type studyplanUncheckedUpdateInput = {
    SPID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    Icon?: NullableStringFieldUpdateOperationsInput | string | null
    Slug?: NullableStringFieldUpdateOperationsInput | string | null
    studyplanitem?: studyplanitemUncheckedUpdateManyWithoutStudyplanNestedInput
    studyplanprogress?: studyplanprogressUncheckedUpdateManyWithoutStudyplanNestedInput
  }

  export type studyplanCreateManyInput = {
    SPID?: number
    Name: string
    Description: string
    Icon?: string | null
    Slug?: string | null
  }

  export type studyplanUpdateManyMutationInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    Icon?: NullableStringFieldUpdateOperationsInput | string | null
    Slug?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type studyplanUncheckedUpdateManyInput = {
    SPID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    Icon?: NullableStringFieldUpdateOperationsInput | string | null
    Slug?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type studyplanitemCreateInput = {
    Name: string
    exercise?: exerciseCreateNestedManyWithoutStudyplanitemInput
    studyplan: studyplanCreateNestedOneWithoutStudyplanitemInput
  }

  export type studyplanitemUncheckedCreateInput = {
    SPIID?: number
    SPID: number
    Name: string
    exercise?: exerciseUncheckedCreateNestedManyWithoutStudyplanitemInput
  }

  export type studyplanitemUpdateInput = {
    Name?: StringFieldUpdateOperationsInput | string
    exercise?: exerciseUpdateManyWithoutStudyplanitemNestedInput
    studyplan?: studyplanUpdateOneRequiredWithoutStudyplanitemNestedInput
  }

  export type studyplanitemUncheckedUpdateInput = {
    SPIID?: IntFieldUpdateOperationsInput | number
    SPID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    exercise?: exerciseUncheckedUpdateManyWithoutStudyplanitemNestedInput
  }

  export type studyplanitemCreateManyInput = {
    SPIID?: number
    SPID: number
    Name: string
  }

  export type studyplanitemUpdateManyMutationInput = {
    Name?: StringFieldUpdateOperationsInput | string
  }

  export type studyplanitemUncheckedUpdateManyInput = {
    SPIID?: IntFieldUpdateOperationsInput | number
    SPID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
  }

  export type exerciseprogressCreateInput = {
    Status?: $Enums.exerciseprogress_Status | null
    UpdatedAt?: Date | string | null
    user: userCreateNestedOneWithoutExerciseprogressInput
    exercise: exerciseCreateNestedOneWithoutExerciseprogressInput
  }

  export type exerciseprogressUncheckedCreateInput = {
    ID?: number
    UID: string
    EID: number
    Status?: $Enums.exerciseprogress_Status | null
    UpdatedAt?: Date | string | null
  }

  export type exerciseprogressUpdateInput = {
    Status?: NullableEnumexerciseprogress_StatusFieldUpdateOperationsInput | $Enums.exerciseprogress_Status | null
    UpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: userUpdateOneRequiredWithoutExerciseprogressNestedInput
    exercise?: exerciseUpdateOneRequiredWithoutExerciseprogressNestedInput
  }

  export type exerciseprogressUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    UID?: StringFieldUpdateOperationsInput | string
    EID?: IntFieldUpdateOperationsInput | number
    Status?: NullableEnumexerciseprogress_StatusFieldUpdateOperationsInput | $Enums.exerciseprogress_Status | null
    UpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type exerciseprogressCreateManyInput = {
    ID?: number
    UID: string
    EID: number
    Status?: $Enums.exerciseprogress_Status | null
    UpdatedAt?: Date | string | null
  }

  export type exerciseprogressUpdateManyMutationInput = {
    Status?: NullableEnumexerciseprogress_StatusFieldUpdateOperationsInput | $Enums.exerciseprogress_Status | null
    UpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type exerciseprogressUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    UID?: StringFieldUpdateOperationsInput | string
    EID?: IntFieldUpdateOperationsInput | number
    Status?: NullableEnumexerciseprogress_StatusFieldUpdateOperationsInput | $Enums.exerciseprogress_Status | null
    UpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type studyplanprogressCreateInput = {
    Status: $Enums.studyplanprogress_Status
    StartTime?: Date | string | null
    EndTime?: Date | string | null
    studyplan: studyplanCreateNestedOneWithoutStudyplanprogressInput
    user: userCreateNestedOneWithoutStudyplanprogressInput
  }

  export type studyplanprogressUncheckedCreateInput = {
    SPPID?: number
    SPID: number
    UID: string
    Status: $Enums.studyplanprogress_Status
    StartTime?: Date | string | null
    EndTime?: Date | string | null
  }

  export type studyplanprogressUpdateInput = {
    Status?: Enumstudyplanprogress_StatusFieldUpdateOperationsInput | $Enums.studyplanprogress_Status
    StartTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    EndTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studyplan?: studyplanUpdateOneRequiredWithoutStudyplanprogressNestedInput
    user?: userUpdateOneRequiredWithoutStudyplanprogressNestedInput
  }

  export type studyplanprogressUncheckedUpdateInput = {
    SPPID?: IntFieldUpdateOperationsInput | number
    SPID?: IntFieldUpdateOperationsInput | number
    UID?: StringFieldUpdateOperationsInput | string
    Status?: Enumstudyplanprogress_StatusFieldUpdateOperationsInput | $Enums.studyplanprogress_Status
    StartTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    EndTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type studyplanprogressCreateManyInput = {
    SPPID?: number
    SPID: number
    UID: string
    Status: $Enums.studyplanprogress_Status
    StartTime?: Date | string | null
    EndTime?: Date | string | null
  }

  export type studyplanprogressUpdateManyMutationInput = {
    Status?: Enumstudyplanprogress_StatusFieldUpdateOperationsInput | $Enums.studyplanprogress_Status
    StartTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    EndTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type studyplanprogressUncheckedUpdateManyInput = {
    SPPID?: IntFieldUpdateOperationsInput | number
    SPID?: IntFieldUpdateOperationsInput | number
    UID?: StringFieldUpdateOperationsInput | string
    Status?: Enumstudyplanprogress_StatusFieldUpdateOperationsInput | $Enums.studyplanprogress_Status
    StartTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    EndTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type listCreateInput = {
    Name: string
    Description?: string | null
    CreatedAt?: Date | string | null
    user: userCreateNestedOneWithoutListInput
    listitem?: listitemCreateNestedManyWithoutListInput
  }

  export type listUncheckedCreateInput = {
    LID?: number
    UID: string
    Name: string
    Description?: string | null
    CreatedAt?: Date | string | null
    listitem?: listitemUncheckedCreateNestedManyWithoutListInput
  }

  export type listUpdateInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: userUpdateOneRequiredWithoutListNestedInput
    listitem?: listitemUpdateManyWithoutListNestedInput
  }

  export type listUncheckedUpdateInput = {
    LID?: IntFieldUpdateOperationsInput | number
    UID?: StringFieldUpdateOperationsInput | string
    Name?: StringFieldUpdateOperationsInput | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    listitem?: listitemUncheckedUpdateManyWithoutListNestedInput
  }

  export type listCreateManyInput = {
    LID?: number
    UID: string
    Name: string
    Description?: string | null
    CreatedAt?: Date | string | null
  }

  export type listUpdateManyMutationInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type listUncheckedUpdateManyInput = {
    LID?: IntFieldUpdateOperationsInput | number
    UID?: StringFieldUpdateOperationsInput | string
    Name?: StringFieldUpdateOperationsInput | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type listitemCreateInput = {
    list: listCreateNestedOneWithoutListitemInput
    exercise: exerciseCreateNestedOneWithoutListitemInput
  }

  export type listitemUncheckedCreateInput = {
    LID: number
    EID: number
  }

  export type listitemUpdateInput = {
    list?: listUpdateOneRequiredWithoutListitemNestedInput
    exercise?: exerciseUpdateOneRequiredWithoutListitemNestedInput
  }

  export type listitemUncheckedUpdateInput = {
    LID?: IntFieldUpdateOperationsInput | number
    EID?: IntFieldUpdateOperationsInput | number
  }

  export type listitemCreateManyInput = {
    LID: number
    EID: number
  }

  export type listitemUpdateManyMutationInput = {

  }

  export type listitemUncheckedUpdateManyInput = {
    LID?: IntFieldUpdateOperationsInput | number
    EID?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type Enumexercise_DifficultyFilter<$PrismaModel = never> = {
    equals?: $Enums.exercise_Difficulty | Enumexercise_DifficultyFieldRefInput<$PrismaModel>
    in?: $Enums.exercise_Difficulty[]
    notIn?: $Enums.exercise_Difficulty[]
    not?: NestedEnumexercise_DifficultyFilter<$PrismaModel> | $Enums.exercise_Difficulty
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type CommentListRelationFilter = {
    every?: commentWhereInput
    some?: commentWhereInput
    none?: commentWhereInput
  }

  export type TopicNullableScalarRelationFilter = {
    is?: topicWhereInput | null
    isNot?: topicWhereInput | null
  }

  export type StudyplanitemNullableScalarRelationFilter = {
    is?: studyplanitemWhereInput | null
    isNot?: studyplanitemWhereInput | null
  }

  export type ExerciselikeListRelationFilter = {
    every?: exerciselikeWhereInput
    some?: exerciselikeWhereInput
    none?: exerciselikeWhereInput
  }

  export type ExerciseprogressListRelationFilter = {
    every?: exerciseprogressWhereInput
    some?: exerciseprogressWhereInput
    none?: exerciseprogressWhereInput
  }

  export type ListitemListRelationFilter = {
    every?: listitemWhereInput
    some?: listitemWhereInput
    none?: listitemWhereInput
  }

  export type SubmissionListRelationFilter = {
    every?: submissionWhereInput
    some?: submissionWhereInput
    none?: submissionWhereInput
  }

  export type TestcaseListRelationFilter = {
    every?: testcaseWhereInput
    some?: testcaseWhereInput
    none?: testcaseWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type commentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type exerciselikeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type exerciseprogressOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type listitemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type submissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type testcaseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type exerciseOrderByRelevanceInput = {
    fields: exerciseOrderByRelevanceFieldEnum | exerciseOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type exerciseCountOrderByAggregateInput = {
    EID?: SortOrder
    TpID?: SortOrder
    SPIID?: SortOrder
    Name?: SortOrder
    Slug?: SortOrder
    Content?: SortOrder
    Difficulty?: SortOrder
    template?: SortOrder
  }

  export type exerciseAvgOrderByAggregateInput = {
    EID?: SortOrder
    TpID?: SortOrder
    SPIID?: SortOrder
  }

  export type exerciseMaxOrderByAggregateInput = {
    EID?: SortOrder
    TpID?: SortOrder
    SPIID?: SortOrder
    Name?: SortOrder
    Slug?: SortOrder
    Content?: SortOrder
    Difficulty?: SortOrder
    template?: SortOrder
  }

  export type exerciseMinOrderByAggregateInput = {
    EID?: SortOrder
    TpID?: SortOrder
    SPIID?: SortOrder
    Name?: SortOrder
    Slug?: SortOrder
    Content?: SortOrder
    Difficulty?: SortOrder
    template?: SortOrder
  }

  export type exerciseSumOrderByAggregateInput = {
    EID?: SortOrder
    TpID?: SortOrder
    SPIID?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type Enumexercise_DifficultyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.exercise_Difficulty | Enumexercise_DifficultyFieldRefInput<$PrismaModel>
    in?: $Enums.exercise_Difficulty[]
    notIn?: $Enums.exercise_Difficulty[]
    not?: NestedEnumexercise_DifficultyWithAggregatesFilter<$PrismaModel> | $Enums.exercise_Difficulty
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumexercise_DifficultyFilter<$PrismaModel>
    _max?: NestedEnumexercise_DifficultyFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type Enumsubmission_ResultNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.submission_Result | Enumsubmission_ResultFieldRefInput<$PrismaModel> | null
    in?: $Enums.submission_Result[] | null
    notIn?: $Enums.submission_Result[] | null
    not?: NestedEnumsubmission_ResultNullableFilter<$PrismaModel> | $Enums.submission_Result | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type ExerciseScalarRelationFilter = {
    is?: exerciseWhereInput
    isNot?: exerciseWhereInput
  }

  export type UserScalarRelationFilter = {
    is?: userWhereInput
    isNot?: userWhereInput
  }

  export type TestcaseresultListRelationFilter = {
    every?: testcaseresultWhereInput
    some?: testcaseresultWhereInput
    none?: testcaseresultWhereInput
  }

  export type testcaseresultOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type submissionOrderByRelevanceInput = {
    fields: submissionOrderByRelevanceFieldEnum | submissionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type submissionCountOrderByAggregateInput = {
    SID?: SortOrder
    UID?: SortOrder
    EID?: SortOrder
    Code?: SortOrder
    CreatedAt?: SortOrder
    Result?: SortOrder
    isPublic?: SortOrder
  }

  export type submissionAvgOrderByAggregateInput = {
    SID?: SortOrder
    EID?: SortOrder
  }

  export type submissionMaxOrderByAggregateInput = {
    SID?: SortOrder
    UID?: SortOrder
    EID?: SortOrder
    Code?: SortOrder
    CreatedAt?: SortOrder
    Result?: SortOrder
    isPublic?: SortOrder
  }

  export type submissionMinOrderByAggregateInput = {
    SID?: SortOrder
    UID?: SortOrder
    EID?: SortOrder
    Code?: SortOrder
    CreatedAt?: SortOrder
    Result?: SortOrder
    isPublic?: SortOrder
  }

  export type submissionSumOrderByAggregateInput = {
    SID?: SortOrder
    EID?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type Enumsubmission_ResultNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.submission_Result | Enumsubmission_ResultFieldRefInput<$PrismaModel> | null
    in?: $Enums.submission_Result[] | null
    notIn?: $Enums.submission_Result[] | null
    not?: NestedEnumsubmission_ResultNullableWithAggregatesFilter<$PrismaModel> | $Enums.submission_Result | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumsubmission_ResultNullableFilter<$PrismaModel>
    _max?: NestedEnumsubmission_ResultNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type testcaseOrderByRelevanceInput = {
    fields: testcaseOrderByRelevanceFieldEnum | testcaseOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type testcaseCountOrderByAggregateInput = {
    TCID?: SortOrder
    EID?: SortOrder
    Input?: SortOrder
    ExpectedOutput?: SortOrder
    isHidden?: SortOrder
  }

  export type testcaseAvgOrderByAggregateInput = {
    TCID?: SortOrder
    EID?: SortOrder
  }

  export type testcaseMaxOrderByAggregateInput = {
    TCID?: SortOrder
    EID?: SortOrder
    Input?: SortOrder
    ExpectedOutput?: SortOrder
    isHidden?: SortOrder
  }

  export type testcaseMinOrderByAggregateInput = {
    TCID?: SortOrder
    EID?: SortOrder
    Input?: SortOrder
    ExpectedOutput?: SortOrder
    isHidden?: SortOrder
  }

  export type testcaseSumOrderByAggregateInput = {
    TCID?: SortOrder
    EID?: SortOrder
  }

  export type Enumtestcaseresult_ResultFilter<$PrismaModel = never> = {
    equals?: $Enums.testcaseresult_Result | Enumtestcaseresult_ResultFieldRefInput<$PrismaModel>
    in?: $Enums.testcaseresult_Result[]
    notIn?: $Enums.testcaseresult_Result[]
    not?: NestedEnumtestcaseresult_ResultFilter<$PrismaModel> | $Enums.testcaseresult_Result
  }

  export type SubmissionScalarRelationFilter = {
    is?: submissionWhereInput
    isNot?: submissionWhereInput
  }

  export type TestcaseScalarRelationFilter = {
    is?: testcaseWhereInput
    isNot?: testcaseWhereInput
  }

  export type testcaseresultOrderByRelevanceInput = {
    fields: testcaseresultOrderByRelevanceFieldEnum | testcaseresultOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type testcaseresultCountOrderByAggregateInput = {
    TCRID?: SortOrder
    SID?: SortOrder
    TCID?: SortOrder
    ActualOutput?: SortOrder
    Result?: SortOrder
  }

  export type testcaseresultAvgOrderByAggregateInput = {
    TCRID?: SortOrder
    SID?: SortOrder
    TCID?: SortOrder
  }

  export type testcaseresultMaxOrderByAggregateInput = {
    TCRID?: SortOrder
    SID?: SortOrder
    TCID?: SortOrder
    ActualOutput?: SortOrder
    Result?: SortOrder
  }

  export type testcaseresultMinOrderByAggregateInput = {
    TCRID?: SortOrder
    SID?: SortOrder
    TCID?: SortOrder
    ActualOutput?: SortOrder
    Result?: SortOrder
  }

  export type testcaseresultSumOrderByAggregateInput = {
    TCRID?: SortOrder
    SID?: SortOrder
    TCID?: SortOrder
  }

  export type Enumtestcaseresult_ResultWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.testcaseresult_Result | Enumtestcaseresult_ResultFieldRefInput<$PrismaModel>
    in?: $Enums.testcaseresult_Result[]
    notIn?: $Enums.testcaseresult_Result[]
    not?: NestedEnumtestcaseresult_ResultWithAggregatesFilter<$PrismaModel> | $Enums.testcaseresult_Result
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumtestcaseresult_ResultFilter<$PrismaModel>
    _max?: NestedEnumtestcaseresult_ResultFilter<$PrismaModel>
  }

  export type ExerciseListRelationFilter = {
    every?: exerciseWhereInput
    some?: exerciseWhereInput
    none?: exerciseWhereInput
  }

  export type exerciseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type topicOrderByRelevanceInput = {
    fields: topicOrderByRelevanceFieldEnum | topicOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type topicCountOrderByAggregateInput = {
    TpID?: SortOrder
    Name?: SortOrder
    Slug?: SortOrder
  }

  export type topicAvgOrderByAggregateInput = {
    TpID?: SortOrder
  }

  export type topicMaxOrderByAggregateInput = {
    TpID?: SortOrder
    Name?: SortOrder
    Slug?: SortOrder
  }

  export type topicMinOrderByAggregateInput = {
    TpID?: SortOrder
    Name?: SortOrder
    Slug?: SortOrder
  }

  export type topicSumOrderByAggregateInput = {
    TpID?: SortOrder
  }

  export type Enumuser_RoleFilter<$PrismaModel = never> = {
    equals?: $Enums.user_Role | Enumuser_RoleFieldRefInput<$PrismaModel>
    in?: $Enums.user_Role[]
    notIn?: $Enums.user_Role[]
    not?: NestedEnumuser_RoleFilter<$PrismaModel> | $Enums.user_Role
  }

  export type CommentlikeListRelationFilter = {
    every?: commentlikeWhereInput
    some?: commentlikeWhereInput
    none?: commentlikeWhereInput
  }

  export type FriendshipListRelationFilter = {
    every?: friendshipWhereInput
    some?: friendshipWhereInput
    none?: friendshipWhereInput
  }

  export type ListListRelationFilter = {
    every?: listWhereInput
    some?: listWhereInput
    none?: listWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: notificationWhereInput
    some?: notificationWhereInput
    none?: notificationWhereInput
  }

  export type StudyplanprogressListRelationFilter = {
    every?: studyplanprogressWhereInput
    some?: studyplanprogressWhereInput
    none?: studyplanprogressWhereInput
  }

  export type commentlikeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type friendshipOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type listOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type notificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type studyplanprogressOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type userOrderByRelevanceInput = {
    fields: userOrderByRelevanceFieldEnum | userOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type userCountOrderByAggregateInput = {
    UID?: SortOrder
    Username?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
    Role?: SortOrder
    CreatedAt?: SortOrder
    Image?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    UID?: SortOrder
    Username?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
    Role?: SortOrder
    CreatedAt?: SortOrder
    Image?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    UID?: SortOrder
    Username?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
    Role?: SortOrder
    CreatedAt?: SortOrder
    Image?: SortOrder
  }

  export type Enumuser_RoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.user_Role | Enumuser_RoleFieldRefInput<$PrismaModel>
    in?: $Enums.user_Role[]
    notIn?: $Enums.user_Role[]
    not?: NestedEnumuser_RoleWithAggregatesFilter<$PrismaModel> | $Enums.user_Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumuser_RoleFilter<$PrismaModel>
    _max?: NestedEnumuser_RoleFilter<$PrismaModel>
  }

  export type Enumfriendship_statusFilter<$PrismaModel = never> = {
    equals?: $Enums.friendship_status | Enumfriendship_statusFieldRefInput<$PrismaModel>
    in?: $Enums.friendship_status[]
    notIn?: $Enums.friendship_status[]
    not?: NestedEnumfriendship_statusFilter<$PrismaModel> | $Enums.friendship_status
  }

  export type friendshipOrderByRelevanceInput = {
    fields: friendshipOrderByRelevanceFieldEnum | friendshipOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type friendshipRequesterAddresseeCompoundUniqueInput = {
    requester: string
    addressee: string
  }

  export type friendshipCountOrderByAggregateInput = {
    FID?: SortOrder
    requester?: SortOrder
    addressee?: SortOrder
    status?: SortOrder
    CreatedAt?: SortOrder
  }

  export type friendshipAvgOrderByAggregateInput = {
    FID?: SortOrder
  }

  export type friendshipMaxOrderByAggregateInput = {
    FID?: SortOrder
    requester?: SortOrder
    addressee?: SortOrder
    status?: SortOrder
    CreatedAt?: SortOrder
  }

  export type friendshipMinOrderByAggregateInput = {
    FID?: SortOrder
    requester?: SortOrder
    addressee?: SortOrder
    status?: SortOrder
    CreatedAt?: SortOrder
  }

  export type friendshipSumOrderByAggregateInput = {
    FID?: SortOrder
  }

  export type Enumfriendship_statusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.friendship_status | Enumfriendship_statusFieldRefInput<$PrismaModel>
    in?: $Enums.friendship_status[]
    notIn?: $Enums.friendship_status[]
    not?: NestedEnumfriendship_statusWithAggregatesFilter<$PrismaModel> | $Enums.friendship_status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumfriendship_statusFilter<$PrismaModel>
    _max?: NestedEnumfriendship_statusFilter<$PrismaModel>
  }

  export type LessonListRelationFilter = {
    every?: lessonWhereInput
    some?: lessonWhereInput
    none?: lessonWhereInput
  }

  export type lessonOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type chapterOrderByRelevanceInput = {
    fields: chapterOrderByRelevanceFieldEnum | chapterOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type chapterCountOrderByAggregateInput = {
    CID?: SortOrder
    ChapterIndex?: SortOrder
    Name?: SortOrder
  }

  export type chapterAvgOrderByAggregateInput = {
    CID?: SortOrder
    ChapterIndex?: SortOrder
  }

  export type chapterMaxOrderByAggregateInput = {
    CID?: SortOrder
    ChapterIndex?: SortOrder
    Name?: SortOrder
  }

  export type chapterMinOrderByAggregateInput = {
    CID?: SortOrder
    ChapterIndex?: SortOrder
    Name?: SortOrder
  }

  export type chapterSumOrderByAggregateInput = {
    CID?: SortOrder
    ChapterIndex?: SortOrder
  }

  export type LessonNullableScalarRelationFilter = {
    is?: lessonWhereInput | null
    isNot?: lessonWhereInput | null
  }

  export type ExerciseNullableScalarRelationFilter = {
    is?: exerciseWhereInput | null
    isNot?: exerciseWhereInput | null
  }

  export type commentOrderByRelevanceInput = {
    fields: commentOrderByRelevanceFieldEnum | commentOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type commentCountOrderByAggregateInput = {
    CoID?: SortOrder
    UID?: SortOrder
    LID?: SortOrder
    EID?: SortOrder
    Content?: SortOrder
    CreatedAt?: SortOrder
  }

  export type commentAvgOrderByAggregateInput = {
    CoID?: SortOrder
    LID?: SortOrder
    EID?: SortOrder
  }

  export type commentMaxOrderByAggregateInput = {
    CoID?: SortOrder
    UID?: SortOrder
    LID?: SortOrder
    EID?: SortOrder
    Content?: SortOrder
    CreatedAt?: SortOrder
  }

  export type commentMinOrderByAggregateInput = {
    CoID?: SortOrder
    UID?: SortOrder
    LID?: SortOrder
    EID?: SortOrder
    Content?: SortOrder
    CreatedAt?: SortOrder
  }

  export type commentSumOrderByAggregateInput = {
    CoID?: SortOrder
    LID?: SortOrder
    EID?: SortOrder
  }

  export type CommentScalarRelationFilter = {
    is?: commentWhereInput
    isNot?: commentWhereInput
  }

  export type commentlikeOrderByRelevanceInput = {
    fields: commentlikeOrderByRelevanceFieldEnum | commentlikeOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type commentlikeUIDCoIDCompoundUniqueInput = {
    UID: string
    CoID: number
  }

  export type commentlikeCountOrderByAggregateInput = {
    CLID?: SortOrder
    UID?: SortOrder
    CoID?: SortOrder
    CreatedAt?: SortOrder
  }

  export type commentlikeAvgOrderByAggregateInput = {
    CLID?: SortOrder
    CoID?: SortOrder
  }

  export type commentlikeMaxOrderByAggregateInput = {
    CLID?: SortOrder
    UID?: SortOrder
    CoID?: SortOrder
    CreatedAt?: SortOrder
  }

  export type commentlikeMinOrderByAggregateInput = {
    CLID?: SortOrder
    UID?: SortOrder
    CoID?: SortOrder
    CreatedAt?: SortOrder
  }

  export type commentlikeSumOrderByAggregateInput = {
    CLID?: SortOrder
    CoID?: SortOrder
  }

  export type exerciselikeOrderByRelevanceInput = {
    fields: exerciselikeOrderByRelevanceFieldEnum | exerciselikeOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type exerciselikeUIDEIDCompoundUniqueInput = {
    UID: string
    EID: number
  }

  export type exerciselikeCountOrderByAggregateInput = {
    ELID?: SortOrder
    UID?: SortOrder
    EID?: SortOrder
    CreatedAt?: SortOrder
  }

  export type exerciselikeAvgOrderByAggregateInput = {
    ELID?: SortOrder
    EID?: SortOrder
  }

  export type exerciselikeMaxOrderByAggregateInput = {
    ELID?: SortOrder
    UID?: SortOrder
    EID?: SortOrder
    CreatedAt?: SortOrder
  }

  export type exerciselikeMinOrderByAggregateInput = {
    ELID?: SortOrder
    UID?: SortOrder
    EID?: SortOrder
    CreatedAt?: SortOrder
  }

  export type exerciselikeSumOrderByAggregateInput = {
    ELID?: SortOrder
    EID?: SortOrder
  }

  export type ChapterScalarRelationFilter = {
    is?: chapterWhereInput
    isNot?: chapterWhereInput
  }

  export type lessonOrderByRelevanceInput = {
    fields: lessonOrderByRelevanceFieldEnum | lessonOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type lessonCountOrderByAggregateInput = {
    LID?: SortOrder
    CID?: SortOrder
    LessonIndex?: SortOrder
    Title?: SortOrder
    Slug?: SortOrder
  }

  export type lessonAvgOrderByAggregateInput = {
    LID?: SortOrder
    CID?: SortOrder
    LessonIndex?: SortOrder
  }

  export type lessonMaxOrderByAggregateInput = {
    LID?: SortOrder
    CID?: SortOrder
    LessonIndex?: SortOrder
    Title?: SortOrder
    Slug?: SortOrder
  }

  export type lessonMinOrderByAggregateInput = {
    LID?: SortOrder
    CID?: SortOrder
    LessonIndex?: SortOrder
    Title?: SortOrder
    Slug?: SortOrder
  }

  export type lessonSumOrderByAggregateInput = {
    LID?: SortOrder
    CID?: SortOrder
    LessonIndex?: SortOrder
  }

  export type Enumnotification_TypeFilter<$PrismaModel = never> = {
    equals?: $Enums.notification_Type | Enumnotification_TypeFieldRefInput<$PrismaModel>
    in?: $Enums.notification_Type[]
    notIn?: $Enums.notification_Type[]
    not?: NestedEnumnotification_TypeFilter<$PrismaModel> | $Enums.notification_Type
  }

  export type CommentNullableScalarRelationFilter = {
    is?: commentWhereInput | null
    isNot?: commentWhereInput | null
  }

  export type notificationOrderByRelevanceInput = {
    fields: notificationOrderByRelevanceFieldEnum | notificationOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type notificationCountOrderByAggregateInput = {
    NID?: SortOrder
    UID?: SortOrder
    Type?: SortOrder
    FromUser?: SortOrder
    Message?: SortOrder
    CoID?: SortOrder
    CreatedAt?: SortOrder
    isRead?: SortOrder
  }

  export type notificationAvgOrderByAggregateInput = {
    NID?: SortOrder
    CoID?: SortOrder
  }

  export type notificationMaxOrderByAggregateInput = {
    NID?: SortOrder
    UID?: SortOrder
    Type?: SortOrder
    FromUser?: SortOrder
    Message?: SortOrder
    CoID?: SortOrder
    CreatedAt?: SortOrder
    isRead?: SortOrder
  }

  export type notificationMinOrderByAggregateInput = {
    NID?: SortOrder
    UID?: SortOrder
    Type?: SortOrder
    FromUser?: SortOrder
    Message?: SortOrder
    CoID?: SortOrder
    CreatedAt?: SortOrder
    isRead?: SortOrder
  }

  export type notificationSumOrderByAggregateInput = {
    NID?: SortOrder
    CoID?: SortOrder
  }

  export type Enumnotification_TypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.notification_Type | Enumnotification_TypeFieldRefInput<$PrismaModel>
    in?: $Enums.notification_Type[]
    notIn?: $Enums.notification_Type[]
    not?: NestedEnumnotification_TypeWithAggregatesFilter<$PrismaModel> | $Enums.notification_Type
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumnotification_TypeFilter<$PrismaModel>
    _max?: NestedEnumnotification_TypeFilter<$PrismaModel>
  }

  export type StudyplanitemListRelationFilter = {
    every?: studyplanitemWhereInput
    some?: studyplanitemWhereInput
    none?: studyplanitemWhereInput
  }

  export type studyplanitemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type studyplanOrderByRelevanceInput = {
    fields: studyplanOrderByRelevanceFieldEnum | studyplanOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type studyplanCountOrderByAggregateInput = {
    SPID?: SortOrder
    Name?: SortOrder
    Description?: SortOrder
    Icon?: SortOrder
    Slug?: SortOrder
  }

  export type studyplanAvgOrderByAggregateInput = {
    SPID?: SortOrder
  }

  export type studyplanMaxOrderByAggregateInput = {
    SPID?: SortOrder
    Name?: SortOrder
    Description?: SortOrder
    Icon?: SortOrder
    Slug?: SortOrder
  }

  export type studyplanMinOrderByAggregateInput = {
    SPID?: SortOrder
    Name?: SortOrder
    Description?: SortOrder
    Icon?: SortOrder
    Slug?: SortOrder
  }

  export type studyplanSumOrderByAggregateInput = {
    SPID?: SortOrder
  }

  export type StudyplanScalarRelationFilter = {
    is?: studyplanWhereInput
    isNot?: studyplanWhereInput
  }

  export type studyplanitemOrderByRelevanceInput = {
    fields: studyplanitemOrderByRelevanceFieldEnum | studyplanitemOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type studyplanitemCountOrderByAggregateInput = {
    SPIID?: SortOrder
    SPID?: SortOrder
    Name?: SortOrder
  }

  export type studyplanitemAvgOrderByAggregateInput = {
    SPIID?: SortOrder
    SPID?: SortOrder
  }

  export type studyplanitemMaxOrderByAggregateInput = {
    SPIID?: SortOrder
    SPID?: SortOrder
    Name?: SortOrder
  }

  export type studyplanitemMinOrderByAggregateInput = {
    SPIID?: SortOrder
    SPID?: SortOrder
    Name?: SortOrder
  }

  export type studyplanitemSumOrderByAggregateInput = {
    SPIID?: SortOrder
    SPID?: SortOrder
  }

  export type Enumexerciseprogress_StatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.exerciseprogress_Status | Enumexerciseprogress_StatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.exerciseprogress_Status[] | null
    notIn?: $Enums.exerciseprogress_Status[] | null
    not?: NestedEnumexerciseprogress_StatusNullableFilter<$PrismaModel> | $Enums.exerciseprogress_Status | null
  }

  export type exerciseprogressOrderByRelevanceInput = {
    fields: exerciseprogressOrderByRelevanceFieldEnum | exerciseprogressOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type exerciseprogressUIDEIDCompoundUniqueInput = {
    UID: string
    EID: number
  }

  export type exerciseprogressCountOrderByAggregateInput = {
    ID?: SortOrder
    UID?: SortOrder
    EID?: SortOrder
    Status?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type exerciseprogressAvgOrderByAggregateInput = {
    ID?: SortOrder
    EID?: SortOrder
  }

  export type exerciseprogressMaxOrderByAggregateInput = {
    ID?: SortOrder
    UID?: SortOrder
    EID?: SortOrder
    Status?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type exerciseprogressMinOrderByAggregateInput = {
    ID?: SortOrder
    UID?: SortOrder
    EID?: SortOrder
    Status?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type exerciseprogressSumOrderByAggregateInput = {
    ID?: SortOrder
    EID?: SortOrder
  }

  export type Enumexerciseprogress_StatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.exerciseprogress_Status | Enumexerciseprogress_StatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.exerciseprogress_Status[] | null
    notIn?: $Enums.exerciseprogress_Status[] | null
    not?: NestedEnumexerciseprogress_StatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.exerciseprogress_Status | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumexerciseprogress_StatusNullableFilter<$PrismaModel>
    _max?: NestedEnumexerciseprogress_StatusNullableFilter<$PrismaModel>
  }

  export type Enumstudyplanprogress_StatusFilter<$PrismaModel = never> = {
    equals?: $Enums.studyplanprogress_Status | Enumstudyplanprogress_StatusFieldRefInput<$PrismaModel>
    in?: $Enums.studyplanprogress_Status[]
    notIn?: $Enums.studyplanprogress_Status[]
    not?: NestedEnumstudyplanprogress_StatusFilter<$PrismaModel> | $Enums.studyplanprogress_Status
  }

  export type studyplanprogressOrderByRelevanceInput = {
    fields: studyplanprogressOrderByRelevanceFieldEnum | studyplanprogressOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type studyplanprogressCountOrderByAggregateInput = {
    SPPID?: SortOrder
    SPID?: SortOrder
    UID?: SortOrder
    Status?: SortOrder
    StartTime?: SortOrder
    EndTime?: SortOrder
  }

  export type studyplanprogressAvgOrderByAggregateInput = {
    SPPID?: SortOrder
    SPID?: SortOrder
  }

  export type studyplanprogressMaxOrderByAggregateInput = {
    SPPID?: SortOrder
    SPID?: SortOrder
    UID?: SortOrder
    Status?: SortOrder
    StartTime?: SortOrder
    EndTime?: SortOrder
  }

  export type studyplanprogressMinOrderByAggregateInput = {
    SPPID?: SortOrder
    SPID?: SortOrder
    UID?: SortOrder
    Status?: SortOrder
    StartTime?: SortOrder
    EndTime?: SortOrder
  }

  export type studyplanprogressSumOrderByAggregateInput = {
    SPPID?: SortOrder
    SPID?: SortOrder
  }

  export type Enumstudyplanprogress_StatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.studyplanprogress_Status | Enumstudyplanprogress_StatusFieldRefInput<$PrismaModel>
    in?: $Enums.studyplanprogress_Status[]
    notIn?: $Enums.studyplanprogress_Status[]
    not?: NestedEnumstudyplanprogress_StatusWithAggregatesFilter<$PrismaModel> | $Enums.studyplanprogress_Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumstudyplanprogress_StatusFilter<$PrismaModel>
    _max?: NestedEnumstudyplanprogress_StatusFilter<$PrismaModel>
  }

  export type listOrderByRelevanceInput = {
    fields: listOrderByRelevanceFieldEnum | listOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type listCountOrderByAggregateInput = {
    LID?: SortOrder
    UID?: SortOrder
    Name?: SortOrder
    Description?: SortOrder
    CreatedAt?: SortOrder
  }

  export type listAvgOrderByAggregateInput = {
    LID?: SortOrder
  }

  export type listMaxOrderByAggregateInput = {
    LID?: SortOrder
    UID?: SortOrder
    Name?: SortOrder
    Description?: SortOrder
    CreatedAt?: SortOrder
  }

  export type listMinOrderByAggregateInput = {
    LID?: SortOrder
    UID?: SortOrder
    Name?: SortOrder
    Description?: SortOrder
    CreatedAt?: SortOrder
  }

  export type listSumOrderByAggregateInput = {
    LID?: SortOrder
  }

  export type ListScalarRelationFilter = {
    is?: listWhereInput
    isNot?: listWhereInput
  }

  export type listitemLIDEIDCompoundUniqueInput = {
    LID: number
    EID: number
  }

  export type listitemCountOrderByAggregateInput = {
    LID?: SortOrder
    EID?: SortOrder
  }

  export type listitemAvgOrderByAggregateInput = {
    LID?: SortOrder
    EID?: SortOrder
  }

  export type listitemMaxOrderByAggregateInput = {
    LID?: SortOrder
    EID?: SortOrder
  }

  export type listitemMinOrderByAggregateInput = {
    LID?: SortOrder
    EID?: SortOrder
  }

  export type listitemSumOrderByAggregateInput = {
    LID?: SortOrder
    EID?: SortOrder
  }

  export type commentCreateNestedManyWithoutExerciseInput = {
    create?: XOR<commentCreateWithoutExerciseInput, commentUncheckedCreateWithoutExerciseInput> | commentCreateWithoutExerciseInput[] | commentUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: commentCreateOrConnectWithoutExerciseInput | commentCreateOrConnectWithoutExerciseInput[]
    createMany?: commentCreateManyExerciseInputEnvelope
    connect?: commentWhereUniqueInput | commentWhereUniqueInput[]
  }

  export type topicCreateNestedOneWithoutExerciseInput = {
    create?: XOR<topicCreateWithoutExerciseInput, topicUncheckedCreateWithoutExerciseInput>
    connectOrCreate?: topicCreateOrConnectWithoutExerciseInput
    connect?: topicWhereUniqueInput
  }

  export type studyplanitemCreateNestedOneWithoutExerciseInput = {
    create?: XOR<studyplanitemCreateWithoutExerciseInput, studyplanitemUncheckedCreateWithoutExerciseInput>
    connectOrCreate?: studyplanitemCreateOrConnectWithoutExerciseInput
    connect?: studyplanitemWhereUniqueInput
  }

  export type exerciselikeCreateNestedManyWithoutExerciseInput = {
    create?: XOR<exerciselikeCreateWithoutExerciseInput, exerciselikeUncheckedCreateWithoutExerciseInput> | exerciselikeCreateWithoutExerciseInput[] | exerciselikeUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: exerciselikeCreateOrConnectWithoutExerciseInput | exerciselikeCreateOrConnectWithoutExerciseInput[]
    createMany?: exerciselikeCreateManyExerciseInputEnvelope
    connect?: exerciselikeWhereUniqueInput | exerciselikeWhereUniqueInput[]
  }

  export type exerciseprogressCreateNestedManyWithoutExerciseInput = {
    create?: XOR<exerciseprogressCreateWithoutExerciseInput, exerciseprogressUncheckedCreateWithoutExerciseInput> | exerciseprogressCreateWithoutExerciseInput[] | exerciseprogressUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: exerciseprogressCreateOrConnectWithoutExerciseInput | exerciseprogressCreateOrConnectWithoutExerciseInput[]
    createMany?: exerciseprogressCreateManyExerciseInputEnvelope
    connect?: exerciseprogressWhereUniqueInput | exerciseprogressWhereUniqueInput[]
  }

  export type listitemCreateNestedManyWithoutExerciseInput = {
    create?: XOR<listitemCreateWithoutExerciseInput, listitemUncheckedCreateWithoutExerciseInput> | listitemCreateWithoutExerciseInput[] | listitemUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: listitemCreateOrConnectWithoutExerciseInput | listitemCreateOrConnectWithoutExerciseInput[]
    createMany?: listitemCreateManyExerciseInputEnvelope
    connect?: listitemWhereUniqueInput | listitemWhereUniqueInput[]
  }

  export type submissionCreateNestedManyWithoutExerciseInput = {
    create?: XOR<submissionCreateWithoutExerciseInput, submissionUncheckedCreateWithoutExerciseInput> | submissionCreateWithoutExerciseInput[] | submissionUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: submissionCreateOrConnectWithoutExerciseInput | submissionCreateOrConnectWithoutExerciseInput[]
    createMany?: submissionCreateManyExerciseInputEnvelope
    connect?: submissionWhereUniqueInput | submissionWhereUniqueInput[]
  }

  export type testcaseCreateNestedManyWithoutExerciseInput = {
    create?: XOR<testcaseCreateWithoutExerciseInput, testcaseUncheckedCreateWithoutExerciseInput> | testcaseCreateWithoutExerciseInput[] | testcaseUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: testcaseCreateOrConnectWithoutExerciseInput | testcaseCreateOrConnectWithoutExerciseInput[]
    createMany?: testcaseCreateManyExerciseInputEnvelope
    connect?: testcaseWhereUniqueInput | testcaseWhereUniqueInput[]
  }

  export type commentUncheckedCreateNestedManyWithoutExerciseInput = {
    create?: XOR<commentCreateWithoutExerciseInput, commentUncheckedCreateWithoutExerciseInput> | commentCreateWithoutExerciseInput[] | commentUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: commentCreateOrConnectWithoutExerciseInput | commentCreateOrConnectWithoutExerciseInput[]
    createMany?: commentCreateManyExerciseInputEnvelope
    connect?: commentWhereUniqueInput | commentWhereUniqueInput[]
  }

  export type exerciselikeUncheckedCreateNestedManyWithoutExerciseInput = {
    create?: XOR<exerciselikeCreateWithoutExerciseInput, exerciselikeUncheckedCreateWithoutExerciseInput> | exerciselikeCreateWithoutExerciseInput[] | exerciselikeUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: exerciselikeCreateOrConnectWithoutExerciseInput | exerciselikeCreateOrConnectWithoutExerciseInput[]
    createMany?: exerciselikeCreateManyExerciseInputEnvelope
    connect?: exerciselikeWhereUniqueInput | exerciselikeWhereUniqueInput[]
  }

  export type exerciseprogressUncheckedCreateNestedManyWithoutExerciseInput = {
    create?: XOR<exerciseprogressCreateWithoutExerciseInput, exerciseprogressUncheckedCreateWithoutExerciseInput> | exerciseprogressCreateWithoutExerciseInput[] | exerciseprogressUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: exerciseprogressCreateOrConnectWithoutExerciseInput | exerciseprogressCreateOrConnectWithoutExerciseInput[]
    createMany?: exerciseprogressCreateManyExerciseInputEnvelope
    connect?: exerciseprogressWhereUniqueInput | exerciseprogressWhereUniqueInput[]
  }

  export type listitemUncheckedCreateNestedManyWithoutExerciseInput = {
    create?: XOR<listitemCreateWithoutExerciseInput, listitemUncheckedCreateWithoutExerciseInput> | listitemCreateWithoutExerciseInput[] | listitemUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: listitemCreateOrConnectWithoutExerciseInput | listitemCreateOrConnectWithoutExerciseInput[]
    createMany?: listitemCreateManyExerciseInputEnvelope
    connect?: listitemWhereUniqueInput | listitemWhereUniqueInput[]
  }

  export type submissionUncheckedCreateNestedManyWithoutExerciseInput = {
    create?: XOR<submissionCreateWithoutExerciseInput, submissionUncheckedCreateWithoutExerciseInput> | submissionCreateWithoutExerciseInput[] | submissionUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: submissionCreateOrConnectWithoutExerciseInput | submissionCreateOrConnectWithoutExerciseInput[]
    createMany?: submissionCreateManyExerciseInputEnvelope
    connect?: submissionWhereUniqueInput | submissionWhereUniqueInput[]
  }

  export type testcaseUncheckedCreateNestedManyWithoutExerciseInput = {
    create?: XOR<testcaseCreateWithoutExerciseInput, testcaseUncheckedCreateWithoutExerciseInput> | testcaseCreateWithoutExerciseInput[] | testcaseUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: testcaseCreateOrConnectWithoutExerciseInput | testcaseCreateOrConnectWithoutExerciseInput[]
    createMany?: testcaseCreateManyExerciseInputEnvelope
    connect?: testcaseWhereUniqueInput | testcaseWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type Enumexercise_DifficultyFieldUpdateOperationsInput = {
    set?: $Enums.exercise_Difficulty
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type commentUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<commentCreateWithoutExerciseInput, commentUncheckedCreateWithoutExerciseInput> | commentCreateWithoutExerciseInput[] | commentUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: commentCreateOrConnectWithoutExerciseInput | commentCreateOrConnectWithoutExerciseInput[]
    upsert?: commentUpsertWithWhereUniqueWithoutExerciseInput | commentUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: commentCreateManyExerciseInputEnvelope
    set?: commentWhereUniqueInput | commentWhereUniqueInput[]
    disconnect?: commentWhereUniqueInput | commentWhereUniqueInput[]
    delete?: commentWhereUniqueInput | commentWhereUniqueInput[]
    connect?: commentWhereUniqueInput | commentWhereUniqueInput[]
    update?: commentUpdateWithWhereUniqueWithoutExerciseInput | commentUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: commentUpdateManyWithWhereWithoutExerciseInput | commentUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: commentScalarWhereInput | commentScalarWhereInput[]
  }

  export type topicUpdateOneWithoutExerciseNestedInput = {
    create?: XOR<topicCreateWithoutExerciseInput, topicUncheckedCreateWithoutExerciseInput>
    connectOrCreate?: topicCreateOrConnectWithoutExerciseInput
    upsert?: topicUpsertWithoutExerciseInput
    disconnect?: topicWhereInput | boolean
    delete?: topicWhereInput | boolean
    connect?: topicWhereUniqueInput
    update?: XOR<XOR<topicUpdateToOneWithWhereWithoutExerciseInput, topicUpdateWithoutExerciseInput>, topicUncheckedUpdateWithoutExerciseInput>
  }

  export type studyplanitemUpdateOneWithoutExerciseNestedInput = {
    create?: XOR<studyplanitemCreateWithoutExerciseInput, studyplanitemUncheckedCreateWithoutExerciseInput>
    connectOrCreate?: studyplanitemCreateOrConnectWithoutExerciseInput
    upsert?: studyplanitemUpsertWithoutExerciseInput
    disconnect?: studyplanitemWhereInput | boolean
    delete?: studyplanitemWhereInput | boolean
    connect?: studyplanitemWhereUniqueInput
    update?: XOR<XOR<studyplanitemUpdateToOneWithWhereWithoutExerciseInput, studyplanitemUpdateWithoutExerciseInput>, studyplanitemUncheckedUpdateWithoutExerciseInput>
  }

  export type exerciselikeUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<exerciselikeCreateWithoutExerciseInput, exerciselikeUncheckedCreateWithoutExerciseInput> | exerciselikeCreateWithoutExerciseInput[] | exerciselikeUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: exerciselikeCreateOrConnectWithoutExerciseInput | exerciselikeCreateOrConnectWithoutExerciseInput[]
    upsert?: exerciselikeUpsertWithWhereUniqueWithoutExerciseInput | exerciselikeUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: exerciselikeCreateManyExerciseInputEnvelope
    set?: exerciselikeWhereUniqueInput | exerciselikeWhereUniqueInput[]
    disconnect?: exerciselikeWhereUniqueInput | exerciselikeWhereUniqueInput[]
    delete?: exerciselikeWhereUniqueInput | exerciselikeWhereUniqueInput[]
    connect?: exerciselikeWhereUniqueInput | exerciselikeWhereUniqueInput[]
    update?: exerciselikeUpdateWithWhereUniqueWithoutExerciseInput | exerciselikeUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: exerciselikeUpdateManyWithWhereWithoutExerciseInput | exerciselikeUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: exerciselikeScalarWhereInput | exerciselikeScalarWhereInput[]
  }

  export type exerciseprogressUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<exerciseprogressCreateWithoutExerciseInput, exerciseprogressUncheckedCreateWithoutExerciseInput> | exerciseprogressCreateWithoutExerciseInput[] | exerciseprogressUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: exerciseprogressCreateOrConnectWithoutExerciseInput | exerciseprogressCreateOrConnectWithoutExerciseInput[]
    upsert?: exerciseprogressUpsertWithWhereUniqueWithoutExerciseInput | exerciseprogressUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: exerciseprogressCreateManyExerciseInputEnvelope
    set?: exerciseprogressWhereUniqueInput | exerciseprogressWhereUniqueInput[]
    disconnect?: exerciseprogressWhereUniqueInput | exerciseprogressWhereUniqueInput[]
    delete?: exerciseprogressWhereUniqueInput | exerciseprogressWhereUniqueInput[]
    connect?: exerciseprogressWhereUniqueInput | exerciseprogressWhereUniqueInput[]
    update?: exerciseprogressUpdateWithWhereUniqueWithoutExerciseInput | exerciseprogressUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: exerciseprogressUpdateManyWithWhereWithoutExerciseInput | exerciseprogressUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: exerciseprogressScalarWhereInput | exerciseprogressScalarWhereInput[]
  }

  export type listitemUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<listitemCreateWithoutExerciseInput, listitemUncheckedCreateWithoutExerciseInput> | listitemCreateWithoutExerciseInput[] | listitemUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: listitemCreateOrConnectWithoutExerciseInput | listitemCreateOrConnectWithoutExerciseInput[]
    upsert?: listitemUpsertWithWhereUniqueWithoutExerciseInput | listitemUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: listitemCreateManyExerciseInputEnvelope
    set?: listitemWhereUniqueInput | listitemWhereUniqueInput[]
    disconnect?: listitemWhereUniqueInput | listitemWhereUniqueInput[]
    delete?: listitemWhereUniqueInput | listitemWhereUniqueInput[]
    connect?: listitemWhereUniqueInput | listitemWhereUniqueInput[]
    update?: listitemUpdateWithWhereUniqueWithoutExerciseInput | listitemUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: listitemUpdateManyWithWhereWithoutExerciseInput | listitemUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: listitemScalarWhereInput | listitemScalarWhereInput[]
  }

  export type submissionUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<submissionCreateWithoutExerciseInput, submissionUncheckedCreateWithoutExerciseInput> | submissionCreateWithoutExerciseInput[] | submissionUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: submissionCreateOrConnectWithoutExerciseInput | submissionCreateOrConnectWithoutExerciseInput[]
    upsert?: submissionUpsertWithWhereUniqueWithoutExerciseInput | submissionUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: submissionCreateManyExerciseInputEnvelope
    set?: submissionWhereUniqueInput | submissionWhereUniqueInput[]
    disconnect?: submissionWhereUniqueInput | submissionWhereUniqueInput[]
    delete?: submissionWhereUniqueInput | submissionWhereUniqueInput[]
    connect?: submissionWhereUniqueInput | submissionWhereUniqueInput[]
    update?: submissionUpdateWithWhereUniqueWithoutExerciseInput | submissionUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: submissionUpdateManyWithWhereWithoutExerciseInput | submissionUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: submissionScalarWhereInput | submissionScalarWhereInput[]
  }

  export type testcaseUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<testcaseCreateWithoutExerciseInput, testcaseUncheckedCreateWithoutExerciseInput> | testcaseCreateWithoutExerciseInput[] | testcaseUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: testcaseCreateOrConnectWithoutExerciseInput | testcaseCreateOrConnectWithoutExerciseInput[]
    upsert?: testcaseUpsertWithWhereUniqueWithoutExerciseInput | testcaseUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: testcaseCreateManyExerciseInputEnvelope
    set?: testcaseWhereUniqueInput | testcaseWhereUniqueInput[]
    disconnect?: testcaseWhereUniqueInput | testcaseWhereUniqueInput[]
    delete?: testcaseWhereUniqueInput | testcaseWhereUniqueInput[]
    connect?: testcaseWhereUniqueInput | testcaseWhereUniqueInput[]
    update?: testcaseUpdateWithWhereUniqueWithoutExerciseInput | testcaseUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: testcaseUpdateManyWithWhereWithoutExerciseInput | testcaseUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: testcaseScalarWhereInput | testcaseScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type commentUncheckedUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<commentCreateWithoutExerciseInput, commentUncheckedCreateWithoutExerciseInput> | commentCreateWithoutExerciseInput[] | commentUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: commentCreateOrConnectWithoutExerciseInput | commentCreateOrConnectWithoutExerciseInput[]
    upsert?: commentUpsertWithWhereUniqueWithoutExerciseInput | commentUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: commentCreateManyExerciseInputEnvelope
    set?: commentWhereUniqueInput | commentWhereUniqueInput[]
    disconnect?: commentWhereUniqueInput | commentWhereUniqueInput[]
    delete?: commentWhereUniqueInput | commentWhereUniqueInput[]
    connect?: commentWhereUniqueInput | commentWhereUniqueInput[]
    update?: commentUpdateWithWhereUniqueWithoutExerciseInput | commentUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: commentUpdateManyWithWhereWithoutExerciseInput | commentUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: commentScalarWhereInput | commentScalarWhereInput[]
  }

  export type exerciselikeUncheckedUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<exerciselikeCreateWithoutExerciseInput, exerciselikeUncheckedCreateWithoutExerciseInput> | exerciselikeCreateWithoutExerciseInput[] | exerciselikeUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: exerciselikeCreateOrConnectWithoutExerciseInput | exerciselikeCreateOrConnectWithoutExerciseInput[]
    upsert?: exerciselikeUpsertWithWhereUniqueWithoutExerciseInput | exerciselikeUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: exerciselikeCreateManyExerciseInputEnvelope
    set?: exerciselikeWhereUniqueInput | exerciselikeWhereUniqueInput[]
    disconnect?: exerciselikeWhereUniqueInput | exerciselikeWhereUniqueInput[]
    delete?: exerciselikeWhereUniqueInput | exerciselikeWhereUniqueInput[]
    connect?: exerciselikeWhereUniqueInput | exerciselikeWhereUniqueInput[]
    update?: exerciselikeUpdateWithWhereUniqueWithoutExerciseInput | exerciselikeUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: exerciselikeUpdateManyWithWhereWithoutExerciseInput | exerciselikeUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: exerciselikeScalarWhereInput | exerciselikeScalarWhereInput[]
  }

  export type exerciseprogressUncheckedUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<exerciseprogressCreateWithoutExerciseInput, exerciseprogressUncheckedCreateWithoutExerciseInput> | exerciseprogressCreateWithoutExerciseInput[] | exerciseprogressUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: exerciseprogressCreateOrConnectWithoutExerciseInput | exerciseprogressCreateOrConnectWithoutExerciseInput[]
    upsert?: exerciseprogressUpsertWithWhereUniqueWithoutExerciseInput | exerciseprogressUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: exerciseprogressCreateManyExerciseInputEnvelope
    set?: exerciseprogressWhereUniqueInput | exerciseprogressWhereUniqueInput[]
    disconnect?: exerciseprogressWhereUniqueInput | exerciseprogressWhereUniqueInput[]
    delete?: exerciseprogressWhereUniqueInput | exerciseprogressWhereUniqueInput[]
    connect?: exerciseprogressWhereUniqueInput | exerciseprogressWhereUniqueInput[]
    update?: exerciseprogressUpdateWithWhereUniqueWithoutExerciseInput | exerciseprogressUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: exerciseprogressUpdateManyWithWhereWithoutExerciseInput | exerciseprogressUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: exerciseprogressScalarWhereInput | exerciseprogressScalarWhereInput[]
  }

  export type listitemUncheckedUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<listitemCreateWithoutExerciseInput, listitemUncheckedCreateWithoutExerciseInput> | listitemCreateWithoutExerciseInput[] | listitemUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: listitemCreateOrConnectWithoutExerciseInput | listitemCreateOrConnectWithoutExerciseInput[]
    upsert?: listitemUpsertWithWhereUniqueWithoutExerciseInput | listitemUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: listitemCreateManyExerciseInputEnvelope
    set?: listitemWhereUniqueInput | listitemWhereUniqueInput[]
    disconnect?: listitemWhereUniqueInput | listitemWhereUniqueInput[]
    delete?: listitemWhereUniqueInput | listitemWhereUniqueInput[]
    connect?: listitemWhereUniqueInput | listitemWhereUniqueInput[]
    update?: listitemUpdateWithWhereUniqueWithoutExerciseInput | listitemUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: listitemUpdateManyWithWhereWithoutExerciseInput | listitemUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: listitemScalarWhereInput | listitemScalarWhereInput[]
  }

  export type submissionUncheckedUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<submissionCreateWithoutExerciseInput, submissionUncheckedCreateWithoutExerciseInput> | submissionCreateWithoutExerciseInput[] | submissionUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: submissionCreateOrConnectWithoutExerciseInput | submissionCreateOrConnectWithoutExerciseInput[]
    upsert?: submissionUpsertWithWhereUniqueWithoutExerciseInput | submissionUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: submissionCreateManyExerciseInputEnvelope
    set?: submissionWhereUniqueInput | submissionWhereUniqueInput[]
    disconnect?: submissionWhereUniqueInput | submissionWhereUniqueInput[]
    delete?: submissionWhereUniqueInput | submissionWhereUniqueInput[]
    connect?: submissionWhereUniqueInput | submissionWhereUniqueInput[]
    update?: submissionUpdateWithWhereUniqueWithoutExerciseInput | submissionUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: submissionUpdateManyWithWhereWithoutExerciseInput | submissionUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: submissionScalarWhereInput | submissionScalarWhereInput[]
  }

  export type testcaseUncheckedUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<testcaseCreateWithoutExerciseInput, testcaseUncheckedCreateWithoutExerciseInput> | testcaseCreateWithoutExerciseInput[] | testcaseUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: testcaseCreateOrConnectWithoutExerciseInput | testcaseCreateOrConnectWithoutExerciseInput[]
    upsert?: testcaseUpsertWithWhereUniqueWithoutExerciseInput | testcaseUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: testcaseCreateManyExerciseInputEnvelope
    set?: testcaseWhereUniqueInput | testcaseWhereUniqueInput[]
    disconnect?: testcaseWhereUniqueInput | testcaseWhereUniqueInput[]
    delete?: testcaseWhereUniqueInput | testcaseWhereUniqueInput[]
    connect?: testcaseWhereUniqueInput | testcaseWhereUniqueInput[]
    update?: testcaseUpdateWithWhereUniqueWithoutExerciseInput | testcaseUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: testcaseUpdateManyWithWhereWithoutExerciseInput | testcaseUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: testcaseScalarWhereInput | testcaseScalarWhereInput[]
  }

  export type exerciseCreateNestedOneWithoutSubmissionInput = {
    create?: XOR<exerciseCreateWithoutSubmissionInput, exerciseUncheckedCreateWithoutSubmissionInput>
    connectOrCreate?: exerciseCreateOrConnectWithoutSubmissionInput
    connect?: exerciseWhereUniqueInput
  }

  export type userCreateNestedOneWithoutSubmissionInput = {
    create?: XOR<userCreateWithoutSubmissionInput, userUncheckedCreateWithoutSubmissionInput>
    connectOrCreate?: userCreateOrConnectWithoutSubmissionInput
    connect?: userWhereUniqueInput
  }

  export type testcaseresultCreateNestedManyWithoutSubmissionInput = {
    create?: XOR<testcaseresultCreateWithoutSubmissionInput, testcaseresultUncheckedCreateWithoutSubmissionInput> | testcaseresultCreateWithoutSubmissionInput[] | testcaseresultUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: testcaseresultCreateOrConnectWithoutSubmissionInput | testcaseresultCreateOrConnectWithoutSubmissionInput[]
    createMany?: testcaseresultCreateManySubmissionInputEnvelope
    connect?: testcaseresultWhereUniqueInput | testcaseresultWhereUniqueInput[]
  }

  export type testcaseresultUncheckedCreateNestedManyWithoutSubmissionInput = {
    create?: XOR<testcaseresultCreateWithoutSubmissionInput, testcaseresultUncheckedCreateWithoutSubmissionInput> | testcaseresultCreateWithoutSubmissionInput[] | testcaseresultUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: testcaseresultCreateOrConnectWithoutSubmissionInput | testcaseresultCreateOrConnectWithoutSubmissionInput[]
    createMany?: testcaseresultCreateManySubmissionInputEnvelope
    connect?: testcaseresultWhereUniqueInput | testcaseresultWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableEnumsubmission_ResultFieldUpdateOperationsInput = {
    set?: $Enums.submission_Result | null
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type exerciseUpdateOneRequiredWithoutSubmissionNestedInput = {
    create?: XOR<exerciseCreateWithoutSubmissionInput, exerciseUncheckedCreateWithoutSubmissionInput>
    connectOrCreate?: exerciseCreateOrConnectWithoutSubmissionInput
    upsert?: exerciseUpsertWithoutSubmissionInput
    connect?: exerciseWhereUniqueInput
    update?: XOR<XOR<exerciseUpdateToOneWithWhereWithoutSubmissionInput, exerciseUpdateWithoutSubmissionInput>, exerciseUncheckedUpdateWithoutSubmissionInput>
  }

  export type userUpdateOneRequiredWithoutSubmissionNestedInput = {
    create?: XOR<userCreateWithoutSubmissionInput, userUncheckedCreateWithoutSubmissionInput>
    connectOrCreate?: userCreateOrConnectWithoutSubmissionInput
    upsert?: userUpsertWithoutSubmissionInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutSubmissionInput, userUpdateWithoutSubmissionInput>, userUncheckedUpdateWithoutSubmissionInput>
  }

  export type testcaseresultUpdateManyWithoutSubmissionNestedInput = {
    create?: XOR<testcaseresultCreateWithoutSubmissionInput, testcaseresultUncheckedCreateWithoutSubmissionInput> | testcaseresultCreateWithoutSubmissionInput[] | testcaseresultUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: testcaseresultCreateOrConnectWithoutSubmissionInput | testcaseresultCreateOrConnectWithoutSubmissionInput[]
    upsert?: testcaseresultUpsertWithWhereUniqueWithoutSubmissionInput | testcaseresultUpsertWithWhereUniqueWithoutSubmissionInput[]
    createMany?: testcaseresultCreateManySubmissionInputEnvelope
    set?: testcaseresultWhereUniqueInput | testcaseresultWhereUniqueInput[]
    disconnect?: testcaseresultWhereUniqueInput | testcaseresultWhereUniqueInput[]
    delete?: testcaseresultWhereUniqueInput | testcaseresultWhereUniqueInput[]
    connect?: testcaseresultWhereUniqueInput | testcaseresultWhereUniqueInput[]
    update?: testcaseresultUpdateWithWhereUniqueWithoutSubmissionInput | testcaseresultUpdateWithWhereUniqueWithoutSubmissionInput[]
    updateMany?: testcaseresultUpdateManyWithWhereWithoutSubmissionInput | testcaseresultUpdateManyWithWhereWithoutSubmissionInput[]
    deleteMany?: testcaseresultScalarWhereInput | testcaseresultScalarWhereInput[]
  }

  export type testcaseresultUncheckedUpdateManyWithoutSubmissionNestedInput = {
    create?: XOR<testcaseresultCreateWithoutSubmissionInput, testcaseresultUncheckedCreateWithoutSubmissionInput> | testcaseresultCreateWithoutSubmissionInput[] | testcaseresultUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: testcaseresultCreateOrConnectWithoutSubmissionInput | testcaseresultCreateOrConnectWithoutSubmissionInput[]
    upsert?: testcaseresultUpsertWithWhereUniqueWithoutSubmissionInput | testcaseresultUpsertWithWhereUniqueWithoutSubmissionInput[]
    createMany?: testcaseresultCreateManySubmissionInputEnvelope
    set?: testcaseresultWhereUniqueInput | testcaseresultWhereUniqueInput[]
    disconnect?: testcaseresultWhereUniqueInput | testcaseresultWhereUniqueInput[]
    delete?: testcaseresultWhereUniqueInput | testcaseresultWhereUniqueInput[]
    connect?: testcaseresultWhereUniqueInput | testcaseresultWhereUniqueInput[]
    update?: testcaseresultUpdateWithWhereUniqueWithoutSubmissionInput | testcaseresultUpdateWithWhereUniqueWithoutSubmissionInput[]
    updateMany?: testcaseresultUpdateManyWithWhereWithoutSubmissionInput | testcaseresultUpdateManyWithWhereWithoutSubmissionInput[]
    deleteMany?: testcaseresultScalarWhereInput | testcaseresultScalarWhereInput[]
  }

  export type exerciseCreateNestedOneWithoutTestcaseInput = {
    create?: XOR<exerciseCreateWithoutTestcaseInput, exerciseUncheckedCreateWithoutTestcaseInput>
    connectOrCreate?: exerciseCreateOrConnectWithoutTestcaseInput
    connect?: exerciseWhereUniqueInput
  }

  export type testcaseresultCreateNestedManyWithoutTestcaseInput = {
    create?: XOR<testcaseresultCreateWithoutTestcaseInput, testcaseresultUncheckedCreateWithoutTestcaseInput> | testcaseresultCreateWithoutTestcaseInput[] | testcaseresultUncheckedCreateWithoutTestcaseInput[]
    connectOrCreate?: testcaseresultCreateOrConnectWithoutTestcaseInput | testcaseresultCreateOrConnectWithoutTestcaseInput[]
    createMany?: testcaseresultCreateManyTestcaseInputEnvelope
    connect?: testcaseresultWhereUniqueInput | testcaseresultWhereUniqueInput[]
  }

  export type testcaseresultUncheckedCreateNestedManyWithoutTestcaseInput = {
    create?: XOR<testcaseresultCreateWithoutTestcaseInput, testcaseresultUncheckedCreateWithoutTestcaseInput> | testcaseresultCreateWithoutTestcaseInput[] | testcaseresultUncheckedCreateWithoutTestcaseInput[]
    connectOrCreate?: testcaseresultCreateOrConnectWithoutTestcaseInput | testcaseresultCreateOrConnectWithoutTestcaseInput[]
    createMany?: testcaseresultCreateManyTestcaseInputEnvelope
    connect?: testcaseresultWhereUniqueInput | testcaseresultWhereUniqueInput[]
  }

  export type exerciseUpdateOneRequiredWithoutTestcaseNestedInput = {
    create?: XOR<exerciseCreateWithoutTestcaseInput, exerciseUncheckedCreateWithoutTestcaseInput>
    connectOrCreate?: exerciseCreateOrConnectWithoutTestcaseInput
    upsert?: exerciseUpsertWithoutTestcaseInput
    connect?: exerciseWhereUniqueInput
    update?: XOR<XOR<exerciseUpdateToOneWithWhereWithoutTestcaseInput, exerciseUpdateWithoutTestcaseInput>, exerciseUncheckedUpdateWithoutTestcaseInput>
  }

  export type testcaseresultUpdateManyWithoutTestcaseNestedInput = {
    create?: XOR<testcaseresultCreateWithoutTestcaseInput, testcaseresultUncheckedCreateWithoutTestcaseInput> | testcaseresultCreateWithoutTestcaseInput[] | testcaseresultUncheckedCreateWithoutTestcaseInput[]
    connectOrCreate?: testcaseresultCreateOrConnectWithoutTestcaseInput | testcaseresultCreateOrConnectWithoutTestcaseInput[]
    upsert?: testcaseresultUpsertWithWhereUniqueWithoutTestcaseInput | testcaseresultUpsertWithWhereUniqueWithoutTestcaseInput[]
    createMany?: testcaseresultCreateManyTestcaseInputEnvelope
    set?: testcaseresultWhereUniqueInput | testcaseresultWhereUniqueInput[]
    disconnect?: testcaseresultWhereUniqueInput | testcaseresultWhereUniqueInput[]
    delete?: testcaseresultWhereUniqueInput | testcaseresultWhereUniqueInput[]
    connect?: testcaseresultWhereUniqueInput | testcaseresultWhereUniqueInput[]
    update?: testcaseresultUpdateWithWhereUniqueWithoutTestcaseInput | testcaseresultUpdateWithWhereUniqueWithoutTestcaseInput[]
    updateMany?: testcaseresultUpdateManyWithWhereWithoutTestcaseInput | testcaseresultUpdateManyWithWhereWithoutTestcaseInput[]
    deleteMany?: testcaseresultScalarWhereInput | testcaseresultScalarWhereInput[]
  }

  export type testcaseresultUncheckedUpdateManyWithoutTestcaseNestedInput = {
    create?: XOR<testcaseresultCreateWithoutTestcaseInput, testcaseresultUncheckedCreateWithoutTestcaseInput> | testcaseresultCreateWithoutTestcaseInput[] | testcaseresultUncheckedCreateWithoutTestcaseInput[]
    connectOrCreate?: testcaseresultCreateOrConnectWithoutTestcaseInput | testcaseresultCreateOrConnectWithoutTestcaseInput[]
    upsert?: testcaseresultUpsertWithWhereUniqueWithoutTestcaseInput | testcaseresultUpsertWithWhereUniqueWithoutTestcaseInput[]
    createMany?: testcaseresultCreateManyTestcaseInputEnvelope
    set?: testcaseresultWhereUniqueInput | testcaseresultWhereUniqueInput[]
    disconnect?: testcaseresultWhereUniqueInput | testcaseresultWhereUniqueInput[]
    delete?: testcaseresultWhereUniqueInput | testcaseresultWhereUniqueInput[]
    connect?: testcaseresultWhereUniqueInput | testcaseresultWhereUniqueInput[]
    update?: testcaseresultUpdateWithWhereUniqueWithoutTestcaseInput | testcaseresultUpdateWithWhereUniqueWithoutTestcaseInput[]
    updateMany?: testcaseresultUpdateManyWithWhereWithoutTestcaseInput | testcaseresultUpdateManyWithWhereWithoutTestcaseInput[]
    deleteMany?: testcaseresultScalarWhereInput | testcaseresultScalarWhereInput[]
  }

  export type submissionCreateNestedOneWithoutTestcaseresultInput = {
    create?: XOR<submissionCreateWithoutTestcaseresultInput, submissionUncheckedCreateWithoutTestcaseresultInput>
    connectOrCreate?: submissionCreateOrConnectWithoutTestcaseresultInput
    connect?: submissionWhereUniqueInput
  }

  export type testcaseCreateNestedOneWithoutTestcaseresultInput = {
    create?: XOR<testcaseCreateWithoutTestcaseresultInput, testcaseUncheckedCreateWithoutTestcaseresultInput>
    connectOrCreate?: testcaseCreateOrConnectWithoutTestcaseresultInput
    connect?: testcaseWhereUniqueInput
  }

  export type Enumtestcaseresult_ResultFieldUpdateOperationsInput = {
    set?: $Enums.testcaseresult_Result
  }

  export type submissionUpdateOneRequiredWithoutTestcaseresultNestedInput = {
    create?: XOR<submissionCreateWithoutTestcaseresultInput, submissionUncheckedCreateWithoutTestcaseresultInput>
    connectOrCreate?: submissionCreateOrConnectWithoutTestcaseresultInput
    upsert?: submissionUpsertWithoutTestcaseresultInput
    connect?: submissionWhereUniqueInput
    update?: XOR<XOR<submissionUpdateToOneWithWhereWithoutTestcaseresultInput, submissionUpdateWithoutTestcaseresultInput>, submissionUncheckedUpdateWithoutTestcaseresultInput>
  }

  export type testcaseUpdateOneRequiredWithoutTestcaseresultNestedInput = {
    create?: XOR<testcaseCreateWithoutTestcaseresultInput, testcaseUncheckedCreateWithoutTestcaseresultInput>
    connectOrCreate?: testcaseCreateOrConnectWithoutTestcaseresultInput
    upsert?: testcaseUpsertWithoutTestcaseresultInput
    connect?: testcaseWhereUniqueInput
    update?: XOR<XOR<testcaseUpdateToOneWithWhereWithoutTestcaseresultInput, testcaseUpdateWithoutTestcaseresultInput>, testcaseUncheckedUpdateWithoutTestcaseresultInput>
  }

  export type exerciseCreateNestedManyWithoutTopicInput = {
    create?: XOR<exerciseCreateWithoutTopicInput, exerciseUncheckedCreateWithoutTopicInput> | exerciseCreateWithoutTopicInput[] | exerciseUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: exerciseCreateOrConnectWithoutTopicInput | exerciseCreateOrConnectWithoutTopicInput[]
    createMany?: exerciseCreateManyTopicInputEnvelope
    connect?: exerciseWhereUniqueInput | exerciseWhereUniqueInput[]
  }

  export type exerciseUncheckedCreateNestedManyWithoutTopicInput = {
    create?: XOR<exerciseCreateWithoutTopicInput, exerciseUncheckedCreateWithoutTopicInput> | exerciseCreateWithoutTopicInput[] | exerciseUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: exerciseCreateOrConnectWithoutTopicInput | exerciseCreateOrConnectWithoutTopicInput[]
    createMany?: exerciseCreateManyTopicInputEnvelope
    connect?: exerciseWhereUniqueInput | exerciseWhereUniqueInput[]
  }

  export type exerciseUpdateManyWithoutTopicNestedInput = {
    create?: XOR<exerciseCreateWithoutTopicInput, exerciseUncheckedCreateWithoutTopicInput> | exerciseCreateWithoutTopicInput[] | exerciseUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: exerciseCreateOrConnectWithoutTopicInput | exerciseCreateOrConnectWithoutTopicInput[]
    upsert?: exerciseUpsertWithWhereUniqueWithoutTopicInput | exerciseUpsertWithWhereUniqueWithoutTopicInput[]
    createMany?: exerciseCreateManyTopicInputEnvelope
    set?: exerciseWhereUniqueInput | exerciseWhereUniqueInput[]
    disconnect?: exerciseWhereUniqueInput | exerciseWhereUniqueInput[]
    delete?: exerciseWhereUniqueInput | exerciseWhereUniqueInput[]
    connect?: exerciseWhereUniqueInput | exerciseWhereUniqueInput[]
    update?: exerciseUpdateWithWhereUniqueWithoutTopicInput | exerciseUpdateWithWhereUniqueWithoutTopicInput[]
    updateMany?: exerciseUpdateManyWithWhereWithoutTopicInput | exerciseUpdateManyWithWhereWithoutTopicInput[]
    deleteMany?: exerciseScalarWhereInput | exerciseScalarWhereInput[]
  }

  export type exerciseUncheckedUpdateManyWithoutTopicNestedInput = {
    create?: XOR<exerciseCreateWithoutTopicInput, exerciseUncheckedCreateWithoutTopicInput> | exerciseCreateWithoutTopicInput[] | exerciseUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: exerciseCreateOrConnectWithoutTopicInput | exerciseCreateOrConnectWithoutTopicInput[]
    upsert?: exerciseUpsertWithWhereUniqueWithoutTopicInput | exerciseUpsertWithWhereUniqueWithoutTopicInput[]
    createMany?: exerciseCreateManyTopicInputEnvelope
    set?: exerciseWhereUniqueInput | exerciseWhereUniqueInput[]
    disconnect?: exerciseWhereUniqueInput | exerciseWhereUniqueInput[]
    delete?: exerciseWhereUniqueInput | exerciseWhereUniqueInput[]
    connect?: exerciseWhereUniqueInput | exerciseWhereUniqueInput[]
    update?: exerciseUpdateWithWhereUniqueWithoutTopicInput | exerciseUpdateWithWhereUniqueWithoutTopicInput[]
    updateMany?: exerciseUpdateManyWithWhereWithoutTopicInput | exerciseUpdateManyWithWhereWithoutTopicInput[]
    deleteMany?: exerciseScalarWhereInput | exerciseScalarWhereInput[]
  }

  export type commentCreateNestedManyWithoutUserInput = {
    create?: XOR<commentCreateWithoutUserInput, commentUncheckedCreateWithoutUserInput> | commentCreateWithoutUserInput[] | commentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: commentCreateOrConnectWithoutUserInput | commentCreateOrConnectWithoutUserInput[]
    createMany?: commentCreateManyUserInputEnvelope
    connect?: commentWhereUniqueInput | commentWhereUniqueInput[]
  }

  export type commentlikeCreateNestedManyWithoutUserInput = {
    create?: XOR<commentlikeCreateWithoutUserInput, commentlikeUncheckedCreateWithoutUserInput> | commentlikeCreateWithoutUserInput[] | commentlikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: commentlikeCreateOrConnectWithoutUserInput | commentlikeCreateOrConnectWithoutUserInput[]
    createMany?: commentlikeCreateManyUserInputEnvelope
    connect?: commentlikeWhereUniqueInput | commentlikeWhereUniqueInput[]
  }

  export type exerciselikeCreateNestedManyWithoutUserInput = {
    create?: XOR<exerciselikeCreateWithoutUserInput, exerciselikeUncheckedCreateWithoutUserInput> | exerciselikeCreateWithoutUserInput[] | exerciselikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: exerciselikeCreateOrConnectWithoutUserInput | exerciselikeCreateOrConnectWithoutUserInput[]
    createMany?: exerciselikeCreateManyUserInputEnvelope
    connect?: exerciselikeWhereUniqueInput | exerciselikeWhereUniqueInput[]
  }

  export type exerciseprogressCreateNestedManyWithoutUserInput = {
    create?: XOR<exerciseprogressCreateWithoutUserInput, exerciseprogressUncheckedCreateWithoutUserInput> | exerciseprogressCreateWithoutUserInput[] | exerciseprogressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: exerciseprogressCreateOrConnectWithoutUserInput | exerciseprogressCreateOrConnectWithoutUserInput[]
    createMany?: exerciseprogressCreateManyUserInputEnvelope
    connect?: exerciseprogressWhereUniqueInput | exerciseprogressWhereUniqueInput[]
  }

  export type friendshipCreateNestedManyWithoutUser_friendship_requesterTouserInput = {
    create?: XOR<friendshipCreateWithoutUser_friendship_requesterTouserInput, friendshipUncheckedCreateWithoutUser_friendship_requesterTouserInput> | friendshipCreateWithoutUser_friendship_requesterTouserInput[] | friendshipUncheckedCreateWithoutUser_friendship_requesterTouserInput[]
    connectOrCreate?: friendshipCreateOrConnectWithoutUser_friendship_requesterTouserInput | friendshipCreateOrConnectWithoutUser_friendship_requesterTouserInput[]
    createMany?: friendshipCreateManyUser_friendship_requesterTouserInputEnvelope
    connect?: friendshipWhereUniqueInput | friendshipWhereUniqueInput[]
  }

  export type friendshipCreateNestedManyWithoutUser_friendship_addresseeTouserInput = {
    create?: XOR<friendshipCreateWithoutUser_friendship_addresseeTouserInput, friendshipUncheckedCreateWithoutUser_friendship_addresseeTouserInput> | friendshipCreateWithoutUser_friendship_addresseeTouserInput[] | friendshipUncheckedCreateWithoutUser_friendship_addresseeTouserInput[]
    connectOrCreate?: friendshipCreateOrConnectWithoutUser_friendship_addresseeTouserInput | friendshipCreateOrConnectWithoutUser_friendship_addresseeTouserInput[]
    createMany?: friendshipCreateManyUser_friendship_addresseeTouserInputEnvelope
    connect?: friendshipWhereUniqueInput | friendshipWhereUniqueInput[]
  }

  export type listCreateNestedManyWithoutUserInput = {
    create?: XOR<listCreateWithoutUserInput, listUncheckedCreateWithoutUserInput> | listCreateWithoutUserInput[] | listUncheckedCreateWithoutUserInput[]
    connectOrCreate?: listCreateOrConnectWithoutUserInput | listCreateOrConnectWithoutUserInput[]
    createMany?: listCreateManyUserInputEnvelope
    connect?: listWhereUniqueInput | listWhereUniqueInput[]
  }

  export type notificationCreateNestedManyWithoutUser_notification_UIDTouserInput = {
    create?: XOR<notificationCreateWithoutUser_notification_UIDTouserInput, notificationUncheckedCreateWithoutUser_notification_UIDTouserInput> | notificationCreateWithoutUser_notification_UIDTouserInput[] | notificationUncheckedCreateWithoutUser_notification_UIDTouserInput[]
    connectOrCreate?: notificationCreateOrConnectWithoutUser_notification_UIDTouserInput | notificationCreateOrConnectWithoutUser_notification_UIDTouserInput[]
    createMany?: notificationCreateManyUser_notification_UIDTouserInputEnvelope
    connect?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
  }

  export type notificationCreateNestedManyWithoutUser_notification_FromUserTouserInput = {
    create?: XOR<notificationCreateWithoutUser_notification_FromUserTouserInput, notificationUncheckedCreateWithoutUser_notification_FromUserTouserInput> | notificationCreateWithoutUser_notification_FromUserTouserInput[] | notificationUncheckedCreateWithoutUser_notification_FromUserTouserInput[]
    connectOrCreate?: notificationCreateOrConnectWithoutUser_notification_FromUserTouserInput | notificationCreateOrConnectWithoutUser_notification_FromUserTouserInput[]
    createMany?: notificationCreateManyUser_notification_FromUserTouserInputEnvelope
    connect?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
  }

  export type studyplanprogressCreateNestedManyWithoutUserInput = {
    create?: XOR<studyplanprogressCreateWithoutUserInput, studyplanprogressUncheckedCreateWithoutUserInput> | studyplanprogressCreateWithoutUserInput[] | studyplanprogressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: studyplanprogressCreateOrConnectWithoutUserInput | studyplanprogressCreateOrConnectWithoutUserInput[]
    createMany?: studyplanprogressCreateManyUserInputEnvelope
    connect?: studyplanprogressWhereUniqueInput | studyplanprogressWhereUniqueInput[]
  }

  export type submissionCreateNestedManyWithoutUserInput = {
    create?: XOR<submissionCreateWithoutUserInput, submissionUncheckedCreateWithoutUserInput> | submissionCreateWithoutUserInput[] | submissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: submissionCreateOrConnectWithoutUserInput | submissionCreateOrConnectWithoutUserInput[]
    createMany?: submissionCreateManyUserInputEnvelope
    connect?: submissionWhereUniqueInput | submissionWhereUniqueInput[]
  }

  export type commentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<commentCreateWithoutUserInput, commentUncheckedCreateWithoutUserInput> | commentCreateWithoutUserInput[] | commentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: commentCreateOrConnectWithoutUserInput | commentCreateOrConnectWithoutUserInput[]
    createMany?: commentCreateManyUserInputEnvelope
    connect?: commentWhereUniqueInput | commentWhereUniqueInput[]
  }

  export type commentlikeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<commentlikeCreateWithoutUserInput, commentlikeUncheckedCreateWithoutUserInput> | commentlikeCreateWithoutUserInput[] | commentlikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: commentlikeCreateOrConnectWithoutUserInput | commentlikeCreateOrConnectWithoutUserInput[]
    createMany?: commentlikeCreateManyUserInputEnvelope
    connect?: commentlikeWhereUniqueInput | commentlikeWhereUniqueInput[]
  }

  export type exerciselikeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<exerciselikeCreateWithoutUserInput, exerciselikeUncheckedCreateWithoutUserInput> | exerciselikeCreateWithoutUserInput[] | exerciselikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: exerciselikeCreateOrConnectWithoutUserInput | exerciselikeCreateOrConnectWithoutUserInput[]
    createMany?: exerciselikeCreateManyUserInputEnvelope
    connect?: exerciselikeWhereUniqueInput | exerciselikeWhereUniqueInput[]
  }

  export type exerciseprogressUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<exerciseprogressCreateWithoutUserInput, exerciseprogressUncheckedCreateWithoutUserInput> | exerciseprogressCreateWithoutUserInput[] | exerciseprogressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: exerciseprogressCreateOrConnectWithoutUserInput | exerciseprogressCreateOrConnectWithoutUserInput[]
    createMany?: exerciseprogressCreateManyUserInputEnvelope
    connect?: exerciseprogressWhereUniqueInput | exerciseprogressWhereUniqueInput[]
  }

  export type friendshipUncheckedCreateNestedManyWithoutUser_friendship_requesterTouserInput = {
    create?: XOR<friendshipCreateWithoutUser_friendship_requesterTouserInput, friendshipUncheckedCreateWithoutUser_friendship_requesterTouserInput> | friendshipCreateWithoutUser_friendship_requesterTouserInput[] | friendshipUncheckedCreateWithoutUser_friendship_requesterTouserInput[]
    connectOrCreate?: friendshipCreateOrConnectWithoutUser_friendship_requesterTouserInput | friendshipCreateOrConnectWithoutUser_friendship_requesterTouserInput[]
    createMany?: friendshipCreateManyUser_friendship_requesterTouserInputEnvelope
    connect?: friendshipWhereUniqueInput | friendshipWhereUniqueInput[]
  }

  export type friendshipUncheckedCreateNestedManyWithoutUser_friendship_addresseeTouserInput = {
    create?: XOR<friendshipCreateWithoutUser_friendship_addresseeTouserInput, friendshipUncheckedCreateWithoutUser_friendship_addresseeTouserInput> | friendshipCreateWithoutUser_friendship_addresseeTouserInput[] | friendshipUncheckedCreateWithoutUser_friendship_addresseeTouserInput[]
    connectOrCreate?: friendshipCreateOrConnectWithoutUser_friendship_addresseeTouserInput | friendshipCreateOrConnectWithoutUser_friendship_addresseeTouserInput[]
    createMany?: friendshipCreateManyUser_friendship_addresseeTouserInputEnvelope
    connect?: friendshipWhereUniqueInput | friendshipWhereUniqueInput[]
  }

  export type listUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<listCreateWithoutUserInput, listUncheckedCreateWithoutUserInput> | listCreateWithoutUserInput[] | listUncheckedCreateWithoutUserInput[]
    connectOrCreate?: listCreateOrConnectWithoutUserInput | listCreateOrConnectWithoutUserInput[]
    createMany?: listCreateManyUserInputEnvelope
    connect?: listWhereUniqueInput | listWhereUniqueInput[]
  }

  export type notificationUncheckedCreateNestedManyWithoutUser_notification_UIDTouserInput = {
    create?: XOR<notificationCreateWithoutUser_notification_UIDTouserInput, notificationUncheckedCreateWithoutUser_notification_UIDTouserInput> | notificationCreateWithoutUser_notification_UIDTouserInput[] | notificationUncheckedCreateWithoutUser_notification_UIDTouserInput[]
    connectOrCreate?: notificationCreateOrConnectWithoutUser_notification_UIDTouserInput | notificationCreateOrConnectWithoutUser_notification_UIDTouserInput[]
    createMany?: notificationCreateManyUser_notification_UIDTouserInputEnvelope
    connect?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
  }

  export type notificationUncheckedCreateNestedManyWithoutUser_notification_FromUserTouserInput = {
    create?: XOR<notificationCreateWithoutUser_notification_FromUserTouserInput, notificationUncheckedCreateWithoutUser_notification_FromUserTouserInput> | notificationCreateWithoutUser_notification_FromUserTouserInput[] | notificationUncheckedCreateWithoutUser_notification_FromUserTouserInput[]
    connectOrCreate?: notificationCreateOrConnectWithoutUser_notification_FromUserTouserInput | notificationCreateOrConnectWithoutUser_notification_FromUserTouserInput[]
    createMany?: notificationCreateManyUser_notification_FromUserTouserInputEnvelope
    connect?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
  }

  export type studyplanprogressUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<studyplanprogressCreateWithoutUserInput, studyplanprogressUncheckedCreateWithoutUserInput> | studyplanprogressCreateWithoutUserInput[] | studyplanprogressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: studyplanprogressCreateOrConnectWithoutUserInput | studyplanprogressCreateOrConnectWithoutUserInput[]
    createMany?: studyplanprogressCreateManyUserInputEnvelope
    connect?: studyplanprogressWhereUniqueInput | studyplanprogressWhereUniqueInput[]
  }

  export type submissionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<submissionCreateWithoutUserInput, submissionUncheckedCreateWithoutUserInput> | submissionCreateWithoutUserInput[] | submissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: submissionCreateOrConnectWithoutUserInput | submissionCreateOrConnectWithoutUserInput[]
    createMany?: submissionCreateManyUserInputEnvelope
    connect?: submissionWhereUniqueInput | submissionWhereUniqueInput[]
  }

  export type Enumuser_RoleFieldUpdateOperationsInput = {
    set?: $Enums.user_Role
  }

  export type commentUpdateManyWithoutUserNestedInput = {
    create?: XOR<commentCreateWithoutUserInput, commentUncheckedCreateWithoutUserInput> | commentCreateWithoutUserInput[] | commentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: commentCreateOrConnectWithoutUserInput | commentCreateOrConnectWithoutUserInput[]
    upsert?: commentUpsertWithWhereUniqueWithoutUserInput | commentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: commentCreateManyUserInputEnvelope
    set?: commentWhereUniqueInput | commentWhereUniqueInput[]
    disconnect?: commentWhereUniqueInput | commentWhereUniqueInput[]
    delete?: commentWhereUniqueInput | commentWhereUniqueInput[]
    connect?: commentWhereUniqueInput | commentWhereUniqueInput[]
    update?: commentUpdateWithWhereUniqueWithoutUserInput | commentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: commentUpdateManyWithWhereWithoutUserInput | commentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: commentScalarWhereInput | commentScalarWhereInput[]
  }

  export type commentlikeUpdateManyWithoutUserNestedInput = {
    create?: XOR<commentlikeCreateWithoutUserInput, commentlikeUncheckedCreateWithoutUserInput> | commentlikeCreateWithoutUserInput[] | commentlikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: commentlikeCreateOrConnectWithoutUserInput | commentlikeCreateOrConnectWithoutUserInput[]
    upsert?: commentlikeUpsertWithWhereUniqueWithoutUserInput | commentlikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: commentlikeCreateManyUserInputEnvelope
    set?: commentlikeWhereUniqueInput | commentlikeWhereUniqueInput[]
    disconnect?: commentlikeWhereUniqueInput | commentlikeWhereUniqueInput[]
    delete?: commentlikeWhereUniqueInput | commentlikeWhereUniqueInput[]
    connect?: commentlikeWhereUniqueInput | commentlikeWhereUniqueInput[]
    update?: commentlikeUpdateWithWhereUniqueWithoutUserInput | commentlikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: commentlikeUpdateManyWithWhereWithoutUserInput | commentlikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: commentlikeScalarWhereInput | commentlikeScalarWhereInput[]
  }

  export type exerciselikeUpdateManyWithoutUserNestedInput = {
    create?: XOR<exerciselikeCreateWithoutUserInput, exerciselikeUncheckedCreateWithoutUserInput> | exerciselikeCreateWithoutUserInput[] | exerciselikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: exerciselikeCreateOrConnectWithoutUserInput | exerciselikeCreateOrConnectWithoutUserInput[]
    upsert?: exerciselikeUpsertWithWhereUniqueWithoutUserInput | exerciselikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: exerciselikeCreateManyUserInputEnvelope
    set?: exerciselikeWhereUniqueInput | exerciselikeWhereUniqueInput[]
    disconnect?: exerciselikeWhereUniqueInput | exerciselikeWhereUniqueInput[]
    delete?: exerciselikeWhereUniqueInput | exerciselikeWhereUniqueInput[]
    connect?: exerciselikeWhereUniqueInput | exerciselikeWhereUniqueInput[]
    update?: exerciselikeUpdateWithWhereUniqueWithoutUserInput | exerciselikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: exerciselikeUpdateManyWithWhereWithoutUserInput | exerciselikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: exerciselikeScalarWhereInput | exerciselikeScalarWhereInput[]
  }

  export type exerciseprogressUpdateManyWithoutUserNestedInput = {
    create?: XOR<exerciseprogressCreateWithoutUserInput, exerciseprogressUncheckedCreateWithoutUserInput> | exerciseprogressCreateWithoutUserInput[] | exerciseprogressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: exerciseprogressCreateOrConnectWithoutUserInput | exerciseprogressCreateOrConnectWithoutUserInput[]
    upsert?: exerciseprogressUpsertWithWhereUniqueWithoutUserInput | exerciseprogressUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: exerciseprogressCreateManyUserInputEnvelope
    set?: exerciseprogressWhereUniqueInput | exerciseprogressWhereUniqueInput[]
    disconnect?: exerciseprogressWhereUniqueInput | exerciseprogressWhereUniqueInput[]
    delete?: exerciseprogressWhereUniqueInput | exerciseprogressWhereUniqueInput[]
    connect?: exerciseprogressWhereUniqueInput | exerciseprogressWhereUniqueInput[]
    update?: exerciseprogressUpdateWithWhereUniqueWithoutUserInput | exerciseprogressUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: exerciseprogressUpdateManyWithWhereWithoutUserInput | exerciseprogressUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: exerciseprogressScalarWhereInput | exerciseprogressScalarWhereInput[]
  }

  export type friendshipUpdateManyWithoutUser_friendship_requesterTouserNestedInput = {
    create?: XOR<friendshipCreateWithoutUser_friendship_requesterTouserInput, friendshipUncheckedCreateWithoutUser_friendship_requesterTouserInput> | friendshipCreateWithoutUser_friendship_requesterTouserInput[] | friendshipUncheckedCreateWithoutUser_friendship_requesterTouserInput[]
    connectOrCreate?: friendshipCreateOrConnectWithoutUser_friendship_requesterTouserInput | friendshipCreateOrConnectWithoutUser_friendship_requesterTouserInput[]
    upsert?: friendshipUpsertWithWhereUniqueWithoutUser_friendship_requesterTouserInput | friendshipUpsertWithWhereUniqueWithoutUser_friendship_requesterTouserInput[]
    createMany?: friendshipCreateManyUser_friendship_requesterTouserInputEnvelope
    set?: friendshipWhereUniqueInput | friendshipWhereUniqueInput[]
    disconnect?: friendshipWhereUniqueInput | friendshipWhereUniqueInput[]
    delete?: friendshipWhereUniqueInput | friendshipWhereUniqueInput[]
    connect?: friendshipWhereUniqueInput | friendshipWhereUniqueInput[]
    update?: friendshipUpdateWithWhereUniqueWithoutUser_friendship_requesterTouserInput | friendshipUpdateWithWhereUniqueWithoutUser_friendship_requesterTouserInput[]
    updateMany?: friendshipUpdateManyWithWhereWithoutUser_friendship_requesterTouserInput | friendshipUpdateManyWithWhereWithoutUser_friendship_requesterTouserInput[]
    deleteMany?: friendshipScalarWhereInput | friendshipScalarWhereInput[]
  }

  export type friendshipUpdateManyWithoutUser_friendship_addresseeTouserNestedInput = {
    create?: XOR<friendshipCreateWithoutUser_friendship_addresseeTouserInput, friendshipUncheckedCreateWithoutUser_friendship_addresseeTouserInput> | friendshipCreateWithoutUser_friendship_addresseeTouserInput[] | friendshipUncheckedCreateWithoutUser_friendship_addresseeTouserInput[]
    connectOrCreate?: friendshipCreateOrConnectWithoutUser_friendship_addresseeTouserInput | friendshipCreateOrConnectWithoutUser_friendship_addresseeTouserInput[]
    upsert?: friendshipUpsertWithWhereUniqueWithoutUser_friendship_addresseeTouserInput | friendshipUpsertWithWhereUniqueWithoutUser_friendship_addresseeTouserInput[]
    createMany?: friendshipCreateManyUser_friendship_addresseeTouserInputEnvelope
    set?: friendshipWhereUniqueInput | friendshipWhereUniqueInput[]
    disconnect?: friendshipWhereUniqueInput | friendshipWhereUniqueInput[]
    delete?: friendshipWhereUniqueInput | friendshipWhereUniqueInput[]
    connect?: friendshipWhereUniqueInput | friendshipWhereUniqueInput[]
    update?: friendshipUpdateWithWhereUniqueWithoutUser_friendship_addresseeTouserInput | friendshipUpdateWithWhereUniqueWithoutUser_friendship_addresseeTouserInput[]
    updateMany?: friendshipUpdateManyWithWhereWithoutUser_friendship_addresseeTouserInput | friendshipUpdateManyWithWhereWithoutUser_friendship_addresseeTouserInput[]
    deleteMany?: friendshipScalarWhereInput | friendshipScalarWhereInput[]
  }

  export type listUpdateManyWithoutUserNestedInput = {
    create?: XOR<listCreateWithoutUserInput, listUncheckedCreateWithoutUserInput> | listCreateWithoutUserInput[] | listUncheckedCreateWithoutUserInput[]
    connectOrCreate?: listCreateOrConnectWithoutUserInput | listCreateOrConnectWithoutUserInput[]
    upsert?: listUpsertWithWhereUniqueWithoutUserInput | listUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: listCreateManyUserInputEnvelope
    set?: listWhereUniqueInput | listWhereUniqueInput[]
    disconnect?: listWhereUniqueInput | listWhereUniqueInput[]
    delete?: listWhereUniqueInput | listWhereUniqueInput[]
    connect?: listWhereUniqueInput | listWhereUniqueInput[]
    update?: listUpdateWithWhereUniqueWithoutUserInput | listUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: listUpdateManyWithWhereWithoutUserInput | listUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: listScalarWhereInput | listScalarWhereInput[]
  }

  export type notificationUpdateManyWithoutUser_notification_UIDTouserNestedInput = {
    create?: XOR<notificationCreateWithoutUser_notification_UIDTouserInput, notificationUncheckedCreateWithoutUser_notification_UIDTouserInput> | notificationCreateWithoutUser_notification_UIDTouserInput[] | notificationUncheckedCreateWithoutUser_notification_UIDTouserInput[]
    connectOrCreate?: notificationCreateOrConnectWithoutUser_notification_UIDTouserInput | notificationCreateOrConnectWithoutUser_notification_UIDTouserInput[]
    upsert?: notificationUpsertWithWhereUniqueWithoutUser_notification_UIDTouserInput | notificationUpsertWithWhereUniqueWithoutUser_notification_UIDTouserInput[]
    createMany?: notificationCreateManyUser_notification_UIDTouserInputEnvelope
    set?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
    disconnect?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
    delete?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
    connect?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
    update?: notificationUpdateWithWhereUniqueWithoutUser_notification_UIDTouserInput | notificationUpdateWithWhereUniqueWithoutUser_notification_UIDTouserInput[]
    updateMany?: notificationUpdateManyWithWhereWithoutUser_notification_UIDTouserInput | notificationUpdateManyWithWhereWithoutUser_notification_UIDTouserInput[]
    deleteMany?: notificationScalarWhereInput | notificationScalarWhereInput[]
  }

  export type notificationUpdateManyWithoutUser_notification_FromUserTouserNestedInput = {
    create?: XOR<notificationCreateWithoutUser_notification_FromUserTouserInput, notificationUncheckedCreateWithoutUser_notification_FromUserTouserInput> | notificationCreateWithoutUser_notification_FromUserTouserInput[] | notificationUncheckedCreateWithoutUser_notification_FromUserTouserInput[]
    connectOrCreate?: notificationCreateOrConnectWithoutUser_notification_FromUserTouserInput | notificationCreateOrConnectWithoutUser_notification_FromUserTouserInput[]
    upsert?: notificationUpsertWithWhereUniqueWithoutUser_notification_FromUserTouserInput | notificationUpsertWithWhereUniqueWithoutUser_notification_FromUserTouserInput[]
    createMany?: notificationCreateManyUser_notification_FromUserTouserInputEnvelope
    set?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
    disconnect?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
    delete?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
    connect?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
    update?: notificationUpdateWithWhereUniqueWithoutUser_notification_FromUserTouserInput | notificationUpdateWithWhereUniqueWithoutUser_notification_FromUserTouserInput[]
    updateMany?: notificationUpdateManyWithWhereWithoutUser_notification_FromUserTouserInput | notificationUpdateManyWithWhereWithoutUser_notification_FromUserTouserInput[]
    deleteMany?: notificationScalarWhereInput | notificationScalarWhereInput[]
  }

  export type studyplanprogressUpdateManyWithoutUserNestedInput = {
    create?: XOR<studyplanprogressCreateWithoutUserInput, studyplanprogressUncheckedCreateWithoutUserInput> | studyplanprogressCreateWithoutUserInput[] | studyplanprogressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: studyplanprogressCreateOrConnectWithoutUserInput | studyplanprogressCreateOrConnectWithoutUserInput[]
    upsert?: studyplanprogressUpsertWithWhereUniqueWithoutUserInput | studyplanprogressUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: studyplanprogressCreateManyUserInputEnvelope
    set?: studyplanprogressWhereUniqueInput | studyplanprogressWhereUniqueInput[]
    disconnect?: studyplanprogressWhereUniqueInput | studyplanprogressWhereUniqueInput[]
    delete?: studyplanprogressWhereUniqueInput | studyplanprogressWhereUniqueInput[]
    connect?: studyplanprogressWhereUniqueInput | studyplanprogressWhereUniqueInput[]
    update?: studyplanprogressUpdateWithWhereUniqueWithoutUserInput | studyplanprogressUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: studyplanprogressUpdateManyWithWhereWithoutUserInput | studyplanprogressUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: studyplanprogressScalarWhereInput | studyplanprogressScalarWhereInput[]
  }

  export type submissionUpdateManyWithoutUserNestedInput = {
    create?: XOR<submissionCreateWithoutUserInput, submissionUncheckedCreateWithoutUserInput> | submissionCreateWithoutUserInput[] | submissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: submissionCreateOrConnectWithoutUserInput | submissionCreateOrConnectWithoutUserInput[]
    upsert?: submissionUpsertWithWhereUniqueWithoutUserInput | submissionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: submissionCreateManyUserInputEnvelope
    set?: submissionWhereUniqueInput | submissionWhereUniqueInput[]
    disconnect?: submissionWhereUniqueInput | submissionWhereUniqueInput[]
    delete?: submissionWhereUniqueInput | submissionWhereUniqueInput[]
    connect?: submissionWhereUniqueInput | submissionWhereUniqueInput[]
    update?: submissionUpdateWithWhereUniqueWithoutUserInput | submissionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: submissionUpdateManyWithWhereWithoutUserInput | submissionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: submissionScalarWhereInput | submissionScalarWhereInput[]
  }

  export type commentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<commentCreateWithoutUserInput, commentUncheckedCreateWithoutUserInput> | commentCreateWithoutUserInput[] | commentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: commentCreateOrConnectWithoutUserInput | commentCreateOrConnectWithoutUserInput[]
    upsert?: commentUpsertWithWhereUniqueWithoutUserInput | commentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: commentCreateManyUserInputEnvelope
    set?: commentWhereUniqueInput | commentWhereUniqueInput[]
    disconnect?: commentWhereUniqueInput | commentWhereUniqueInput[]
    delete?: commentWhereUniqueInput | commentWhereUniqueInput[]
    connect?: commentWhereUniqueInput | commentWhereUniqueInput[]
    update?: commentUpdateWithWhereUniqueWithoutUserInput | commentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: commentUpdateManyWithWhereWithoutUserInput | commentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: commentScalarWhereInput | commentScalarWhereInput[]
  }

  export type commentlikeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<commentlikeCreateWithoutUserInput, commentlikeUncheckedCreateWithoutUserInput> | commentlikeCreateWithoutUserInput[] | commentlikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: commentlikeCreateOrConnectWithoutUserInput | commentlikeCreateOrConnectWithoutUserInput[]
    upsert?: commentlikeUpsertWithWhereUniqueWithoutUserInput | commentlikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: commentlikeCreateManyUserInputEnvelope
    set?: commentlikeWhereUniqueInput | commentlikeWhereUniqueInput[]
    disconnect?: commentlikeWhereUniqueInput | commentlikeWhereUniqueInput[]
    delete?: commentlikeWhereUniqueInput | commentlikeWhereUniqueInput[]
    connect?: commentlikeWhereUniqueInput | commentlikeWhereUniqueInput[]
    update?: commentlikeUpdateWithWhereUniqueWithoutUserInput | commentlikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: commentlikeUpdateManyWithWhereWithoutUserInput | commentlikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: commentlikeScalarWhereInput | commentlikeScalarWhereInput[]
  }

  export type exerciselikeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<exerciselikeCreateWithoutUserInput, exerciselikeUncheckedCreateWithoutUserInput> | exerciselikeCreateWithoutUserInput[] | exerciselikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: exerciselikeCreateOrConnectWithoutUserInput | exerciselikeCreateOrConnectWithoutUserInput[]
    upsert?: exerciselikeUpsertWithWhereUniqueWithoutUserInput | exerciselikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: exerciselikeCreateManyUserInputEnvelope
    set?: exerciselikeWhereUniqueInput | exerciselikeWhereUniqueInput[]
    disconnect?: exerciselikeWhereUniqueInput | exerciselikeWhereUniqueInput[]
    delete?: exerciselikeWhereUniqueInput | exerciselikeWhereUniqueInput[]
    connect?: exerciselikeWhereUniqueInput | exerciselikeWhereUniqueInput[]
    update?: exerciselikeUpdateWithWhereUniqueWithoutUserInput | exerciselikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: exerciselikeUpdateManyWithWhereWithoutUserInput | exerciselikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: exerciselikeScalarWhereInput | exerciselikeScalarWhereInput[]
  }

  export type exerciseprogressUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<exerciseprogressCreateWithoutUserInput, exerciseprogressUncheckedCreateWithoutUserInput> | exerciseprogressCreateWithoutUserInput[] | exerciseprogressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: exerciseprogressCreateOrConnectWithoutUserInput | exerciseprogressCreateOrConnectWithoutUserInput[]
    upsert?: exerciseprogressUpsertWithWhereUniqueWithoutUserInput | exerciseprogressUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: exerciseprogressCreateManyUserInputEnvelope
    set?: exerciseprogressWhereUniqueInput | exerciseprogressWhereUniqueInput[]
    disconnect?: exerciseprogressWhereUniqueInput | exerciseprogressWhereUniqueInput[]
    delete?: exerciseprogressWhereUniqueInput | exerciseprogressWhereUniqueInput[]
    connect?: exerciseprogressWhereUniqueInput | exerciseprogressWhereUniqueInput[]
    update?: exerciseprogressUpdateWithWhereUniqueWithoutUserInput | exerciseprogressUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: exerciseprogressUpdateManyWithWhereWithoutUserInput | exerciseprogressUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: exerciseprogressScalarWhereInput | exerciseprogressScalarWhereInput[]
  }

  export type friendshipUncheckedUpdateManyWithoutUser_friendship_requesterTouserNestedInput = {
    create?: XOR<friendshipCreateWithoutUser_friendship_requesterTouserInput, friendshipUncheckedCreateWithoutUser_friendship_requesterTouserInput> | friendshipCreateWithoutUser_friendship_requesterTouserInput[] | friendshipUncheckedCreateWithoutUser_friendship_requesterTouserInput[]
    connectOrCreate?: friendshipCreateOrConnectWithoutUser_friendship_requesterTouserInput | friendshipCreateOrConnectWithoutUser_friendship_requesterTouserInput[]
    upsert?: friendshipUpsertWithWhereUniqueWithoutUser_friendship_requesterTouserInput | friendshipUpsertWithWhereUniqueWithoutUser_friendship_requesterTouserInput[]
    createMany?: friendshipCreateManyUser_friendship_requesterTouserInputEnvelope
    set?: friendshipWhereUniqueInput | friendshipWhereUniqueInput[]
    disconnect?: friendshipWhereUniqueInput | friendshipWhereUniqueInput[]
    delete?: friendshipWhereUniqueInput | friendshipWhereUniqueInput[]
    connect?: friendshipWhereUniqueInput | friendshipWhereUniqueInput[]
    update?: friendshipUpdateWithWhereUniqueWithoutUser_friendship_requesterTouserInput | friendshipUpdateWithWhereUniqueWithoutUser_friendship_requesterTouserInput[]
    updateMany?: friendshipUpdateManyWithWhereWithoutUser_friendship_requesterTouserInput | friendshipUpdateManyWithWhereWithoutUser_friendship_requesterTouserInput[]
    deleteMany?: friendshipScalarWhereInput | friendshipScalarWhereInput[]
  }

  export type friendshipUncheckedUpdateManyWithoutUser_friendship_addresseeTouserNestedInput = {
    create?: XOR<friendshipCreateWithoutUser_friendship_addresseeTouserInput, friendshipUncheckedCreateWithoutUser_friendship_addresseeTouserInput> | friendshipCreateWithoutUser_friendship_addresseeTouserInput[] | friendshipUncheckedCreateWithoutUser_friendship_addresseeTouserInput[]
    connectOrCreate?: friendshipCreateOrConnectWithoutUser_friendship_addresseeTouserInput | friendshipCreateOrConnectWithoutUser_friendship_addresseeTouserInput[]
    upsert?: friendshipUpsertWithWhereUniqueWithoutUser_friendship_addresseeTouserInput | friendshipUpsertWithWhereUniqueWithoutUser_friendship_addresseeTouserInput[]
    createMany?: friendshipCreateManyUser_friendship_addresseeTouserInputEnvelope
    set?: friendshipWhereUniqueInput | friendshipWhereUniqueInput[]
    disconnect?: friendshipWhereUniqueInput | friendshipWhereUniqueInput[]
    delete?: friendshipWhereUniqueInput | friendshipWhereUniqueInput[]
    connect?: friendshipWhereUniqueInput | friendshipWhereUniqueInput[]
    update?: friendshipUpdateWithWhereUniqueWithoutUser_friendship_addresseeTouserInput | friendshipUpdateWithWhereUniqueWithoutUser_friendship_addresseeTouserInput[]
    updateMany?: friendshipUpdateManyWithWhereWithoutUser_friendship_addresseeTouserInput | friendshipUpdateManyWithWhereWithoutUser_friendship_addresseeTouserInput[]
    deleteMany?: friendshipScalarWhereInput | friendshipScalarWhereInput[]
  }

  export type listUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<listCreateWithoutUserInput, listUncheckedCreateWithoutUserInput> | listCreateWithoutUserInput[] | listUncheckedCreateWithoutUserInput[]
    connectOrCreate?: listCreateOrConnectWithoutUserInput | listCreateOrConnectWithoutUserInput[]
    upsert?: listUpsertWithWhereUniqueWithoutUserInput | listUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: listCreateManyUserInputEnvelope
    set?: listWhereUniqueInput | listWhereUniqueInput[]
    disconnect?: listWhereUniqueInput | listWhereUniqueInput[]
    delete?: listWhereUniqueInput | listWhereUniqueInput[]
    connect?: listWhereUniqueInput | listWhereUniqueInput[]
    update?: listUpdateWithWhereUniqueWithoutUserInput | listUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: listUpdateManyWithWhereWithoutUserInput | listUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: listScalarWhereInput | listScalarWhereInput[]
  }

  export type notificationUncheckedUpdateManyWithoutUser_notification_UIDTouserNestedInput = {
    create?: XOR<notificationCreateWithoutUser_notification_UIDTouserInput, notificationUncheckedCreateWithoutUser_notification_UIDTouserInput> | notificationCreateWithoutUser_notification_UIDTouserInput[] | notificationUncheckedCreateWithoutUser_notification_UIDTouserInput[]
    connectOrCreate?: notificationCreateOrConnectWithoutUser_notification_UIDTouserInput | notificationCreateOrConnectWithoutUser_notification_UIDTouserInput[]
    upsert?: notificationUpsertWithWhereUniqueWithoutUser_notification_UIDTouserInput | notificationUpsertWithWhereUniqueWithoutUser_notification_UIDTouserInput[]
    createMany?: notificationCreateManyUser_notification_UIDTouserInputEnvelope
    set?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
    disconnect?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
    delete?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
    connect?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
    update?: notificationUpdateWithWhereUniqueWithoutUser_notification_UIDTouserInput | notificationUpdateWithWhereUniqueWithoutUser_notification_UIDTouserInput[]
    updateMany?: notificationUpdateManyWithWhereWithoutUser_notification_UIDTouserInput | notificationUpdateManyWithWhereWithoutUser_notification_UIDTouserInput[]
    deleteMany?: notificationScalarWhereInput | notificationScalarWhereInput[]
  }

  export type notificationUncheckedUpdateManyWithoutUser_notification_FromUserTouserNestedInput = {
    create?: XOR<notificationCreateWithoutUser_notification_FromUserTouserInput, notificationUncheckedCreateWithoutUser_notification_FromUserTouserInput> | notificationCreateWithoutUser_notification_FromUserTouserInput[] | notificationUncheckedCreateWithoutUser_notification_FromUserTouserInput[]
    connectOrCreate?: notificationCreateOrConnectWithoutUser_notification_FromUserTouserInput | notificationCreateOrConnectWithoutUser_notification_FromUserTouserInput[]
    upsert?: notificationUpsertWithWhereUniqueWithoutUser_notification_FromUserTouserInput | notificationUpsertWithWhereUniqueWithoutUser_notification_FromUserTouserInput[]
    createMany?: notificationCreateManyUser_notification_FromUserTouserInputEnvelope
    set?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
    disconnect?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
    delete?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
    connect?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
    update?: notificationUpdateWithWhereUniqueWithoutUser_notification_FromUserTouserInput | notificationUpdateWithWhereUniqueWithoutUser_notification_FromUserTouserInput[]
    updateMany?: notificationUpdateManyWithWhereWithoutUser_notification_FromUserTouserInput | notificationUpdateManyWithWhereWithoutUser_notification_FromUserTouserInput[]
    deleteMany?: notificationScalarWhereInput | notificationScalarWhereInput[]
  }

  export type studyplanprogressUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<studyplanprogressCreateWithoutUserInput, studyplanprogressUncheckedCreateWithoutUserInput> | studyplanprogressCreateWithoutUserInput[] | studyplanprogressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: studyplanprogressCreateOrConnectWithoutUserInput | studyplanprogressCreateOrConnectWithoutUserInput[]
    upsert?: studyplanprogressUpsertWithWhereUniqueWithoutUserInput | studyplanprogressUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: studyplanprogressCreateManyUserInputEnvelope
    set?: studyplanprogressWhereUniqueInput | studyplanprogressWhereUniqueInput[]
    disconnect?: studyplanprogressWhereUniqueInput | studyplanprogressWhereUniqueInput[]
    delete?: studyplanprogressWhereUniqueInput | studyplanprogressWhereUniqueInput[]
    connect?: studyplanprogressWhereUniqueInput | studyplanprogressWhereUniqueInput[]
    update?: studyplanprogressUpdateWithWhereUniqueWithoutUserInput | studyplanprogressUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: studyplanprogressUpdateManyWithWhereWithoutUserInput | studyplanprogressUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: studyplanprogressScalarWhereInput | studyplanprogressScalarWhereInput[]
  }

  export type submissionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<submissionCreateWithoutUserInput, submissionUncheckedCreateWithoutUserInput> | submissionCreateWithoutUserInput[] | submissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: submissionCreateOrConnectWithoutUserInput | submissionCreateOrConnectWithoutUserInput[]
    upsert?: submissionUpsertWithWhereUniqueWithoutUserInput | submissionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: submissionCreateManyUserInputEnvelope
    set?: submissionWhereUniqueInput | submissionWhereUniqueInput[]
    disconnect?: submissionWhereUniqueInput | submissionWhereUniqueInput[]
    delete?: submissionWhereUniqueInput | submissionWhereUniqueInput[]
    connect?: submissionWhereUniqueInput | submissionWhereUniqueInput[]
    update?: submissionUpdateWithWhereUniqueWithoutUserInput | submissionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: submissionUpdateManyWithWhereWithoutUserInput | submissionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: submissionScalarWhereInput | submissionScalarWhereInput[]
  }

  export type userCreateNestedOneWithoutFriendship_friendship_requesterTouserInput = {
    create?: XOR<userCreateWithoutFriendship_friendship_requesterTouserInput, userUncheckedCreateWithoutFriendship_friendship_requesterTouserInput>
    connectOrCreate?: userCreateOrConnectWithoutFriendship_friendship_requesterTouserInput
    connect?: userWhereUniqueInput
  }

  export type userCreateNestedOneWithoutFriendship_friendship_addresseeTouserInput = {
    create?: XOR<userCreateWithoutFriendship_friendship_addresseeTouserInput, userUncheckedCreateWithoutFriendship_friendship_addresseeTouserInput>
    connectOrCreate?: userCreateOrConnectWithoutFriendship_friendship_addresseeTouserInput
    connect?: userWhereUniqueInput
  }

  export type Enumfriendship_statusFieldUpdateOperationsInput = {
    set?: $Enums.friendship_status
  }

  export type userUpdateOneRequiredWithoutFriendship_friendship_requesterTouserNestedInput = {
    create?: XOR<userCreateWithoutFriendship_friendship_requesterTouserInput, userUncheckedCreateWithoutFriendship_friendship_requesterTouserInput>
    connectOrCreate?: userCreateOrConnectWithoutFriendship_friendship_requesterTouserInput
    upsert?: userUpsertWithoutFriendship_friendship_requesterTouserInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutFriendship_friendship_requesterTouserInput, userUpdateWithoutFriendship_friendship_requesterTouserInput>, userUncheckedUpdateWithoutFriendship_friendship_requesterTouserInput>
  }

  export type userUpdateOneRequiredWithoutFriendship_friendship_addresseeTouserNestedInput = {
    create?: XOR<userCreateWithoutFriendship_friendship_addresseeTouserInput, userUncheckedCreateWithoutFriendship_friendship_addresseeTouserInput>
    connectOrCreate?: userCreateOrConnectWithoutFriendship_friendship_addresseeTouserInput
    upsert?: userUpsertWithoutFriendship_friendship_addresseeTouserInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutFriendship_friendship_addresseeTouserInput, userUpdateWithoutFriendship_friendship_addresseeTouserInput>, userUncheckedUpdateWithoutFriendship_friendship_addresseeTouserInput>
  }

  export type lessonCreateNestedManyWithoutChapterInput = {
    create?: XOR<lessonCreateWithoutChapterInput, lessonUncheckedCreateWithoutChapterInput> | lessonCreateWithoutChapterInput[] | lessonUncheckedCreateWithoutChapterInput[]
    connectOrCreate?: lessonCreateOrConnectWithoutChapterInput | lessonCreateOrConnectWithoutChapterInput[]
    createMany?: lessonCreateManyChapterInputEnvelope
    connect?: lessonWhereUniqueInput | lessonWhereUniqueInput[]
  }

  export type lessonUncheckedCreateNestedManyWithoutChapterInput = {
    create?: XOR<lessonCreateWithoutChapterInput, lessonUncheckedCreateWithoutChapterInput> | lessonCreateWithoutChapterInput[] | lessonUncheckedCreateWithoutChapterInput[]
    connectOrCreate?: lessonCreateOrConnectWithoutChapterInput | lessonCreateOrConnectWithoutChapterInput[]
    createMany?: lessonCreateManyChapterInputEnvelope
    connect?: lessonWhereUniqueInput | lessonWhereUniqueInput[]
  }

  export type lessonUpdateManyWithoutChapterNestedInput = {
    create?: XOR<lessonCreateWithoutChapterInput, lessonUncheckedCreateWithoutChapterInput> | lessonCreateWithoutChapterInput[] | lessonUncheckedCreateWithoutChapterInput[]
    connectOrCreate?: lessonCreateOrConnectWithoutChapterInput | lessonCreateOrConnectWithoutChapterInput[]
    upsert?: lessonUpsertWithWhereUniqueWithoutChapterInput | lessonUpsertWithWhereUniqueWithoutChapterInput[]
    createMany?: lessonCreateManyChapterInputEnvelope
    set?: lessonWhereUniqueInput | lessonWhereUniqueInput[]
    disconnect?: lessonWhereUniqueInput | lessonWhereUniqueInput[]
    delete?: lessonWhereUniqueInput | lessonWhereUniqueInput[]
    connect?: lessonWhereUniqueInput | lessonWhereUniqueInput[]
    update?: lessonUpdateWithWhereUniqueWithoutChapterInput | lessonUpdateWithWhereUniqueWithoutChapterInput[]
    updateMany?: lessonUpdateManyWithWhereWithoutChapterInput | lessonUpdateManyWithWhereWithoutChapterInput[]
    deleteMany?: lessonScalarWhereInput | lessonScalarWhereInput[]
  }

  export type lessonUncheckedUpdateManyWithoutChapterNestedInput = {
    create?: XOR<lessonCreateWithoutChapterInput, lessonUncheckedCreateWithoutChapterInput> | lessonCreateWithoutChapterInput[] | lessonUncheckedCreateWithoutChapterInput[]
    connectOrCreate?: lessonCreateOrConnectWithoutChapterInput | lessonCreateOrConnectWithoutChapterInput[]
    upsert?: lessonUpsertWithWhereUniqueWithoutChapterInput | lessonUpsertWithWhereUniqueWithoutChapterInput[]
    createMany?: lessonCreateManyChapterInputEnvelope
    set?: lessonWhereUniqueInput | lessonWhereUniqueInput[]
    disconnect?: lessonWhereUniqueInput | lessonWhereUniqueInput[]
    delete?: lessonWhereUniqueInput | lessonWhereUniqueInput[]
    connect?: lessonWhereUniqueInput | lessonWhereUniqueInput[]
    update?: lessonUpdateWithWhereUniqueWithoutChapterInput | lessonUpdateWithWhereUniqueWithoutChapterInput[]
    updateMany?: lessonUpdateManyWithWhereWithoutChapterInput | lessonUpdateManyWithWhereWithoutChapterInput[]
    deleteMany?: lessonScalarWhereInput | lessonScalarWhereInput[]
  }

  export type userCreateNestedOneWithoutCommentInput = {
    create?: XOR<userCreateWithoutCommentInput, userUncheckedCreateWithoutCommentInput>
    connectOrCreate?: userCreateOrConnectWithoutCommentInput
    connect?: userWhereUniqueInput
  }

  export type lessonCreateNestedOneWithoutCommentInput = {
    create?: XOR<lessonCreateWithoutCommentInput, lessonUncheckedCreateWithoutCommentInput>
    connectOrCreate?: lessonCreateOrConnectWithoutCommentInput
    connect?: lessonWhereUniqueInput
  }

  export type exerciseCreateNestedOneWithoutCommentInput = {
    create?: XOR<exerciseCreateWithoutCommentInput, exerciseUncheckedCreateWithoutCommentInput>
    connectOrCreate?: exerciseCreateOrConnectWithoutCommentInput
    connect?: exerciseWhereUniqueInput
  }

  export type commentlikeCreateNestedManyWithoutCommentInput = {
    create?: XOR<commentlikeCreateWithoutCommentInput, commentlikeUncheckedCreateWithoutCommentInput> | commentlikeCreateWithoutCommentInput[] | commentlikeUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: commentlikeCreateOrConnectWithoutCommentInput | commentlikeCreateOrConnectWithoutCommentInput[]
    createMany?: commentlikeCreateManyCommentInputEnvelope
    connect?: commentlikeWhereUniqueInput | commentlikeWhereUniqueInput[]
  }

  export type notificationCreateNestedManyWithoutCommentInput = {
    create?: XOR<notificationCreateWithoutCommentInput, notificationUncheckedCreateWithoutCommentInput> | notificationCreateWithoutCommentInput[] | notificationUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: notificationCreateOrConnectWithoutCommentInput | notificationCreateOrConnectWithoutCommentInput[]
    createMany?: notificationCreateManyCommentInputEnvelope
    connect?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
  }

  export type commentlikeUncheckedCreateNestedManyWithoutCommentInput = {
    create?: XOR<commentlikeCreateWithoutCommentInput, commentlikeUncheckedCreateWithoutCommentInput> | commentlikeCreateWithoutCommentInput[] | commentlikeUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: commentlikeCreateOrConnectWithoutCommentInput | commentlikeCreateOrConnectWithoutCommentInput[]
    createMany?: commentlikeCreateManyCommentInputEnvelope
    connect?: commentlikeWhereUniqueInput | commentlikeWhereUniqueInput[]
  }

  export type notificationUncheckedCreateNestedManyWithoutCommentInput = {
    create?: XOR<notificationCreateWithoutCommentInput, notificationUncheckedCreateWithoutCommentInput> | notificationCreateWithoutCommentInput[] | notificationUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: notificationCreateOrConnectWithoutCommentInput | notificationCreateOrConnectWithoutCommentInput[]
    createMany?: notificationCreateManyCommentInputEnvelope
    connect?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
  }

  export type userUpdateOneRequiredWithoutCommentNestedInput = {
    create?: XOR<userCreateWithoutCommentInput, userUncheckedCreateWithoutCommentInput>
    connectOrCreate?: userCreateOrConnectWithoutCommentInput
    upsert?: userUpsertWithoutCommentInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutCommentInput, userUpdateWithoutCommentInput>, userUncheckedUpdateWithoutCommentInput>
  }

  export type lessonUpdateOneWithoutCommentNestedInput = {
    create?: XOR<lessonCreateWithoutCommentInput, lessonUncheckedCreateWithoutCommentInput>
    connectOrCreate?: lessonCreateOrConnectWithoutCommentInput
    upsert?: lessonUpsertWithoutCommentInput
    disconnect?: lessonWhereInput | boolean
    delete?: lessonWhereInput | boolean
    connect?: lessonWhereUniqueInput
    update?: XOR<XOR<lessonUpdateToOneWithWhereWithoutCommentInput, lessonUpdateWithoutCommentInput>, lessonUncheckedUpdateWithoutCommentInput>
  }

  export type exerciseUpdateOneWithoutCommentNestedInput = {
    create?: XOR<exerciseCreateWithoutCommentInput, exerciseUncheckedCreateWithoutCommentInput>
    connectOrCreate?: exerciseCreateOrConnectWithoutCommentInput
    upsert?: exerciseUpsertWithoutCommentInput
    disconnect?: exerciseWhereInput | boolean
    delete?: exerciseWhereInput | boolean
    connect?: exerciseWhereUniqueInput
    update?: XOR<XOR<exerciseUpdateToOneWithWhereWithoutCommentInput, exerciseUpdateWithoutCommentInput>, exerciseUncheckedUpdateWithoutCommentInput>
  }

  export type commentlikeUpdateManyWithoutCommentNestedInput = {
    create?: XOR<commentlikeCreateWithoutCommentInput, commentlikeUncheckedCreateWithoutCommentInput> | commentlikeCreateWithoutCommentInput[] | commentlikeUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: commentlikeCreateOrConnectWithoutCommentInput | commentlikeCreateOrConnectWithoutCommentInput[]
    upsert?: commentlikeUpsertWithWhereUniqueWithoutCommentInput | commentlikeUpsertWithWhereUniqueWithoutCommentInput[]
    createMany?: commentlikeCreateManyCommentInputEnvelope
    set?: commentlikeWhereUniqueInput | commentlikeWhereUniqueInput[]
    disconnect?: commentlikeWhereUniqueInput | commentlikeWhereUniqueInput[]
    delete?: commentlikeWhereUniqueInput | commentlikeWhereUniqueInput[]
    connect?: commentlikeWhereUniqueInput | commentlikeWhereUniqueInput[]
    update?: commentlikeUpdateWithWhereUniqueWithoutCommentInput | commentlikeUpdateWithWhereUniqueWithoutCommentInput[]
    updateMany?: commentlikeUpdateManyWithWhereWithoutCommentInput | commentlikeUpdateManyWithWhereWithoutCommentInput[]
    deleteMany?: commentlikeScalarWhereInput | commentlikeScalarWhereInput[]
  }

  export type notificationUpdateManyWithoutCommentNestedInput = {
    create?: XOR<notificationCreateWithoutCommentInput, notificationUncheckedCreateWithoutCommentInput> | notificationCreateWithoutCommentInput[] | notificationUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: notificationCreateOrConnectWithoutCommentInput | notificationCreateOrConnectWithoutCommentInput[]
    upsert?: notificationUpsertWithWhereUniqueWithoutCommentInput | notificationUpsertWithWhereUniqueWithoutCommentInput[]
    createMany?: notificationCreateManyCommentInputEnvelope
    set?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
    disconnect?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
    delete?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
    connect?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
    update?: notificationUpdateWithWhereUniqueWithoutCommentInput | notificationUpdateWithWhereUniqueWithoutCommentInput[]
    updateMany?: notificationUpdateManyWithWhereWithoutCommentInput | notificationUpdateManyWithWhereWithoutCommentInput[]
    deleteMany?: notificationScalarWhereInput | notificationScalarWhereInput[]
  }

  export type commentlikeUncheckedUpdateManyWithoutCommentNestedInput = {
    create?: XOR<commentlikeCreateWithoutCommentInput, commentlikeUncheckedCreateWithoutCommentInput> | commentlikeCreateWithoutCommentInput[] | commentlikeUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: commentlikeCreateOrConnectWithoutCommentInput | commentlikeCreateOrConnectWithoutCommentInput[]
    upsert?: commentlikeUpsertWithWhereUniqueWithoutCommentInput | commentlikeUpsertWithWhereUniqueWithoutCommentInput[]
    createMany?: commentlikeCreateManyCommentInputEnvelope
    set?: commentlikeWhereUniqueInput | commentlikeWhereUniqueInput[]
    disconnect?: commentlikeWhereUniqueInput | commentlikeWhereUniqueInput[]
    delete?: commentlikeWhereUniqueInput | commentlikeWhereUniqueInput[]
    connect?: commentlikeWhereUniqueInput | commentlikeWhereUniqueInput[]
    update?: commentlikeUpdateWithWhereUniqueWithoutCommentInput | commentlikeUpdateWithWhereUniqueWithoutCommentInput[]
    updateMany?: commentlikeUpdateManyWithWhereWithoutCommentInput | commentlikeUpdateManyWithWhereWithoutCommentInput[]
    deleteMany?: commentlikeScalarWhereInput | commentlikeScalarWhereInput[]
  }

  export type notificationUncheckedUpdateManyWithoutCommentNestedInput = {
    create?: XOR<notificationCreateWithoutCommentInput, notificationUncheckedCreateWithoutCommentInput> | notificationCreateWithoutCommentInput[] | notificationUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: notificationCreateOrConnectWithoutCommentInput | notificationCreateOrConnectWithoutCommentInput[]
    upsert?: notificationUpsertWithWhereUniqueWithoutCommentInput | notificationUpsertWithWhereUniqueWithoutCommentInput[]
    createMany?: notificationCreateManyCommentInputEnvelope
    set?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
    disconnect?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
    delete?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
    connect?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
    update?: notificationUpdateWithWhereUniqueWithoutCommentInput | notificationUpdateWithWhereUniqueWithoutCommentInput[]
    updateMany?: notificationUpdateManyWithWhereWithoutCommentInput | notificationUpdateManyWithWhereWithoutCommentInput[]
    deleteMany?: notificationScalarWhereInput | notificationScalarWhereInput[]
  }

  export type userCreateNestedOneWithoutCommentlikeInput = {
    create?: XOR<userCreateWithoutCommentlikeInput, userUncheckedCreateWithoutCommentlikeInput>
    connectOrCreate?: userCreateOrConnectWithoutCommentlikeInput
    connect?: userWhereUniqueInput
  }

  export type commentCreateNestedOneWithoutCommentlikeInput = {
    create?: XOR<commentCreateWithoutCommentlikeInput, commentUncheckedCreateWithoutCommentlikeInput>
    connectOrCreate?: commentCreateOrConnectWithoutCommentlikeInput
    connect?: commentWhereUniqueInput
  }

  export type userUpdateOneRequiredWithoutCommentlikeNestedInput = {
    create?: XOR<userCreateWithoutCommentlikeInput, userUncheckedCreateWithoutCommentlikeInput>
    connectOrCreate?: userCreateOrConnectWithoutCommentlikeInput
    upsert?: userUpsertWithoutCommentlikeInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutCommentlikeInput, userUpdateWithoutCommentlikeInput>, userUncheckedUpdateWithoutCommentlikeInput>
  }

  export type commentUpdateOneRequiredWithoutCommentlikeNestedInput = {
    create?: XOR<commentCreateWithoutCommentlikeInput, commentUncheckedCreateWithoutCommentlikeInput>
    connectOrCreate?: commentCreateOrConnectWithoutCommentlikeInput
    upsert?: commentUpsertWithoutCommentlikeInput
    connect?: commentWhereUniqueInput
    update?: XOR<XOR<commentUpdateToOneWithWhereWithoutCommentlikeInput, commentUpdateWithoutCommentlikeInput>, commentUncheckedUpdateWithoutCommentlikeInput>
  }

  export type userCreateNestedOneWithoutExerciselikeInput = {
    create?: XOR<userCreateWithoutExerciselikeInput, userUncheckedCreateWithoutExerciselikeInput>
    connectOrCreate?: userCreateOrConnectWithoutExerciselikeInput
    connect?: userWhereUniqueInput
  }

  export type exerciseCreateNestedOneWithoutExerciselikeInput = {
    create?: XOR<exerciseCreateWithoutExerciselikeInput, exerciseUncheckedCreateWithoutExerciselikeInput>
    connectOrCreate?: exerciseCreateOrConnectWithoutExerciselikeInput
    connect?: exerciseWhereUniqueInput
  }

  export type userUpdateOneRequiredWithoutExerciselikeNestedInput = {
    create?: XOR<userCreateWithoutExerciselikeInput, userUncheckedCreateWithoutExerciselikeInput>
    connectOrCreate?: userCreateOrConnectWithoutExerciselikeInput
    upsert?: userUpsertWithoutExerciselikeInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutExerciselikeInput, userUpdateWithoutExerciselikeInput>, userUncheckedUpdateWithoutExerciselikeInput>
  }

  export type exerciseUpdateOneRequiredWithoutExerciselikeNestedInput = {
    create?: XOR<exerciseCreateWithoutExerciselikeInput, exerciseUncheckedCreateWithoutExerciselikeInput>
    connectOrCreate?: exerciseCreateOrConnectWithoutExerciselikeInput
    upsert?: exerciseUpsertWithoutExerciselikeInput
    connect?: exerciseWhereUniqueInput
    update?: XOR<XOR<exerciseUpdateToOneWithWhereWithoutExerciselikeInput, exerciseUpdateWithoutExerciselikeInput>, exerciseUncheckedUpdateWithoutExerciselikeInput>
  }

  export type commentCreateNestedManyWithoutLessonInput = {
    create?: XOR<commentCreateWithoutLessonInput, commentUncheckedCreateWithoutLessonInput> | commentCreateWithoutLessonInput[] | commentUncheckedCreateWithoutLessonInput[]
    connectOrCreate?: commentCreateOrConnectWithoutLessonInput | commentCreateOrConnectWithoutLessonInput[]
    createMany?: commentCreateManyLessonInputEnvelope
    connect?: commentWhereUniqueInput | commentWhereUniqueInput[]
  }

  export type chapterCreateNestedOneWithoutLessonInput = {
    create?: XOR<chapterCreateWithoutLessonInput, chapterUncheckedCreateWithoutLessonInput>
    connectOrCreate?: chapterCreateOrConnectWithoutLessonInput
    connect?: chapterWhereUniqueInput
  }

  export type commentUncheckedCreateNestedManyWithoutLessonInput = {
    create?: XOR<commentCreateWithoutLessonInput, commentUncheckedCreateWithoutLessonInput> | commentCreateWithoutLessonInput[] | commentUncheckedCreateWithoutLessonInput[]
    connectOrCreate?: commentCreateOrConnectWithoutLessonInput | commentCreateOrConnectWithoutLessonInput[]
    createMany?: commentCreateManyLessonInputEnvelope
    connect?: commentWhereUniqueInput | commentWhereUniqueInput[]
  }

  export type commentUpdateManyWithoutLessonNestedInput = {
    create?: XOR<commentCreateWithoutLessonInput, commentUncheckedCreateWithoutLessonInput> | commentCreateWithoutLessonInput[] | commentUncheckedCreateWithoutLessonInput[]
    connectOrCreate?: commentCreateOrConnectWithoutLessonInput | commentCreateOrConnectWithoutLessonInput[]
    upsert?: commentUpsertWithWhereUniqueWithoutLessonInput | commentUpsertWithWhereUniqueWithoutLessonInput[]
    createMany?: commentCreateManyLessonInputEnvelope
    set?: commentWhereUniqueInput | commentWhereUniqueInput[]
    disconnect?: commentWhereUniqueInput | commentWhereUniqueInput[]
    delete?: commentWhereUniqueInput | commentWhereUniqueInput[]
    connect?: commentWhereUniqueInput | commentWhereUniqueInput[]
    update?: commentUpdateWithWhereUniqueWithoutLessonInput | commentUpdateWithWhereUniqueWithoutLessonInput[]
    updateMany?: commentUpdateManyWithWhereWithoutLessonInput | commentUpdateManyWithWhereWithoutLessonInput[]
    deleteMany?: commentScalarWhereInput | commentScalarWhereInput[]
  }

  export type chapterUpdateOneRequiredWithoutLessonNestedInput = {
    create?: XOR<chapterCreateWithoutLessonInput, chapterUncheckedCreateWithoutLessonInput>
    connectOrCreate?: chapterCreateOrConnectWithoutLessonInput
    upsert?: chapterUpsertWithoutLessonInput
    connect?: chapterWhereUniqueInput
    update?: XOR<XOR<chapterUpdateToOneWithWhereWithoutLessonInput, chapterUpdateWithoutLessonInput>, chapterUncheckedUpdateWithoutLessonInput>
  }

  export type commentUncheckedUpdateManyWithoutLessonNestedInput = {
    create?: XOR<commentCreateWithoutLessonInput, commentUncheckedCreateWithoutLessonInput> | commentCreateWithoutLessonInput[] | commentUncheckedCreateWithoutLessonInput[]
    connectOrCreate?: commentCreateOrConnectWithoutLessonInput | commentCreateOrConnectWithoutLessonInput[]
    upsert?: commentUpsertWithWhereUniqueWithoutLessonInput | commentUpsertWithWhereUniqueWithoutLessonInput[]
    createMany?: commentCreateManyLessonInputEnvelope
    set?: commentWhereUniqueInput | commentWhereUniqueInput[]
    disconnect?: commentWhereUniqueInput | commentWhereUniqueInput[]
    delete?: commentWhereUniqueInput | commentWhereUniqueInput[]
    connect?: commentWhereUniqueInput | commentWhereUniqueInput[]
    update?: commentUpdateWithWhereUniqueWithoutLessonInput | commentUpdateWithWhereUniqueWithoutLessonInput[]
    updateMany?: commentUpdateManyWithWhereWithoutLessonInput | commentUpdateManyWithWhereWithoutLessonInput[]
    deleteMany?: commentScalarWhereInput | commentScalarWhereInput[]
  }

  export type userCreateNestedOneWithoutNotification_notification_UIDTouserInput = {
    create?: XOR<userCreateWithoutNotification_notification_UIDTouserInput, userUncheckedCreateWithoutNotification_notification_UIDTouserInput>
    connectOrCreate?: userCreateOrConnectWithoutNotification_notification_UIDTouserInput
    connect?: userWhereUniqueInput
  }

  export type userCreateNestedOneWithoutNotification_notification_FromUserTouserInput = {
    create?: XOR<userCreateWithoutNotification_notification_FromUserTouserInput, userUncheckedCreateWithoutNotification_notification_FromUserTouserInput>
    connectOrCreate?: userCreateOrConnectWithoutNotification_notification_FromUserTouserInput
    connect?: userWhereUniqueInput
  }

  export type commentCreateNestedOneWithoutNotificationInput = {
    create?: XOR<commentCreateWithoutNotificationInput, commentUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: commentCreateOrConnectWithoutNotificationInput
    connect?: commentWhereUniqueInput
  }

  export type Enumnotification_TypeFieldUpdateOperationsInput = {
    set?: $Enums.notification_Type
  }

  export type userUpdateOneRequiredWithoutNotification_notification_UIDTouserNestedInput = {
    create?: XOR<userCreateWithoutNotification_notification_UIDTouserInput, userUncheckedCreateWithoutNotification_notification_UIDTouserInput>
    connectOrCreate?: userCreateOrConnectWithoutNotification_notification_UIDTouserInput
    upsert?: userUpsertWithoutNotification_notification_UIDTouserInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutNotification_notification_UIDTouserInput, userUpdateWithoutNotification_notification_UIDTouserInput>, userUncheckedUpdateWithoutNotification_notification_UIDTouserInput>
  }

  export type userUpdateOneRequiredWithoutNotification_notification_FromUserTouserNestedInput = {
    create?: XOR<userCreateWithoutNotification_notification_FromUserTouserInput, userUncheckedCreateWithoutNotification_notification_FromUserTouserInput>
    connectOrCreate?: userCreateOrConnectWithoutNotification_notification_FromUserTouserInput
    upsert?: userUpsertWithoutNotification_notification_FromUserTouserInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutNotification_notification_FromUserTouserInput, userUpdateWithoutNotification_notification_FromUserTouserInput>, userUncheckedUpdateWithoutNotification_notification_FromUserTouserInput>
  }

  export type commentUpdateOneWithoutNotificationNestedInput = {
    create?: XOR<commentCreateWithoutNotificationInput, commentUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: commentCreateOrConnectWithoutNotificationInput
    upsert?: commentUpsertWithoutNotificationInput
    disconnect?: commentWhereInput | boolean
    delete?: commentWhereInput | boolean
    connect?: commentWhereUniqueInput
    update?: XOR<XOR<commentUpdateToOneWithWhereWithoutNotificationInput, commentUpdateWithoutNotificationInput>, commentUncheckedUpdateWithoutNotificationInput>
  }

  export type studyplanitemCreateNestedManyWithoutStudyplanInput = {
    create?: XOR<studyplanitemCreateWithoutStudyplanInput, studyplanitemUncheckedCreateWithoutStudyplanInput> | studyplanitemCreateWithoutStudyplanInput[] | studyplanitemUncheckedCreateWithoutStudyplanInput[]
    connectOrCreate?: studyplanitemCreateOrConnectWithoutStudyplanInput | studyplanitemCreateOrConnectWithoutStudyplanInput[]
    createMany?: studyplanitemCreateManyStudyplanInputEnvelope
    connect?: studyplanitemWhereUniqueInput | studyplanitemWhereUniqueInput[]
  }

  export type studyplanprogressCreateNestedManyWithoutStudyplanInput = {
    create?: XOR<studyplanprogressCreateWithoutStudyplanInput, studyplanprogressUncheckedCreateWithoutStudyplanInput> | studyplanprogressCreateWithoutStudyplanInput[] | studyplanprogressUncheckedCreateWithoutStudyplanInput[]
    connectOrCreate?: studyplanprogressCreateOrConnectWithoutStudyplanInput | studyplanprogressCreateOrConnectWithoutStudyplanInput[]
    createMany?: studyplanprogressCreateManyStudyplanInputEnvelope
    connect?: studyplanprogressWhereUniqueInput | studyplanprogressWhereUniqueInput[]
  }

  export type studyplanitemUncheckedCreateNestedManyWithoutStudyplanInput = {
    create?: XOR<studyplanitemCreateWithoutStudyplanInput, studyplanitemUncheckedCreateWithoutStudyplanInput> | studyplanitemCreateWithoutStudyplanInput[] | studyplanitemUncheckedCreateWithoutStudyplanInput[]
    connectOrCreate?: studyplanitemCreateOrConnectWithoutStudyplanInput | studyplanitemCreateOrConnectWithoutStudyplanInput[]
    createMany?: studyplanitemCreateManyStudyplanInputEnvelope
    connect?: studyplanitemWhereUniqueInput | studyplanitemWhereUniqueInput[]
  }

  export type studyplanprogressUncheckedCreateNestedManyWithoutStudyplanInput = {
    create?: XOR<studyplanprogressCreateWithoutStudyplanInput, studyplanprogressUncheckedCreateWithoutStudyplanInput> | studyplanprogressCreateWithoutStudyplanInput[] | studyplanprogressUncheckedCreateWithoutStudyplanInput[]
    connectOrCreate?: studyplanprogressCreateOrConnectWithoutStudyplanInput | studyplanprogressCreateOrConnectWithoutStudyplanInput[]
    createMany?: studyplanprogressCreateManyStudyplanInputEnvelope
    connect?: studyplanprogressWhereUniqueInput | studyplanprogressWhereUniqueInput[]
  }

  export type studyplanitemUpdateManyWithoutStudyplanNestedInput = {
    create?: XOR<studyplanitemCreateWithoutStudyplanInput, studyplanitemUncheckedCreateWithoutStudyplanInput> | studyplanitemCreateWithoutStudyplanInput[] | studyplanitemUncheckedCreateWithoutStudyplanInput[]
    connectOrCreate?: studyplanitemCreateOrConnectWithoutStudyplanInput | studyplanitemCreateOrConnectWithoutStudyplanInput[]
    upsert?: studyplanitemUpsertWithWhereUniqueWithoutStudyplanInput | studyplanitemUpsertWithWhereUniqueWithoutStudyplanInput[]
    createMany?: studyplanitemCreateManyStudyplanInputEnvelope
    set?: studyplanitemWhereUniqueInput | studyplanitemWhereUniqueInput[]
    disconnect?: studyplanitemWhereUniqueInput | studyplanitemWhereUniqueInput[]
    delete?: studyplanitemWhereUniqueInput | studyplanitemWhereUniqueInput[]
    connect?: studyplanitemWhereUniqueInput | studyplanitemWhereUniqueInput[]
    update?: studyplanitemUpdateWithWhereUniqueWithoutStudyplanInput | studyplanitemUpdateWithWhereUniqueWithoutStudyplanInput[]
    updateMany?: studyplanitemUpdateManyWithWhereWithoutStudyplanInput | studyplanitemUpdateManyWithWhereWithoutStudyplanInput[]
    deleteMany?: studyplanitemScalarWhereInput | studyplanitemScalarWhereInput[]
  }

  export type studyplanprogressUpdateManyWithoutStudyplanNestedInput = {
    create?: XOR<studyplanprogressCreateWithoutStudyplanInput, studyplanprogressUncheckedCreateWithoutStudyplanInput> | studyplanprogressCreateWithoutStudyplanInput[] | studyplanprogressUncheckedCreateWithoutStudyplanInput[]
    connectOrCreate?: studyplanprogressCreateOrConnectWithoutStudyplanInput | studyplanprogressCreateOrConnectWithoutStudyplanInput[]
    upsert?: studyplanprogressUpsertWithWhereUniqueWithoutStudyplanInput | studyplanprogressUpsertWithWhereUniqueWithoutStudyplanInput[]
    createMany?: studyplanprogressCreateManyStudyplanInputEnvelope
    set?: studyplanprogressWhereUniqueInput | studyplanprogressWhereUniqueInput[]
    disconnect?: studyplanprogressWhereUniqueInput | studyplanprogressWhereUniqueInput[]
    delete?: studyplanprogressWhereUniqueInput | studyplanprogressWhereUniqueInput[]
    connect?: studyplanprogressWhereUniqueInput | studyplanprogressWhereUniqueInput[]
    update?: studyplanprogressUpdateWithWhereUniqueWithoutStudyplanInput | studyplanprogressUpdateWithWhereUniqueWithoutStudyplanInput[]
    updateMany?: studyplanprogressUpdateManyWithWhereWithoutStudyplanInput | studyplanprogressUpdateManyWithWhereWithoutStudyplanInput[]
    deleteMany?: studyplanprogressScalarWhereInput | studyplanprogressScalarWhereInput[]
  }

  export type studyplanitemUncheckedUpdateManyWithoutStudyplanNestedInput = {
    create?: XOR<studyplanitemCreateWithoutStudyplanInput, studyplanitemUncheckedCreateWithoutStudyplanInput> | studyplanitemCreateWithoutStudyplanInput[] | studyplanitemUncheckedCreateWithoutStudyplanInput[]
    connectOrCreate?: studyplanitemCreateOrConnectWithoutStudyplanInput | studyplanitemCreateOrConnectWithoutStudyplanInput[]
    upsert?: studyplanitemUpsertWithWhereUniqueWithoutStudyplanInput | studyplanitemUpsertWithWhereUniqueWithoutStudyplanInput[]
    createMany?: studyplanitemCreateManyStudyplanInputEnvelope
    set?: studyplanitemWhereUniqueInput | studyplanitemWhereUniqueInput[]
    disconnect?: studyplanitemWhereUniqueInput | studyplanitemWhereUniqueInput[]
    delete?: studyplanitemWhereUniqueInput | studyplanitemWhereUniqueInput[]
    connect?: studyplanitemWhereUniqueInput | studyplanitemWhereUniqueInput[]
    update?: studyplanitemUpdateWithWhereUniqueWithoutStudyplanInput | studyplanitemUpdateWithWhereUniqueWithoutStudyplanInput[]
    updateMany?: studyplanitemUpdateManyWithWhereWithoutStudyplanInput | studyplanitemUpdateManyWithWhereWithoutStudyplanInput[]
    deleteMany?: studyplanitemScalarWhereInput | studyplanitemScalarWhereInput[]
  }

  export type studyplanprogressUncheckedUpdateManyWithoutStudyplanNestedInput = {
    create?: XOR<studyplanprogressCreateWithoutStudyplanInput, studyplanprogressUncheckedCreateWithoutStudyplanInput> | studyplanprogressCreateWithoutStudyplanInput[] | studyplanprogressUncheckedCreateWithoutStudyplanInput[]
    connectOrCreate?: studyplanprogressCreateOrConnectWithoutStudyplanInput | studyplanprogressCreateOrConnectWithoutStudyplanInput[]
    upsert?: studyplanprogressUpsertWithWhereUniqueWithoutStudyplanInput | studyplanprogressUpsertWithWhereUniqueWithoutStudyplanInput[]
    createMany?: studyplanprogressCreateManyStudyplanInputEnvelope
    set?: studyplanprogressWhereUniqueInput | studyplanprogressWhereUniqueInput[]
    disconnect?: studyplanprogressWhereUniqueInput | studyplanprogressWhereUniqueInput[]
    delete?: studyplanprogressWhereUniqueInput | studyplanprogressWhereUniqueInput[]
    connect?: studyplanprogressWhereUniqueInput | studyplanprogressWhereUniqueInput[]
    update?: studyplanprogressUpdateWithWhereUniqueWithoutStudyplanInput | studyplanprogressUpdateWithWhereUniqueWithoutStudyplanInput[]
    updateMany?: studyplanprogressUpdateManyWithWhereWithoutStudyplanInput | studyplanprogressUpdateManyWithWhereWithoutStudyplanInput[]
    deleteMany?: studyplanprogressScalarWhereInput | studyplanprogressScalarWhereInput[]
  }

  export type exerciseCreateNestedManyWithoutStudyplanitemInput = {
    create?: XOR<exerciseCreateWithoutStudyplanitemInput, exerciseUncheckedCreateWithoutStudyplanitemInput> | exerciseCreateWithoutStudyplanitemInput[] | exerciseUncheckedCreateWithoutStudyplanitemInput[]
    connectOrCreate?: exerciseCreateOrConnectWithoutStudyplanitemInput | exerciseCreateOrConnectWithoutStudyplanitemInput[]
    createMany?: exerciseCreateManyStudyplanitemInputEnvelope
    connect?: exerciseWhereUniqueInput | exerciseWhereUniqueInput[]
  }

  export type studyplanCreateNestedOneWithoutStudyplanitemInput = {
    create?: XOR<studyplanCreateWithoutStudyplanitemInput, studyplanUncheckedCreateWithoutStudyplanitemInput>
    connectOrCreate?: studyplanCreateOrConnectWithoutStudyplanitemInput
    connect?: studyplanWhereUniqueInput
  }

  export type exerciseUncheckedCreateNestedManyWithoutStudyplanitemInput = {
    create?: XOR<exerciseCreateWithoutStudyplanitemInput, exerciseUncheckedCreateWithoutStudyplanitemInput> | exerciseCreateWithoutStudyplanitemInput[] | exerciseUncheckedCreateWithoutStudyplanitemInput[]
    connectOrCreate?: exerciseCreateOrConnectWithoutStudyplanitemInput | exerciseCreateOrConnectWithoutStudyplanitemInput[]
    createMany?: exerciseCreateManyStudyplanitemInputEnvelope
    connect?: exerciseWhereUniqueInput | exerciseWhereUniqueInput[]
  }

  export type exerciseUpdateManyWithoutStudyplanitemNestedInput = {
    create?: XOR<exerciseCreateWithoutStudyplanitemInput, exerciseUncheckedCreateWithoutStudyplanitemInput> | exerciseCreateWithoutStudyplanitemInput[] | exerciseUncheckedCreateWithoutStudyplanitemInput[]
    connectOrCreate?: exerciseCreateOrConnectWithoutStudyplanitemInput | exerciseCreateOrConnectWithoutStudyplanitemInput[]
    upsert?: exerciseUpsertWithWhereUniqueWithoutStudyplanitemInput | exerciseUpsertWithWhereUniqueWithoutStudyplanitemInput[]
    createMany?: exerciseCreateManyStudyplanitemInputEnvelope
    set?: exerciseWhereUniqueInput | exerciseWhereUniqueInput[]
    disconnect?: exerciseWhereUniqueInput | exerciseWhereUniqueInput[]
    delete?: exerciseWhereUniqueInput | exerciseWhereUniqueInput[]
    connect?: exerciseWhereUniqueInput | exerciseWhereUniqueInput[]
    update?: exerciseUpdateWithWhereUniqueWithoutStudyplanitemInput | exerciseUpdateWithWhereUniqueWithoutStudyplanitemInput[]
    updateMany?: exerciseUpdateManyWithWhereWithoutStudyplanitemInput | exerciseUpdateManyWithWhereWithoutStudyplanitemInput[]
    deleteMany?: exerciseScalarWhereInput | exerciseScalarWhereInput[]
  }

  export type studyplanUpdateOneRequiredWithoutStudyplanitemNestedInput = {
    create?: XOR<studyplanCreateWithoutStudyplanitemInput, studyplanUncheckedCreateWithoutStudyplanitemInput>
    connectOrCreate?: studyplanCreateOrConnectWithoutStudyplanitemInput
    upsert?: studyplanUpsertWithoutStudyplanitemInput
    connect?: studyplanWhereUniqueInput
    update?: XOR<XOR<studyplanUpdateToOneWithWhereWithoutStudyplanitemInput, studyplanUpdateWithoutStudyplanitemInput>, studyplanUncheckedUpdateWithoutStudyplanitemInput>
  }

  export type exerciseUncheckedUpdateManyWithoutStudyplanitemNestedInput = {
    create?: XOR<exerciseCreateWithoutStudyplanitemInput, exerciseUncheckedCreateWithoutStudyplanitemInput> | exerciseCreateWithoutStudyplanitemInput[] | exerciseUncheckedCreateWithoutStudyplanitemInput[]
    connectOrCreate?: exerciseCreateOrConnectWithoutStudyplanitemInput | exerciseCreateOrConnectWithoutStudyplanitemInput[]
    upsert?: exerciseUpsertWithWhereUniqueWithoutStudyplanitemInput | exerciseUpsertWithWhereUniqueWithoutStudyplanitemInput[]
    createMany?: exerciseCreateManyStudyplanitemInputEnvelope
    set?: exerciseWhereUniqueInput | exerciseWhereUniqueInput[]
    disconnect?: exerciseWhereUniqueInput | exerciseWhereUniqueInput[]
    delete?: exerciseWhereUniqueInput | exerciseWhereUniqueInput[]
    connect?: exerciseWhereUniqueInput | exerciseWhereUniqueInput[]
    update?: exerciseUpdateWithWhereUniqueWithoutStudyplanitemInput | exerciseUpdateWithWhereUniqueWithoutStudyplanitemInput[]
    updateMany?: exerciseUpdateManyWithWhereWithoutStudyplanitemInput | exerciseUpdateManyWithWhereWithoutStudyplanitemInput[]
    deleteMany?: exerciseScalarWhereInput | exerciseScalarWhereInput[]
  }

  export type userCreateNestedOneWithoutExerciseprogressInput = {
    create?: XOR<userCreateWithoutExerciseprogressInput, userUncheckedCreateWithoutExerciseprogressInput>
    connectOrCreate?: userCreateOrConnectWithoutExerciseprogressInput
    connect?: userWhereUniqueInput
  }

  export type exerciseCreateNestedOneWithoutExerciseprogressInput = {
    create?: XOR<exerciseCreateWithoutExerciseprogressInput, exerciseUncheckedCreateWithoutExerciseprogressInput>
    connectOrCreate?: exerciseCreateOrConnectWithoutExerciseprogressInput
    connect?: exerciseWhereUniqueInput
  }

  export type NullableEnumexerciseprogress_StatusFieldUpdateOperationsInput = {
    set?: $Enums.exerciseprogress_Status | null
  }

  export type userUpdateOneRequiredWithoutExerciseprogressNestedInput = {
    create?: XOR<userCreateWithoutExerciseprogressInput, userUncheckedCreateWithoutExerciseprogressInput>
    connectOrCreate?: userCreateOrConnectWithoutExerciseprogressInput
    upsert?: userUpsertWithoutExerciseprogressInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutExerciseprogressInput, userUpdateWithoutExerciseprogressInput>, userUncheckedUpdateWithoutExerciseprogressInput>
  }

  export type exerciseUpdateOneRequiredWithoutExerciseprogressNestedInput = {
    create?: XOR<exerciseCreateWithoutExerciseprogressInput, exerciseUncheckedCreateWithoutExerciseprogressInput>
    connectOrCreate?: exerciseCreateOrConnectWithoutExerciseprogressInput
    upsert?: exerciseUpsertWithoutExerciseprogressInput
    connect?: exerciseWhereUniqueInput
    update?: XOR<XOR<exerciseUpdateToOneWithWhereWithoutExerciseprogressInput, exerciseUpdateWithoutExerciseprogressInput>, exerciseUncheckedUpdateWithoutExerciseprogressInput>
  }

  export type studyplanCreateNestedOneWithoutStudyplanprogressInput = {
    create?: XOR<studyplanCreateWithoutStudyplanprogressInput, studyplanUncheckedCreateWithoutStudyplanprogressInput>
    connectOrCreate?: studyplanCreateOrConnectWithoutStudyplanprogressInput
    connect?: studyplanWhereUniqueInput
  }

  export type userCreateNestedOneWithoutStudyplanprogressInput = {
    create?: XOR<userCreateWithoutStudyplanprogressInput, userUncheckedCreateWithoutStudyplanprogressInput>
    connectOrCreate?: userCreateOrConnectWithoutStudyplanprogressInput
    connect?: userWhereUniqueInput
  }

  export type Enumstudyplanprogress_StatusFieldUpdateOperationsInput = {
    set?: $Enums.studyplanprogress_Status
  }

  export type studyplanUpdateOneRequiredWithoutStudyplanprogressNestedInput = {
    create?: XOR<studyplanCreateWithoutStudyplanprogressInput, studyplanUncheckedCreateWithoutStudyplanprogressInput>
    connectOrCreate?: studyplanCreateOrConnectWithoutStudyplanprogressInput
    upsert?: studyplanUpsertWithoutStudyplanprogressInput
    connect?: studyplanWhereUniqueInput
    update?: XOR<XOR<studyplanUpdateToOneWithWhereWithoutStudyplanprogressInput, studyplanUpdateWithoutStudyplanprogressInput>, studyplanUncheckedUpdateWithoutStudyplanprogressInput>
  }

  export type userUpdateOneRequiredWithoutStudyplanprogressNestedInput = {
    create?: XOR<userCreateWithoutStudyplanprogressInput, userUncheckedCreateWithoutStudyplanprogressInput>
    connectOrCreate?: userCreateOrConnectWithoutStudyplanprogressInput
    upsert?: userUpsertWithoutStudyplanprogressInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutStudyplanprogressInput, userUpdateWithoutStudyplanprogressInput>, userUncheckedUpdateWithoutStudyplanprogressInput>
  }

  export type userCreateNestedOneWithoutListInput = {
    create?: XOR<userCreateWithoutListInput, userUncheckedCreateWithoutListInput>
    connectOrCreate?: userCreateOrConnectWithoutListInput
    connect?: userWhereUniqueInput
  }

  export type listitemCreateNestedManyWithoutListInput = {
    create?: XOR<listitemCreateWithoutListInput, listitemUncheckedCreateWithoutListInput> | listitemCreateWithoutListInput[] | listitemUncheckedCreateWithoutListInput[]
    connectOrCreate?: listitemCreateOrConnectWithoutListInput | listitemCreateOrConnectWithoutListInput[]
    createMany?: listitemCreateManyListInputEnvelope
    connect?: listitemWhereUniqueInput | listitemWhereUniqueInput[]
  }

  export type listitemUncheckedCreateNestedManyWithoutListInput = {
    create?: XOR<listitemCreateWithoutListInput, listitemUncheckedCreateWithoutListInput> | listitemCreateWithoutListInput[] | listitemUncheckedCreateWithoutListInput[]
    connectOrCreate?: listitemCreateOrConnectWithoutListInput | listitemCreateOrConnectWithoutListInput[]
    createMany?: listitemCreateManyListInputEnvelope
    connect?: listitemWhereUniqueInput | listitemWhereUniqueInput[]
  }

  export type userUpdateOneRequiredWithoutListNestedInput = {
    create?: XOR<userCreateWithoutListInput, userUncheckedCreateWithoutListInput>
    connectOrCreate?: userCreateOrConnectWithoutListInput
    upsert?: userUpsertWithoutListInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutListInput, userUpdateWithoutListInput>, userUncheckedUpdateWithoutListInput>
  }

  export type listitemUpdateManyWithoutListNestedInput = {
    create?: XOR<listitemCreateWithoutListInput, listitemUncheckedCreateWithoutListInput> | listitemCreateWithoutListInput[] | listitemUncheckedCreateWithoutListInput[]
    connectOrCreate?: listitemCreateOrConnectWithoutListInput | listitemCreateOrConnectWithoutListInput[]
    upsert?: listitemUpsertWithWhereUniqueWithoutListInput | listitemUpsertWithWhereUniqueWithoutListInput[]
    createMany?: listitemCreateManyListInputEnvelope
    set?: listitemWhereUniqueInput | listitemWhereUniqueInput[]
    disconnect?: listitemWhereUniqueInput | listitemWhereUniqueInput[]
    delete?: listitemWhereUniqueInput | listitemWhereUniqueInput[]
    connect?: listitemWhereUniqueInput | listitemWhereUniqueInput[]
    update?: listitemUpdateWithWhereUniqueWithoutListInput | listitemUpdateWithWhereUniqueWithoutListInput[]
    updateMany?: listitemUpdateManyWithWhereWithoutListInput | listitemUpdateManyWithWhereWithoutListInput[]
    deleteMany?: listitemScalarWhereInput | listitemScalarWhereInput[]
  }

  export type listitemUncheckedUpdateManyWithoutListNestedInput = {
    create?: XOR<listitemCreateWithoutListInput, listitemUncheckedCreateWithoutListInput> | listitemCreateWithoutListInput[] | listitemUncheckedCreateWithoutListInput[]
    connectOrCreate?: listitemCreateOrConnectWithoutListInput | listitemCreateOrConnectWithoutListInput[]
    upsert?: listitemUpsertWithWhereUniqueWithoutListInput | listitemUpsertWithWhereUniqueWithoutListInput[]
    createMany?: listitemCreateManyListInputEnvelope
    set?: listitemWhereUniqueInput | listitemWhereUniqueInput[]
    disconnect?: listitemWhereUniqueInput | listitemWhereUniqueInput[]
    delete?: listitemWhereUniqueInput | listitemWhereUniqueInput[]
    connect?: listitemWhereUniqueInput | listitemWhereUniqueInput[]
    update?: listitemUpdateWithWhereUniqueWithoutListInput | listitemUpdateWithWhereUniqueWithoutListInput[]
    updateMany?: listitemUpdateManyWithWhereWithoutListInput | listitemUpdateManyWithWhereWithoutListInput[]
    deleteMany?: listitemScalarWhereInput | listitemScalarWhereInput[]
  }

  export type listCreateNestedOneWithoutListitemInput = {
    create?: XOR<listCreateWithoutListitemInput, listUncheckedCreateWithoutListitemInput>
    connectOrCreate?: listCreateOrConnectWithoutListitemInput
    connect?: listWhereUniqueInput
  }

  export type exerciseCreateNestedOneWithoutListitemInput = {
    create?: XOR<exerciseCreateWithoutListitemInput, exerciseUncheckedCreateWithoutListitemInput>
    connectOrCreate?: exerciseCreateOrConnectWithoutListitemInput
    connect?: exerciseWhereUniqueInput
  }

  export type listUpdateOneRequiredWithoutListitemNestedInput = {
    create?: XOR<listCreateWithoutListitemInput, listUncheckedCreateWithoutListitemInput>
    connectOrCreate?: listCreateOrConnectWithoutListitemInput
    upsert?: listUpsertWithoutListitemInput
    connect?: listWhereUniqueInput
    update?: XOR<XOR<listUpdateToOneWithWhereWithoutListitemInput, listUpdateWithoutListitemInput>, listUncheckedUpdateWithoutListitemInput>
  }

  export type exerciseUpdateOneRequiredWithoutListitemNestedInput = {
    create?: XOR<exerciseCreateWithoutListitemInput, exerciseUncheckedCreateWithoutListitemInput>
    connectOrCreate?: exerciseCreateOrConnectWithoutListitemInput
    upsert?: exerciseUpsertWithoutListitemInput
    connect?: exerciseWhereUniqueInput
    update?: XOR<XOR<exerciseUpdateToOneWithWhereWithoutListitemInput, exerciseUpdateWithoutListitemInput>, exerciseUncheckedUpdateWithoutListitemInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumexercise_DifficultyFilter<$PrismaModel = never> = {
    equals?: $Enums.exercise_Difficulty | Enumexercise_DifficultyFieldRefInput<$PrismaModel>
    in?: $Enums.exercise_Difficulty[]
    notIn?: $Enums.exercise_Difficulty[]
    not?: NestedEnumexercise_DifficultyFilter<$PrismaModel> | $Enums.exercise_Difficulty
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumexercise_DifficultyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.exercise_Difficulty | Enumexercise_DifficultyFieldRefInput<$PrismaModel>
    in?: $Enums.exercise_Difficulty[]
    notIn?: $Enums.exercise_Difficulty[]
    not?: NestedEnumexercise_DifficultyWithAggregatesFilter<$PrismaModel> | $Enums.exercise_Difficulty
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumexercise_DifficultyFilter<$PrismaModel>
    _max?: NestedEnumexercise_DifficultyFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumsubmission_ResultNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.submission_Result | Enumsubmission_ResultFieldRefInput<$PrismaModel> | null
    in?: $Enums.submission_Result[] | null
    notIn?: $Enums.submission_Result[] | null
    not?: NestedEnumsubmission_ResultNullableFilter<$PrismaModel> | $Enums.submission_Result | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumsubmission_ResultNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.submission_Result | Enumsubmission_ResultFieldRefInput<$PrismaModel> | null
    in?: $Enums.submission_Result[] | null
    notIn?: $Enums.submission_Result[] | null
    not?: NestedEnumsubmission_ResultNullableWithAggregatesFilter<$PrismaModel> | $Enums.submission_Result | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumsubmission_ResultNullableFilter<$PrismaModel>
    _max?: NestedEnumsubmission_ResultNullableFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedEnumtestcaseresult_ResultFilter<$PrismaModel = never> = {
    equals?: $Enums.testcaseresult_Result | Enumtestcaseresult_ResultFieldRefInput<$PrismaModel>
    in?: $Enums.testcaseresult_Result[]
    notIn?: $Enums.testcaseresult_Result[]
    not?: NestedEnumtestcaseresult_ResultFilter<$PrismaModel> | $Enums.testcaseresult_Result
  }

  export type NestedEnumtestcaseresult_ResultWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.testcaseresult_Result | Enumtestcaseresult_ResultFieldRefInput<$PrismaModel>
    in?: $Enums.testcaseresult_Result[]
    notIn?: $Enums.testcaseresult_Result[]
    not?: NestedEnumtestcaseresult_ResultWithAggregatesFilter<$PrismaModel> | $Enums.testcaseresult_Result
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumtestcaseresult_ResultFilter<$PrismaModel>
    _max?: NestedEnumtestcaseresult_ResultFilter<$PrismaModel>
  }

  export type NestedEnumuser_RoleFilter<$PrismaModel = never> = {
    equals?: $Enums.user_Role | Enumuser_RoleFieldRefInput<$PrismaModel>
    in?: $Enums.user_Role[]
    notIn?: $Enums.user_Role[]
    not?: NestedEnumuser_RoleFilter<$PrismaModel> | $Enums.user_Role
  }

  export type NestedEnumuser_RoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.user_Role | Enumuser_RoleFieldRefInput<$PrismaModel>
    in?: $Enums.user_Role[]
    notIn?: $Enums.user_Role[]
    not?: NestedEnumuser_RoleWithAggregatesFilter<$PrismaModel> | $Enums.user_Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumuser_RoleFilter<$PrismaModel>
    _max?: NestedEnumuser_RoleFilter<$PrismaModel>
  }

  export type NestedEnumfriendship_statusFilter<$PrismaModel = never> = {
    equals?: $Enums.friendship_status | Enumfriendship_statusFieldRefInput<$PrismaModel>
    in?: $Enums.friendship_status[]
    notIn?: $Enums.friendship_status[]
    not?: NestedEnumfriendship_statusFilter<$PrismaModel> | $Enums.friendship_status
  }

  export type NestedEnumfriendship_statusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.friendship_status | Enumfriendship_statusFieldRefInput<$PrismaModel>
    in?: $Enums.friendship_status[]
    notIn?: $Enums.friendship_status[]
    not?: NestedEnumfriendship_statusWithAggregatesFilter<$PrismaModel> | $Enums.friendship_status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumfriendship_statusFilter<$PrismaModel>
    _max?: NestedEnumfriendship_statusFilter<$PrismaModel>
  }

  export type NestedEnumnotification_TypeFilter<$PrismaModel = never> = {
    equals?: $Enums.notification_Type | Enumnotification_TypeFieldRefInput<$PrismaModel>
    in?: $Enums.notification_Type[]
    notIn?: $Enums.notification_Type[]
    not?: NestedEnumnotification_TypeFilter<$PrismaModel> | $Enums.notification_Type
  }

  export type NestedEnumnotification_TypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.notification_Type | Enumnotification_TypeFieldRefInput<$PrismaModel>
    in?: $Enums.notification_Type[]
    notIn?: $Enums.notification_Type[]
    not?: NestedEnumnotification_TypeWithAggregatesFilter<$PrismaModel> | $Enums.notification_Type
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumnotification_TypeFilter<$PrismaModel>
    _max?: NestedEnumnotification_TypeFilter<$PrismaModel>
  }

  export type NestedEnumexerciseprogress_StatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.exerciseprogress_Status | Enumexerciseprogress_StatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.exerciseprogress_Status[] | null
    notIn?: $Enums.exerciseprogress_Status[] | null
    not?: NestedEnumexerciseprogress_StatusNullableFilter<$PrismaModel> | $Enums.exerciseprogress_Status | null
  }

  export type NestedEnumexerciseprogress_StatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.exerciseprogress_Status | Enumexerciseprogress_StatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.exerciseprogress_Status[] | null
    notIn?: $Enums.exerciseprogress_Status[] | null
    not?: NestedEnumexerciseprogress_StatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.exerciseprogress_Status | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumexerciseprogress_StatusNullableFilter<$PrismaModel>
    _max?: NestedEnumexerciseprogress_StatusNullableFilter<$PrismaModel>
  }

  export type NestedEnumstudyplanprogress_StatusFilter<$PrismaModel = never> = {
    equals?: $Enums.studyplanprogress_Status | Enumstudyplanprogress_StatusFieldRefInput<$PrismaModel>
    in?: $Enums.studyplanprogress_Status[]
    notIn?: $Enums.studyplanprogress_Status[]
    not?: NestedEnumstudyplanprogress_StatusFilter<$PrismaModel> | $Enums.studyplanprogress_Status
  }

  export type NestedEnumstudyplanprogress_StatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.studyplanprogress_Status | Enumstudyplanprogress_StatusFieldRefInput<$PrismaModel>
    in?: $Enums.studyplanprogress_Status[]
    notIn?: $Enums.studyplanprogress_Status[]
    not?: NestedEnumstudyplanprogress_StatusWithAggregatesFilter<$PrismaModel> | $Enums.studyplanprogress_Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumstudyplanprogress_StatusFilter<$PrismaModel>
    _max?: NestedEnumstudyplanprogress_StatusFilter<$PrismaModel>
  }

  export type commentCreateWithoutExerciseInput = {
    Content: string
    CreatedAt?: Date | string | null
    user: userCreateNestedOneWithoutCommentInput
    lesson?: lessonCreateNestedOneWithoutCommentInput
    commentlike?: commentlikeCreateNestedManyWithoutCommentInput
    notification?: notificationCreateNestedManyWithoutCommentInput
  }

  export type commentUncheckedCreateWithoutExerciseInput = {
    CoID?: number
    UID: string
    LID?: number | null
    Content: string
    CreatedAt?: Date | string | null
    commentlike?: commentlikeUncheckedCreateNestedManyWithoutCommentInput
    notification?: notificationUncheckedCreateNestedManyWithoutCommentInput
  }

  export type commentCreateOrConnectWithoutExerciseInput = {
    where: commentWhereUniqueInput
    create: XOR<commentCreateWithoutExerciseInput, commentUncheckedCreateWithoutExerciseInput>
  }

  export type commentCreateManyExerciseInputEnvelope = {
    data: commentCreateManyExerciseInput | commentCreateManyExerciseInput[]
    skipDuplicates?: boolean
  }

  export type topicCreateWithoutExerciseInput = {
    Name: string
    Slug: string
  }

  export type topicUncheckedCreateWithoutExerciseInput = {
    TpID?: number
    Name: string
    Slug: string
  }

  export type topicCreateOrConnectWithoutExerciseInput = {
    where: topicWhereUniqueInput
    create: XOR<topicCreateWithoutExerciseInput, topicUncheckedCreateWithoutExerciseInput>
  }

  export type studyplanitemCreateWithoutExerciseInput = {
    Name: string
    studyplan: studyplanCreateNestedOneWithoutStudyplanitemInput
  }

  export type studyplanitemUncheckedCreateWithoutExerciseInput = {
    SPIID?: number
    SPID: number
    Name: string
  }

  export type studyplanitemCreateOrConnectWithoutExerciseInput = {
    where: studyplanitemWhereUniqueInput
    create: XOR<studyplanitemCreateWithoutExerciseInput, studyplanitemUncheckedCreateWithoutExerciseInput>
  }

  export type exerciselikeCreateWithoutExerciseInput = {
    CreatedAt?: Date | string | null
    user: userCreateNestedOneWithoutExerciselikeInput
  }

  export type exerciselikeUncheckedCreateWithoutExerciseInput = {
    ELID?: number
    UID: string
    CreatedAt?: Date | string | null
  }

  export type exerciselikeCreateOrConnectWithoutExerciseInput = {
    where: exerciselikeWhereUniqueInput
    create: XOR<exerciselikeCreateWithoutExerciseInput, exerciselikeUncheckedCreateWithoutExerciseInput>
  }

  export type exerciselikeCreateManyExerciseInputEnvelope = {
    data: exerciselikeCreateManyExerciseInput | exerciselikeCreateManyExerciseInput[]
    skipDuplicates?: boolean
  }

  export type exerciseprogressCreateWithoutExerciseInput = {
    Status?: $Enums.exerciseprogress_Status | null
    UpdatedAt?: Date | string | null
    user: userCreateNestedOneWithoutExerciseprogressInput
  }

  export type exerciseprogressUncheckedCreateWithoutExerciseInput = {
    ID?: number
    UID: string
    Status?: $Enums.exerciseprogress_Status | null
    UpdatedAt?: Date | string | null
  }

  export type exerciseprogressCreateOrConnectWithoutExerciseInput = {
    where: exerciseprogressWhereUniqueInput
    create: XOR<exerciseprogressCreateWithoutExerciseInput, exerciseprogressUncheckedCreateWithoutExerciseInput>
  }

  export type exerciseprogressCreateManyExerciseInputEnvelope = {
    data: exerciseprogressCreateManyExerciseInput | exerciseprogressCreateManyExerciseInput[]
    skipDuplicates?: boolean
  }

  export type listitemCreateWithoutExerciseInput = {
    list: listCreateNestedOneWithoutListitemInput
  }

  export type listitemUncheckedCreateWithoutExerciseInput = {
    LID: number
  }

  export type listitemCreateOrConnectWithoutExerciseInput = {
    where: listitemWhereUniqueInput
    create: XOR<listitemCreateWithoutExerciseInput, listitemUncheckedCreateWithoutExerciseInput>
  }

  export type listitemCreateManyExerciseInputEnvelope = {
    data: listitemCreateManyExerciseInput | listitemCreateManyExerciseInput[]
    skipDuplicates?: boolean
  }

  export type submissionCreateWithoutExerciseInput = {
    Code?: string | null
    CreatedAt?: Date | string | null
    Result?: $Enums.submission_Result | null
    isPublic?: boolean | null
    user: userCreateNestedOneWithoutSubmissionInput
    testcaseresult?: testcaseresultCreateNestedManyWithoutSubmissionInput
  }

  export type submissionUncheckedCreateWithoutExerciseInput = {
    SID?: number
    UID: string
    Code?: string | null
    CreatedAt?: Date | string | null
    Result?: $Enums.submission_Result | null
    isPublic?: boolean | null
    testcaseresult?: testcaseresultUncheckedCreateNestedManyWithoutSubmissionInput
  }

  export type submissionCreateOrConnectWithoutExerciseInput = {
    where: submissionWhereUniqueInput
    create: XOR<submissionCreateWithoutExerciseInput, submissionUncheckedCreateWithoutExerciseInput>
  }

  export type submissionCreateManyExerciseInputEnvelope = {
    data: submissionCreateManyExerciseInput | submissionCreateManyExerciseInput[]
    skipDuplicates?: boolean
  }

  export type testcaseCreateWithoutExerciseInput = {
    Input?: string | null
    ExpectedOutput: string
    isHidden?: boolean | null
    testcaseresult?: testcaseresultCreateNestedManyWithoutTestcaseInput
  }

  export type testcaseUncheckedCreateWithoutExerciseInput = {
    TCID?: number
    Input?: string | null
    ExpectedOutput: string
    isHidden?: boolean | null
    testcaseresult?: testcaseresultUncheckedCreateNestedManyWithoutTestcaseInput
  }

  export type testcaseCreateOrConnectWithoutExerciseInput = {
    where: testcaseWhereUniqueInput
    create: XOR<testcaseCreateWithoutExerciseInput, testcaseUncheckedCreateWithoutExerciseInput>
  }

  export type testcaseCreateManyExerciseInputEnvelope = {
    data: testcaseCreateManyExerciseInput | testcaseCreateManyExerciseInput[]
    skipDuplicates?: boolean
  }

  export type commentUpsertWithWhereUniqueWithoutExerciseInput = {
    where: commentWhereUniqueInput
    update: XOR<commentUpdateWithoutExerciseInput, commentUncheckedUpdateWithoutExerciseInput>
    create: XOR<commentCreateWithoutExerciseInput, commentUncheckedCreateWithoutExerciseInput>
  }

  export type commentUpdateWithWhereUniqueWithoutExerciseInput = {
    where: commentWhereUniqueInput
    data: XOR<commentUpdateWithoutExerciseInput, commentUncheckedUpdateWithoutExerciseInput>
  }

  export type commentUpdateManyWithWhereWithoutExerciseInput = {
    where: commentScalarWhereInput
    data: XOR<commentUpdateManyMutationInput, commentUncheckedUpdateManyWithoutExerciseInput>
  }

  export type commentScalarWhereInput = {
    AND?: commentScalarWhereInput | commentScalarWhereInput[]
    OR?: commentScalarWhereInput[]
    NOT?: commentScalarWhereInput | commentScalarWhereInput[]
    CoID?: IntFilter<"comment"> | number
    UID?: StringFilter<"comment"> | string
    LID?: IntNullableFilter<"comment"> | number | null
    EID?: IntNullableFilter<"comment"> | number | null
    Content?: StringFilter<"comment"> | string
    CreatedAt?: DateTimeNullableFilter<"comment"> | Date | string | null
  }

  export type topicUpsertWithoutExerciseInput = {
    update: XOR<topicUpdateWithoutExerciseInput, topicUncheckedUpdateWithoutExerciseInput>
    create: XOR<topicCreateWithoutExerciseInput, topicUncheckedCreateWithoutExerciseInput>
    where?: topicWhereInput
  }

  export type topicUpdateToOneWithWhereWithoutExerciseInput = {
    where?: topicWhereInput
    data: XOR<topicUpdateWithoutExerciseInput, topicUncheckedUpdateWithoutExerciseInput>
  }

  export type topicUpdateWithoutExerciseInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Slug?: StringFieldUpdateOperationsInput | string
  }

  export type topicUncheckedUpdateWithoutExerciseInput = {
    TpID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Slug?: StringFieldUpdateOperationsInput | string
  }

  export type studyplanitemUpsertWithoutExerciseInput = {
    update: XOR<studyplanitemUpdateWithoutExerciseInput, studyplanitemUncheckedUpdateWithoutExerciseInput>
    create: XOR<studyplanitemCreateWithoutExerciseInput, studyplanitemUncheckedCreateWithoutExerciseInput>
    where?: studyplanitemWhereInput
  }

  export type studyplanitemUpdateToOneWithWhereWithoutExerciseInput = {
    where?: studyplanitemWhereInput
    data: XOR<studyplanitemUpdateWithoutExerciseInput, studyplanitemUncheckedUpdateWithoutExerciseInput>
  }

  export type studyplanitemUpdateWithoutExerciseInput = {
    Name?: StringFieldUpdateOperationsInput | string
    studyplan?: studyplanUpdateOneRequiredWithoutStudyplanitemNestedInput
  }

  export type studyplanitemUncheckedUpdateWithoutExerciseInput = {
    SPIID?: IntFieldUpdateOperationsInput | number
    SPID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
  }

  export type exerciselikeUpsertWithWhereUniqueWithoutExerciseInput = {
    where: exerciselikeWhereUniqueInput
    update: XOR<exerciselikeUpdateWithoutExerciseInput, exerciselikeUncheckedUpdateWithoutExerciseInput>
    create: XOR<exerciselikeCreateWithoutExerciseInput, exerciselikeUncheckedCreateWithoutExerciseInput>
  }

  export type exerciselikeUpdateWithWhereUniqueWithoutExerciseInput = {
    where: exerciselikeWhereUniqueInput
    data: XOR<exerciselikeUpdateWithoutExerciseInput, exerciselikeUncheckedUpdateWithoutExerciseInput>
  }

  export type exerciselikeUpdateManyWithWhereWithoutExerciseInput = {
    where: exerciselikeScalarWhereInput
    data: XOR<exerciselikeUpdateManyMutationInput, exerciselikeUncheckedUpdateManyWithoutExerciseInput>
  }

  export type exerciselikeScalarWhereInput = {
    AND?: exerciselikeScalarWhereInput | exerciselikeScalarWhereInput[]
    OR?: exerciselikeScalarWhereInput[]
    NOT?: exerciselikeScalarWhereInput | exerciselikeScalarWhereInput[]
    ELID?: IntFilter<"exerciselike"> | number
    UID?: StringFilter<"exerciselike"> | string
    EID?: IntFilter<"exerciselike"> | number
    CreatedAt?: DateTimeNullableFilter<"exerciselike"> | Date | string | null
  }

  export type exerciseprogressUpsertWithWhereUniqueWithoutExerciseInput = {
    where: exerciseprogressWhereUniqueInput
    update: XOR<exerciseprogressUpdateWithoutExerciseInput, exerciseprogressUncheckedUpdateWithoutExerciseInput>
    create: XOR<exerciseprogressCreateWithoutExerciseInput, exerciseprogressUncheckedCreateWithoutExerciseInput>
  }

  export type exerciseprogressUpdateWithWhereUniqueWithoutExerciseInput = {
    where: exerciseprogressWhereUniqueInput
    data: XOR<exerciseprogressUpdateWithoutExerciseInput, exerciseprogressUncheckedUpdateWithoutExerciseInput>
  }

  export type exerciseprogressUpdateManyWithWhereWithoutExerciseInput = {
    where: exerciseprogressScalarWhereInput
    data: XOR<exerciseprogressUpdateManyMutationInput, exerciseprogressUncheckedUpdateManyWithoutExerciseInput>
  }

  export type exerciseprogressScalarWhereInput = {
    AND?: exerciseprogressScalarWhereInput | exerciseprogressScalarWhereInput[]
    OR?: exerciseprogressScalarWhereInput[]
    NOT?: exerciseprogressScalarWhereInput | exerciseprogressScalarWhereInput[]
    ID?: IntFilter<"exerciseprogress"> | number
    UID?: StringFilter<"exerciseprogress"> | string
    EID?: IntFilter<"exerciseprogress"> | number
    Status?: Enumexerciseprogress_StatusNullableFilter<"exerciseprogress"> | $Enums.exerciseprogress_Status | null
    UpdatedAt?: DateTimeNullableFilter<"exerciseprogress"> | Date | string | null
  }

  export type listitemUpsertWithWhereUniqueWithoutExerciseInput = {
    where: listitemWhereUniqueInput
    update: XOR<listitemUpdateWithoutExerciseInput, listitemUncheckedUpdateWithoutExerciseInput>
    create: XOR<listitemCreateWithoutExerciseInput, listitemUncheckedCreateWithoutExerciseInput>
  }

  export type listitemUpdateWithWhereUniqueWithoutExerciseInput = {
    where: listitemWhereUniqueInput
    data: XOR<listitemUpdateWithoutExerciseInput, listitemUncheckedUpdateWithoutExerciseInput>
  }

  export type listitemUpdateManyWithWhereWithoutExerciseInput = {
    where: listitemScalarWhereInput
    data: XOR<listitemUpdateManyMutationInput, listitemUncheckedUpdateManyWithoutExerciseInput>
  }

  export type listitemScalarWhereInput = {
    AND?: listitemScalarWhereInput | listitemScalarWhereInput[]
    OR?: listitemScalarWhereInput[]
    NOT?: listitemScalarWhereInput | listitemScalarWhereInput[]
    LID?: IntFilter<"listitem"> | number
    EID?: IntFilter<"listitem"> | number
  }

  export type submissionUpsertWithWhereUniqueWithoutExerciseInput = {
    where: submissionWhereUniqueInput
    update: XOR<submissionUpdateWithoutExerciseInput, submissionUncheckedUpdateWithoutExerciseInput>
    create: XOR<submissionCreateWithoutExerciseInput, submissionUncheckedCreateWithoutExerciseInput>
  }

  export type submissionUpdateWithWhereUniqueWithoutExerciseInput = {
    where: submissionWhereUniqueInput
    data: XOR<submissionUpdateWithoutExerciseInput, submissionUncheckedUpdateWithoutExerciseInput>
  }

  export type submissionUpdateManyWithWhereWithoutExerciseInput = {
    where: submissionScalarWhereInput
    data: XOR<submissionUpdateManyMutationInput, submissionUncheckedUpdateManyWithoutExerciseInput>
  }

  export type submissionScalarWhereInput = {
    AND?: submissionScalarWhereInput | submissionScalarWhereInput[]
    OR?: submissionScalarWhereInput[]
    NOT?: submissionScalarWhereInput | submissionScalarWhereInput[]
    SID?: IntFilter<"submission"> | number
    UID?: StringFilter<"submission"> | string
    EID?: IntFilter<"submission"> | number
    Code?: StringNullableFilter<"submission"> | string | null
    CreatedAt?: DateTimeNullableFilter<"submission"> | Date | string | null
    Result?: Enumsubmission_ResultNullableFilter<"submission"> | $Enums.submission_Result | null
    isPublic?: BoolNullableFilter<"submission"> | boolean | null
  }

  export type testcaseUpsertWithWhereUniqueWithoutExerciseInput = {
    where: testcaseWhereUniqueInput
    update: XOR<testcaseUpdateWithoutExerciseInput, testcaseUncheckedUpdateWithoutExerciseInput>
    create: XOR<testcaseCreateWithoutExerciseInput, testcaseUncheckedCreateWithoutExerciseInput>
  }

  export type testcaseUpdateWithWhereUniqueWithoutExerciseInput = {
    where: testcaseWhereUniqueInput
    data: XOR<testcaseUpdateWithoutExerciseInput, testcaseUncheckedUpdateWithoutExerciseInput>
  }

  export type testcaseUpdateManyWithWhereWithoutExerciseInput = {
    where: testcaseScalarWhereInput
    data: XOR<testcaseUpdateManyMutationInput, testcaseUncheckedUpdateManyWithoutExerciseInput>
  }

  export type testcaseScalarWhereInput = {
    AND?: testcaseScalarWhereInput | testcaseScalarWhereInput[]
    OR?: testcaseScalarWhereInput[]
    NOT?: testcaseScalarWhereInput | testcaseScalarWhereInput[]
    TCID?: IntFilter<"testcase"> | number
    EID?: IntFilter<"testcase"> | number
    Input?: StringNullableFilter<"testcase"> | string | null
    ExpectedOutput?: StringFilter<"testcase"> | string
    isHidden?: BoolNullableFilter<"testcase"> | boolean | null
  }

  export type exerciseCreateWithoutSubmissionInput = {
    Name: string
    Slug: string
    Content: string
    Difficulty?: $Enums.exercise_Difficulty
    template?: string | null
    comment?: commentCreateNestedManyWithoutExerciseInput
    topic?: topicCreateNestedOneWithoutExerciseInput
    studyplanitem?: studyplanitemCreateNestedOneWithoutExerciseInput
    exerciselike?: exerciselikeCreateNestedManyWithoutExerciseInput
    exerciseprogress?: exerciseprogressCreateNestedManyWithoutExerciseInput
    listitem?: listitemCreateNestedManyWithoutExerciseInput
    testcase?: testcaseCreateNestedManyWithoutExerciseInput
  }

  export type exerciseUncheckedCreateWithoutSubmissionInput = {
    EID?: number
    TpID?: number | null
    SPIID?: number | null
    Name: string
    Slug: string
    Content: string
    Difficulty?: $Enums.exercise_Difficulty
    template?: string | null
    comment?: commentUncheckedCreateNestedManyWithoutExerciseInput
    exerciselike?: exerciselikeUncheckedCreateNestedManyWithoutExerciseInput
    exerciseprogress?: exerciseprogressUncheckedCreateNestedManyWithoutExerciseInput
    listitem?: listitemUncheckedCreateNestedManyWithoutExerciseInput
    testcase?: testcaseUncheckedCreateNestedManyWithoutExerciseInput
  }

  export type exerciseCreateOrConnectWithoutSubmissionInput = {
    where: exerciseWhereUniqueInput
    create: XOR<exerciseCreateWithoutSubmissionInput, exerciseUncheckedCreateWithoutSubmissionInput>
  }

  export type userCreateWithoutSubmissionInput = {
    UID?: string
    Username: string
    Email: string
    Password: string
    Role?: $Enums.user_Role
    CreatedAt?: Date | string | null
    Image?: string | null
    comment?: commentCreateNestedManyWithoutUserInput
    commentlike?: commentlikeCreateNestedManyWithoutUserInput
    exerciselike?: exerciselikeCreateNestedManyWithoutUserInput
    exerciseprogress?: exerciseprogressCreateNestedManyWithoutUserInput
    friendship_friendship_requesterTouser?: friendshipCreateNestedManyWithoutUser_friendship_requesterTouserInput
    friendship_friendship_addresseeTouser?: friendshipCreateNestedManyWithoutUser_friendship_addresseeTouserInput
    list?: listCreateNestedManyWithoutUserInput
    notification_notification_UIDTouser?: notificationCreateNestedManyWithoutUser_notification_UIDTouserInput
    notification_notification_FromUserTouser?: notificationCreateNestedManyWithoutUser_notification_FromUserTouserInput
    studyplanprogress?: studyplanprogressCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutSubmissionInput = {
    UID?: string
    Username: string
    Email: string
    Password: string
    Role?: $Enums.user_Role
    CreatedAt?: Date | string | null
    Image?: string | null
    comment?: commentUncheckedCreateNestedManyWithoutUserInput
    commentlike?: commentlikeUncheckedCreateNestedManyWithoutUserInput
    exerciselike?: exerciselikeUncheckedCreateNestedManyWithoutUserInput
    exerciseprogress?: exerciseprogressUncheckedCreateNestedManyWithoutUserInput
    friendship_friendship_requesterTouser?: friendshipUncheckedCreateNestedManyWithoutUser_friendship_requesterTouserInput
    friendship_friendship_addresseeTouser?: friendshipUncheckedCreateNestedManyWithoutUser_friendship_addresseeTouserInput
    list?: listUncheckedCreateNestedManyWithoutUserInput
    notification_notification_UIDTouser?: notificationUncheckedCreateNestedManyWithoutUser_notification_UIDTouserInput
    notification_notification_FromUserTouser?: notificationUncheckedCreateNestedManyWithoutUser_notification_FromUserTouserInput
    studyplanprogress?: studyplanprogressUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutSubmissionInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutSubmissionInput, userUncheckedCreateWithoutSubmissionInput>
  }

  export type testcaseresultCreateWithoutSubmissionInput = {
    ActualOutput: string
    Result?: $Enums.testcaseresult_Result
    testcase: testcaseCreateNestedOneWithoutTestcaseresultInput
  }

  export type testcaseresultUncheckedCreateWithoutSubmissionInput = {
    TCRID?: number
    TCID: number
    ActualOutput: string
    Result?: $Enums.testcaseresult_Result
  }

  export type testcaseresultCreateOrConnectWithoutSubmissionInput = {
    where: testcaseresultWhereUniqueInput
    create: XOR<testcaseresultCreateWithoutSubmissionInput, testcaseresultUncheckedCreateWithoutSubmissionInput>
  }

  export type testcaseresultCreateManySubmissionInputEnvelope = {
    data: testcaseresultCreateManySubmissionInput | testcaseresultCreateManySubmissionInput[]
    skipDuplicates?: boolean
  }

  export type exerciseUpsertWithoutSubmissionInput = {
    update: XOR<exerciseUpdateWithoutSubmissionInput, exerciseUncheckedUpdateWithoutSubmissionInput>
    create: XOR<exerciseCreateWithoutSubmissionInput, exerciseUncheckedCreateWithoutSubmissionInput>
    where?: exerciseWhereInput
  }

  export type exerciseUpdateToOneWithWhereWithoutSubmissionInput = {
    where?: exerciseWhereInput
    data: XOR<exerciseUpdateWithoutSubmissionInput, exerciseUncheckedUpdateWithoutSubmissionInput>
  }

  export type exerciseUpdateWithoutSubmissionInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Slug?: StringFieldUpdateOperationsInput | string
    Content?: StringFieldUpdateOperationsInput | string
    Difficulty?: Enumexercise_DifficultyFieldUpdateOperationsInput | $Enums.exercise_Difficulty
    template?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: commentUpdateManyWithoutExerciseNestedInput
    topic?: topicUpdateOneWithoutExerciseNestedInput
    studyplanitem?: studyplanitemUpdateOneWithoutExerciseNestedInput
    exerciselike?: exerciselikeUpdateManyWithoutExerciseNestedInput
    exerciseprogress?: exerciseprogressUpdateManyWithoutExerciseNestedInput
    listitem?: listitemUpdateManyWithoutExerciseNestedInput
    testcase?: testcaseUpdateManyWithoutExerciseNestedInput
  }

  export type exerciseUncheckedUpdateWithoutSubmissionInput = {
    EID?: IntFieldUpdateOperationsInput | number
    TpID?: NullableIntFieldUpdateOperationsInput | number | null
    SPIID?: NullableIntFieldUpdateOperationsInput | number | null
    Name?: StringFieldUpdateOperationsInput | string
    Slug?: StringFieldUpdateOperationsInput | string
    Content?: StringFieldUpdateOperationsInput | string
    Difficulty?: Enumexercise_DifficultyFieldUpdateOperationsInput | $Enums.exercise_Difficulty
    template?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: commentUncheckedUpdateManyWithoutExerciseNestedInput
    exerciselike?: exerciselikeUncheckedUpdateManyWithoutExerciseNestedInput
    exerciseprogress?: exerciseprogressUncheckedUpdateManyWithoutExerciseNestedInput
    listitem?: listitemUncheckedUpdateManyWithoutExerciseNestedInput
    testcase?: testcaseUncheckedUpdateManyWithoutExerciseNestedInput
  }

  export type userUpsertWithoutSubmissionInput = {
    update: XOR<userUpdateWithoutSubmissionInput, userUncheckedUpdateWithoutSubmissionInput>
    create: XOR<userCreateWithoutSubmissionInput, userUncheckedCreateWithoutSubmissionInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutSubmissionInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutSubmissionInput, userUncheckedUpdateWithoutSubmissionInput>
  }

  export type userUpdateWithoutSubmissionInput = {
    UID?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: Enumuser_RoleFieldUpdateOperationsInput | $Enums.user_Role
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Image?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: commentUpdateManyWithoutUserNestedInput
    commentlike?: commentlikeUpdateManyWithoutUserNestedInput
    exerciselike?: exerciselikeUpdateManyWithoutUserNestedInput
    exerciseprogress?: exerciseprogressUpdateManyWithoutUserNestedInput
    friendship_friendship_requesterTouser?: friendshipUpdateManyWithoutUser_friendship_requesterTouserNestedInput
    friendship_friendship_addresseeTouser?: friendshipUpdateManyWithoutUser_friendship_addresseeTouserNestedInput
    list?: listUpdateManyWithoutUserNestedInput
    notification_notification_UIDTouser?: notificationUpdateManyWithoutUser_notification_UIDTouserNestedInput
    notification_notification_FromUserTouser?: notificationUpdateManyWithoutUser_notification_FromUserTouserNestedInput
    studyplanprogress?: studyplanprogressUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutSubmissionInput = {
    UID?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: Enumuser_RoleFieldUpdateOperationsInput | $Enums.user_Role
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Image?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: commentUncheckedUpdateManyWithoutUserNestedInput
    commentlike?: commentlikeUncheckedUpdateManyWithoutUserNestedInput
    exerciselike?: exerciselikeUncheckedUpdateManyWithoutUserNestedInput
    exerciseprogress?: exerciseprogressUncheckedUpdateManyWithoutUserNestedInput
    friendship_friendship_requesterTouser?: friendshipUncheckedUpdateManyWithoutUser_friendship_requesterTouserNestedInput
    friendship_friendship_addresseeTouser?: friendshipUncheckedUpdateManyWithoutUser_friendship_addresseeTouserNestedInput
    list?: listUncheckedUpdateManyWithoutUserNestedInput
    notification_notification_UIDTouser?: notificationUncheckedUpdateManyWithoutUser_notification_UIDTouserNestedInput
    notification_notification_FromUserTouser?: notificationUncheckedUpdateManyWithoutUser_notification_FromUserTouserNestedInput
    studyplanprogress?: studyplanprogressUncheckedUpdateManyWithoutUserNestedInput
  }

  export type testcaseresultUpsertWithWhereUniqueWithoutSubmissionInput = {
    where: testcaseresultWhereUniqueInput
    update: XOR<testcaseresultUpdateWithoutSubmissionInput, testcaseresultUncheckedUpdateWithoutSubmissionInput>
    create: XOR<testcaseresultCreateWithoutSubmissionInput, testcaseresultUncheckedCreateWithoutSubmissionInput>
  }

  export type testcaseresultUpdateWithWhereUniqueWithoutSubmissionInput = {
    where: testcaseresultWhereUniqueInput
    data: XOR<testcaseresultUpdateWithoutSubmissionInput, testcaseresultUncheckedUpdateWithoutSubmissionInput>
  }

  export type testcaseresultUpdateManyWithWhereWithoutSubmissionInput = {
    where: testcaseresultScalarWhereInput
    data: XOR<testcaseresultUpdateManyMutationInput, testcaseresultUncheckedUpdateManyWithoutSubmissionInput>
  }

  export type testcaseresultScalarWhereInput = {
    AND?: testcaseresultScalarWhereInput | testcaseresultScalarWhereInput[]
    OR?: testcaseresultScalarWhereInput[]
    NOT?: testcaseresultScalarWhereInput | testcaseresultScalarWhereInput[]
    TCRID?: IntFilter<"testcaseresult"> | number
    SID?: IntFilter<"testcaseresult"> | number
    TCID?: IntFilter<"testcaseresult"> | number
    ActualOutput?: StringFilter<"testcaseresult"> | string
    Result?: Enumtestcaseresult_ResultFilter<"testcaseresult"> | $Enums.testcaseresult_Result
  }

  export type exerciseCreateWithoutTestcaseInput = {
    Name: string
    Slug: string
    Content: string
    Difficulty?: $Enums.exercise_Difficulty
    template?: string | null
    comment?: commentCreateNestedManyWithoutExerciseInput
    topic?: topicCreateNestedOneWithoutExerciseInput
    studyplanitem?: studyplanitemCreateNestedOneWithoutExerciseInput
    exerciselike?: exerciselikeCreateNestedManyWithoutExerciseInput
    exerciseprogress?: exerciseprogressCreateNestedManyWithoutExerciseInput
    listitem?: listitemCreateNestedManyWithoutExerciseInput
    submission?: submissionCreateNestedManyWithoutExerciseInput
  }

  export type exerciseUncheckedCreateWithoutTestcaseInput = {
    EID?: number
    TpID?: number | null
    SPIID?: number | null
    Name: string
    Slug: string
    Content: string
    Difficulty?: $Enums.exercise_Difficulty
    template?: string | null
    comment?: commentUncheckedCreateNestedManyWithoutExerciseInput
    exerciselike?: exerciselikeUncheckedCreateNestedManyWithoutExerciseInput
    exerciseprogress?: exerciseprogressUncheckedCreateNestedManyWithoutExerciseInput
    listitem?: listitemUncheckedCreateNestedManyWithoutExerciseInput
    submission?: submissionUncheckedCreateNestedManyWithoutExerciseInput
  }

  export type exerciseCreateOrConnectWithoutTestcaseInput = {
    where: exerciseWhereUniqueInput
    create: XOR<exerciseCreateWithoutTestcaseInput, exerciseUncheckedCreateWithoutTestcaseInput>
  }

  export type testcaseresultCreateWithoutTestcaseInput = {
    ActualOutput: string
    Result?: $Enums.testcaseresult_Result
    submission: submissionCreateNestedOneWithoutTestcaseresultInput
  }

  export type testcaseresultUncheckedCreateWithoutTestcaseInput = {
    TCRID?: number
    SID: number
    ActualOutput: string
    Result?: $Enums.testcaseresult_Result
  }

  export type testcaseresultCreateOrConnectWithoutTestcaseInput = {
    where: testcaseresultWhereUniqueInput
    create: XOR<testcaseresultCreateWithoutTestcaseInput, testcaseresultUncheckedCreateWithoutTestcaseInput>
  }

  export type testcaseresultCreateManyTestcaseInputEnvelope = {
    data: testcaseresultCreateManyTestcaseInput | testcaseresultCreateManyTestcaseInput[]
    skipDuplicates?: boolean
  }

  export type exerciseUpsertWithoutTestcaseInput = {
    update: XOR<exerciseUpdateWithoutTestcaseInput, exerciseUncheckedUpdateWithoutTestcaseInput>
    create: XOR<exerciseCreateWithoutTestcaseInput, exerciseUncheckedCreateWithoutTestcaseInput>
    where?: exerciseWhereInput
  }

  export type exerciseUpdateToOneWithWhereWithoutTestcaseInput = {
    where?: exerciseWhereInput
    data: XOR<exerciseUpdateWithoutTestcaseInput, exerciseUncheckedUpdateWithoutTestcaseInput>
  }

  export type exerciseUpdateWithoutTestcaseInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Slug?: StringFieldUpdateOperationsInput | string
    Content?: StringFieldUpdateOperationsInput | string
    Difficulty?: Enumexercise_DifficultyFieldUpdateOperationsInput | $Enums.exercise_Difficulty
    template?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: commentUpdateManyWithoutExerciseNestedInput
    topic?: topicUpdateOneWithoutExerciseNestedInput
    studyplanitem?: studyplanitemUpdateOneWithoutExerciseNestedInput
    exerciselike?: exerciselikeUpdateManyWithoutExerciseNestedInput
    exerciseprogress?: exerciseprogressUpdateManyWithoutExerciseNestedInput
    listitem?: listitemUpdateManyWithoutExerciseNestedInput
    submission?: submissionUpdateManyWithoutExerciseNestedInput
  }

  export type exerciseUncheckedUpdateWithoutTestcaseInput = {
    EID?: IntFieldUpdateOperationsInput | number
    TpID?: NullableIntFieldUpdateOperationsInput | number | null
    SPIID?: NullableIntFieldUpdateOperationsInput | number | null
    Name?: StringFieldUpdateOperationsInput | string
    Slug?: StringFieldUpdateOperationsInput | string
    Content?: StringFieldUpdateOperationsInput | string
    Difficulty?: Enumexercise_DifficultyFieldUpdateOperationsInput | $Enums.exercise_Difficulty
    template?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: commentUncheckedUpdateManyWithoutExerciseNestedInput
    exerciselike?: exerciselikeUncheckedUpdateManyWithoutExerciseNestedInput
    exerciseprogress?: exerciseprogressUncheckedUpdateManyWithoutExerciseNestedInput
    listitem?: listitemUncheckedUpdateManyWithoutExerciseNestedInput
    submission?: submissionUncheckedUpdateManyWithoutExerciseNestedInput
  }

  export type testcaseresultUpsertWithWhereUniqueWithoutTestcaseInput = {
    where: testcaseresultWhereUniqueInput
    update: XOR<testcaseresultUpdateWithoutTestcaseInput, testcaseresultUncheckedUpdateWithoutTestcaseInput>
    create: XOR<testcaseresultCreateWithoutTestcaseInput, testcaseresultUncheckedCreateWithoutTestcaseInput>
  }

  export type testcaseresultUpdateWithWhereUniqueWithoutTestcaseInput = {
    where: testcaseresultWhereUniqueInput
    data: XOR<testcaseresultUpdateWithoutTestcaseInput, testcaseresultUncheckedUpdateWithoutTestcaseInput>
  }

  export type testcaseresultUpdateManyWithWhereWithoutTestcaseInput = {
    where: testcaseresultScalarWhereInput
    data: XOR<testcaseresultUpdateManyMutationInput, testcaseresultUncheckedUpdateManyWithoutTestcaseInput>
  }

  export type submissionCreateWithoutTestcaseresultInput = {
    Code?: string | null
    CreatedAt?: Date | string | null
    Result?: $Enums.submission_Result | null
    isPublic?: boolean | null
    exercise: exerciseCreateNestedOneWithoutSubmissionInput
    user: userCreateNestedOneWithoutSubmissionInput
  }

  export type submissionUncheckedCreateWithoutTestcaseresultInput = {
    SID?: number
    UID: string
    EID: number
    Code?: string | null
    CreatedAt?: Date | string | null
    Result?: $Enums.submission_Result | null
    isPublic?: boolean | null
  }

  export type submissionCreateOrConnectWithoutTestcaseresultInput = {
    where: submissionWhereUniqueInput
    create: XOR<submissionCreateWithoutTestcaseresultInput, submissionUncheckedCreateWithoutTestcaseresultInput>
  }

  export type testcaseCreateWithoutTestcaseresultInput = {
    Input?: string | null
    ExpectedOutput: string
    isHidden?: boolean | null
    exercise: exerciseCreateNestedOneWithoutTestcaseInput
  }

  export type testcaseUncheckedCreateWithoutTestcaseresultInput = {
    TCID?: number
    EID: number
    Input?: string | null
    ExpectedOutput: string
    isHidden?: boolean | null
  }

  export type testcaseCreateOrConnectWithoutTestcaseresultInput = {
    where: testcaseWhereUniqueInput
    create: XOR<testcaseCreateWithoutTestcaseresultInput, testcaseUncheckedCreateWithoutTestcaseresultInput>
  }

  export type submissionUpsertWithoutTestcaseresultInput = {
    update: XOR<submissionUpdateWithoutTestcaseresultInput, submissionUncheckedUpdateWithoutTestcaseresultInput>
    create: XOR<submissionCreateWithoutTestcaseresultInput, submissionUncheckedCreateWithoutTestcaseresultInput>
    where?: submissionWhereInput
  }

  export type submissionUpdateToOneWithWhereWithoutTestcaseresultInput = {
    where?: submissionWhereInput
    data: XOR<submissionUpdateWithoutTestcaseresultInput, submissionUncheckedUpdateWithoutTestcaseresultInput>
  }

  export type submissionUpdateWithoutTestcaseresultInput = {
    Code?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Result?: NullableEnumsubmission_ResultFieldUpdateOperationsInput | $Enums.submission_Result | null
    isPublic?: NullableBoolFieldUpdateOperationsInput | boolean | null
    exercise?: exerciseUpdateOneRequiredWithoutSubmissionNestedInput
    user?: userUpdateOneRequiredWithoutSubmissionNestedInput
  }

  export type submissionUncheckedUpdateWithoutTestcaseresultInput = {
    SID?: IntFieldUpdateOperationsInput | number
    UID?: StringFieldUpdateOperationsInput | string
    EID?: IntFieldUpdateOperationsInput | number
    Code?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Result?: NullableEnumsubmission_ResultFieldUpdateOperationsInput | $Enums.submission_Result | null
    isPublic?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type testcaseUpsertWithoutTestcaseresultInput = {
    update: XOR<testcaseUpdateWithoutTestcaseresultInput, testcaseUncheckedUpdateWithoutTestcaseresultInput>
    create: XOR<testcaseCreateWithoutTestcaseresultInput, testcaseUncheckedCreateWithoutTestcaseresultInput>
    where?: testcaseWhereInput
  }

  export type testcaseUpdateToOneWithWhereWithoutTestcaseresultInput = {
    where?: testcaseWhereInput
    data: XOR<testcaseUpdateWithoutTestcaseresultInput, testcaseUncheckedUpdateWithoutTestcaseresultInput>
  }

  export type testcaseUpdateWithoutTestcaseresultInput = {
    Input?: NullableStringFieldUpdateOperationsInput | string | null
    ExpectedOutput?: StringFieldUpdateOperationsInput | string
    isHidden?: NullableBoolFieldUpdateOperationsInput | boolean | null
    exercise?: exerciseUpdateOneRequiredWithoutTestcaseNestedInput
  }

  export type testcaseUncheckedUpdateWithoutTestcaseresultInput = {
    TCID?: IntFieldUpdateOperationsInput | number
    EID?: IntFieldUpdateOperationsInput | number
    Input?: NullableStringFieldUpdateOperationsInput | string | null
    ExpectedOutput?: StringFieldUpdateOperationsInput | string
    isHidden?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type exerciseCreateWithoutTopicInput = {
    Name: string
    Slug: string
    Content: string
    Difficulty?: $Enums.exercise_Difficulty
    template?: string | null
    comment?: commentCreateNestedManyWithoutExerciseInput
    studyplanitem?: studyplanitemCreateNestedOneWithoutExerciseInput
    exerciselike?: exerciselikeCreateNestedManyWithoutExerciseInput
    exerciseprogress?: exerciseprogressCreateNestedManyWithoutExerciseInput
    listitem?: listitemCreateNestedManyWithoutExerciseInput
    submission?: submissionCreateNestedManyWithoutExerciseInput
    testcase?: testcaseCreateNestedManyWithoutExerciseInput
  }

  export type exerciseUncheckedCreateWithoutTopicInput = {
    EID?: number
    SPIID?: number | null
    Name: string
    Slug: string
    Content: string
    Difficulty?: $Enums.exercise_Difficulty
    template?: string | null
    comment?: commentUncheckedCreateNestedManyWithoutExerciseInput
    exerciselike?: exerciselikeUncheckedCreateNestedManyWithoutExerciseInput
    exerciseprogress?: exerciseprogressUncheckedCreateNestedManyWithoutExerciseInput
    listitem?: listitemUncheckedCreateNestedManyWithoutExerciseInput
    submission?: submissionUncheckedCreateNestedManyWithoutExerciseInput
    testcase?: testcaseUncheckedCreateNestedManyWithoutExerciseInput
  }

  export type exerciseCreateOrConnectWithoutTopicInput = {
    where: exerciseWhereUniqueInput
    create: XOR<exerciseCreateWithoutTopicInput, exerciseUncheckedCreateWithoutTopicInput>
  }

  export type exerciseCreateManyTopicInputEnvelope = {
    data: exerciseCreateManyTopicInput | exerciseCreateManyTopicInput[]
    skipDuplicates?: boolean
  }

  export type exerciseUpsertWithWhereUniqueWithoutTopicInput = {
    where: exerciseWhereUniqueInput
    update: XOR<exerciseUpdateWithoutTopicInput, exerciseUncheckedUpdateWithoutTopicInput>
    create: XOR<exerciseCreateWithoutTopicInput, exerciseUncheckedCreateWithoutTopicInput>
  }

  export type exerciseUpdateWithWhereUniqueWithoutTopicInput = {
    where: exerciseWhereUniqueInput
    data: XOR<exerciseUpdateWithoutTopicInput, exerciseUncheckedUpdateWithoutTopicInput>
  }

  export type exerciseUpdateManyWithWhereWithoutTopicInput = {
    where: exerciseScalarWhereInput
    data: XOR<exerciseUpdateManyMutationInput, exerciseUncheckedUpdateManyWithoutTopicInput>
  }

  export type exerciseScalarWhereInput = {
    AND?: exerciseScalarWhereInput | exerciseScalarWhereInput[]
    OR?: exerciseScalarWhereInput[]
    NOT?: exerciseScalarWhereInput | exerciseScalarWhereInput[]
    EID?: IntFilter<"exercise"> | number
    TpID?: IntNullableFilter<"exercise"> | number | null
    SPIID?: IntNullableFilter<"exercise"> | number | null
    Name?: StringFilter<"exercise"> | string
    Slug?: StringFilter<"exercise"> | string
    Content?: StringFilter<"exercise"> | string
    Difficulty?: Enumexercise_DifficultyFilter<"exercise"> | $Enums.exercise_Difficulty
    template?: StringNullableFilter<"exercise"> | string | null
  }

  export type commentCreateWithoutUserInput = {
    Content: string
    CreatedAt?: Date | string | null
    lesson?: lessonCreateNestedOneWithoutCommentInput
    exercise?: exerciseCreateNestedOneWithoutCommentInput
    commentlike?: commentlikeCreateNestedManyWithoutCommentInput
    notification?: notificationCreateNestedManyWithoutCommentInput
  }

  export type commentUncheckedCreateWithoutUserInput = {
    CoID?: number
    LID?: number | null
    EID?: number | null
    Content: string
    CreatedAt?: Date | string | null
    commentlike?: commentlikeUncheckedCreateNestedManyWithoutCommentInput
    notification?: notificationUncheckedCreateNestedManyWithoutCommentInput
  }

  export type commentCreateOrConnectWithoutUserInput = {
    where: commentWhereUniqueInput
    create: XOR<commentCreateWithoutUserInput, commentUncheckedCreateWithoutUserInput>
  }

  export type commentCreateManyUserInputEnvelope = {
    data: commentCreateManyUserInput | commentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type commentlikeCreateWithoutUserInput = {
    CreatedAt?: Date | string | null
    comment: commentCreateNestedOneWithoutCommentlikeInput
  }

  export type commentlikeUncheckedCreateWithoutUserInput = {
    CLID?: number
    CoID: number
    CreatedAt?: Date | string | null
  }

  export type commentlikeCreateOrConnectWithoutUserInput = {
    where: commentlikeWhereUniqueInput
    create: XOR<commentlikeCreateWithoutUserInput, commentlikeUncheckedCreateWithoutUserInput>
  }

  export type commentlikeCreateManyUserInputEnvelope = {
    data: commentlikeCreateManyUserInput | commentlikeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type exerciselikeCreateWithoutUserInput = {
    CreatedAt?: Date | string | null
    exercise: exerciseCreateNestedOneWithoutExerciselikeInput
  }

  export type exerciselikeUncheckedCreateWithoutUserInput = {
    ELID?: number
    EID: number
    CreatedAt?: Date | string | null
  }

  export type exerciselikeCreateOrConnectWithoutUserInput = {
    where: exerciselikeWhereUniqueInput
    create: XOR<exerciselikeCreateWithoutUserInput, exerciselikeUncheckedCreateWithoutUserInput>
  }

  export type exerciselikeCreateManyUserInputEnvelope = {
    data: exerciselikeCreateManyUserInput | exerciselikeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type exerciseprogressCreateWithoutUserInput = {
    Status?: $Enums.exerciseprogress_Status | null
    UpdatedAt?: Date | string | null
    exercise: exerciseCreateNestedOneWithoutExerciseprogressInput
  }

  export type exerciseprogressUncheckedCreateWithoutUserInput = {
    ID?: number
    EID: number
    Status?: $Enums.exerciseprogress_Status | null
    UpdatedAt?: Date | string | null
  }

  export type exerciseprogressCreateOrConnectWithoutUserInput = {
    where: exerciseprogressWhereUniqueInput
    create: XOR<exerciseprogressCreateWithoutUserInput, exerciseprogressUncheckedCreateWithoutUserInput>
  }

  export type exerciseprogressCreateManyUserInputEnvelope = {
    data: exerciseprogressCreateManyUserInput | exerciseprogressCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type friendshipCreateWithoutUser_friendship_requesterTouserInput = {
    status?: $Enums.friendship_status
    CreatedAt?: Date | string | null
    user_friendship_addresseeTouser: userCreateNestedOneWithoutFriendship_friendship_addresseeTouserInput
  }

  export type friendshipUncheckedCreateWithoutUser_friendship_requesterTouserInput = {
    FID?: number
    addressee: string
    status?: $Enums.friendship_status
    CreatedAt?: Date | string | null
  }

  export type friendshipCreateOrConnectWithoutUser_friendship_requesterTouserInput = {
    where: friendshipWhereUniqueInput
    create: XOR<friendshipCreateWithoutUser_friendship_requesterTouserInput, friendshipUncheckedCreateWithoutUser_friendship_requesterTouserInput>
  }

  export type friendshipCreateManyUser_friendship_requesterTouserInputEnvelope = {
    data: friendshipCreateManyUser_friendship_requesterTouserInput | friendshipCreateManyUser_friendship_requesterTouserInput[]
    skipDuplicates?: boolean
  }

  export type friendshipCreateWithoutUser_friendship_addresseeTouserInput = {
    status?: $Enums.friendship_status
    CreatedAt?: Date | string | null
    user_friendship_requesterTouser: userCreateNestedOneWithoutFriendship_friendship_requesterTouserInput
  }

  export type friendshipUncheckedCreateWithoutUser_friendship_addresseeTouserInput = {
    FID?: number
    requester: string
    status?: $Enums.friendship_status
    CreatedAt?: Date | string | null
  }

  export type friendshipCreateOrConnectWithoutUser_friendship_addresseeTouserInput = {
    where: friendshipWhereUniqueInput
    create: XOR<friendshipCreateWithoutUser_friendship_addresseeTouserInput, friendshipUncheckedCreateWithoutUser_friendship_addresseeTouserInput>
  }

  export type friendshipCreateManyUser_friendship_addresseeTouserInputEnvelope = {
    data: friendshipCreateManyUser_friendship_addresseeTouserInput | friendshipCreateManyUser_friendship_addresseeTouserInput[]
    skipDuplicates?: boolean
  }

  export type listCreateWithoutUserInput = {
    Name: string
    Description?: string | null
    CreatedAt?: Date | string | null
    listitem?: listitemCreateNestedManyWithoutListInput
  }

  export type listUncheckedCreateWithoutUserInput = {
    LID?: number
    Name: string
    Description?: string | null
    CreatedAt?: Date | string | null
    listitem?: listitemUncheckedCreateNestedManyWithoutListInput
  }

  export type listCreateOrConnectWithoutUserInput = {
    where: listWhereUniqueInput
    create: XOR<listCreateWithoutUserInput, listUncheckedCreateWithoutUserInput>
  }

  export type listCreateManyUserInputEnvelope = {
    data: listCreateManyUserInput | listCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type notificationCreateWithoutUser_notification_UIDTouserInput = {
    Type: $Enums.notification_Type
    Message: string
    CreatedAt?: Date | string | null
    isRead?: boolean | null
    user_notification_FromUserTouser: userCreateNestedOneWithoutNotification_notification_FromUserTouserInput
    comment?: commentCreateNestedOneWithoutNotificationInput
  }

  export type notificationUncheckedCreateWithoutUser_notification_UIDTouserInput = {
    NID?: number
    Type: $Enums.notification_Type
    FromUser: string
    Message: string
    CoID?: number | null
    CreatedAt?: Date | string | null
    isRead?: boolean | null
  }

  export type notificationCreateOrConnectWithoutUser_notification_UIDTouserInput = {
    where: notificationWhereUniqueInput
    create: XOR<notificationCreateWithoutUser_notification_UIDTouserInput, notificationUncheckedCreateWithoutUser_notification_UIDTouserInput>
  }

  export type notificationCreateManyUser_notification_UIDTouserInputEnvelope = {
    data: notificationCreateManyUser_notification_UIDTouserInput | notificationCreateManyUser_notification_UIDTouserInput[]
    skipDuplicates?: boolean
  }

  export type notificationCreateWithoutUser_notification_FromUserTouserInput = {
    Type: $Enums.notification_Type
    Message: string
    CreatedAt?: Date | string | null
    isRead?: boolean | null
    user_notification_UIDTouser: userCreateNestedOneWithoutNotification_notification_UIDTouserInput
    comment?: commentCreateNestedOneWithoutNotificationInput
  }

  export type notificationUncheckedCreateWithoutUser_notification_FromUserTouserInput = {
    NID?: number
    UID: string
    Type: $Enums.notification_Type
    Message: string
    CoID?: number | null
    CreatedAt?: Date | string | null
    isRead?: boolean | null
  }

  export type notificationCreateOrConnectWithoutUser_notification_FromUserTouserInput = {
    where: notificationWhereUniqueInput
    create: XOR<notificationCreateWithoutUser_notification_FromUserTouserInput, notificationUncheckedCreateWithoutUser_notification_FromUserTouserInput>
  }

  export type notificationCreateManyUser_notification_FromUserTouserInputEnvelope = {
    data: notificationCreateManyUser_notification_FromUserTouserInput | notificationCreateManyUser_notification_FromUserTouserInput[]
    skipDuplicates?: boolean
  }

  export type studyplanprogressCreateWithoutUserInput = {
    Status: $Enums.studyplanprogress_Status
    StartTime?: Date | string | null
    EndTime?: Date | string | null
    studyplan: studyplanCreateNestedOneWithoutStudyplanprogressInput
  }

  export type studyplanprogressUncheckedCreateWithoutUserInput = {
    SPPID?: number
    SPID: number
    Status: $Enums.studyplanprogress_Status
    StartTime?: Date | string | null
    EndTime?: Date | string | null
  }

  export type studyplanprogressCreateOrConnectWithoutUserInput = {
    where: studyplanprogressWhereUniqueInput
    create: XOR<studyplanprogressCreateWithoutUserInput, studyplanprogressUncheckedCreateWithoutUserInput>
  }

  export type studyplanprogressCreateManyUserInputEnvelope = {
    data: studyplanprogressCreateManyUserInput | studyplanprogressCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type submissionCreateWithoutUserInput = {
    Code?: string | null
    CreatedAt?: Date | string | null
    Result?: $Enums.submission_Result | null
    isPublic?: boolean | null
    exercise: exerciseCreateNestedOneWithoutSubmissionInput
    testcaseresult?: testcaseresultCreateNestedManyWithoutSubmissionInput
  }

  export type submissionUncheckedCreateWithoutUserInput = {
    SID?: number
    EID: number
    Code?: string | null
    CreatedAt?: Date | string | null
    Result?: $Enums.submission_Result | null
    isPublic?: boolean | null
    testcaseresult?: testcaseresultUncheckedCreateNestedManyWithoutSubmissionInput
  }

  export type submissionCreateOrConnectWithoutUserInput = {
    where: submissionWhereUniqueInput
    create: XOR<submissionCreateWithoutUserInput, submissionUncheckedCreateWithoutUserInput>
  }

  export type submissionCreateManyUserInputEnvelope = {
    data: submissionCreateManyUserInput | submissionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type commentUpsertWithWhereUniqueWithoutUserInput = {
    where: commentWhereUniqueInput
    update: XOR<commentUpdateWithoutUserInput, commentUncheckedUpdateWithoutUserInput>
    create: XOR<commentCreateWithoutUserInput, commentUncheckedCreateWithoutUserInput>
  }

  export type commentUpdateWithWhereUniqueWithoutUserInput = {
    where: commentWhereUniqueInput
    data: XOR<commentUpdateWithoutUserInput, commentUncheckedUpdateWithoutUserInput>
  }

  export type commentUpdateManyWithWhereWithoutUserInput = {
    where: commentScalarWhereInput
    data: XOR<commentUpdateManyMutationInput, commentUncheckedUpdateManyWithoutUserInput>
  }

  export type commentlikeUpsertWithWhereUniqueWithoutUserInput = {
    where: commentlikeWhereUniqueInput
    update: XOR<commentlikeUpdateWithoutUserInput, commentlikeUncheckedUpdateWithoutUserInput>
    create: XOR<commentlikeCreateWithoutUserInput, commentlikeUncheckedCreateWithoutUserInput>
  }

  export type commentlikeUpdateWithWhereUniqueWithoutUserInput = {
    where: commentlikeWhereUniqueInput
    data: XOR<commentlikeUpdateWithoutUserInput, commentlikeUncheckedUpdateWithoutUserInput>
  }

  export type commentlikeUpdateManyWithWhereWithoutUserInput = {
    where: commentlikeScalarWhereInput
    data: XOR<commentlikeUpdateManyMutationInput, commentlikeUncheckedUpdateManyWithoutUserInput>
  }

  export type commentlikeScalarWhereInput = {
    AND?: commentlikeScalarWhereInput | commentlikeScalarWhereInput[]
    OR?: commentlikeScalarWhereInput[]
    NOT?: commentlikeScalarWhereInput | commentlikeScalarWhereInput[]
    CLID?: IntFilter<"commentlike"> | number
    UID?: StringFilter<"commentlike"> | string
    CoID?: IntFilter<"commentlike"> | number
    CreatedAt?: DateTimeNullableFilter<"commentlike"> | Date | string | null
  }

  export type exerciselikeUpsertWithWhereUniqueWithoutUserInput = {
    where: exerciselikeWhereUniqueInput
    update: XOR<exerciselikeUpdateWithoutUserInput, exerciselikeUncheckedUpdateWithoutUserInput>
    create: XOR<exerciselikeCreateWithoutUserInput, exerciselikeUncheckedCreateWithoutUserInput>
  }

  export type exerciselikeUpdateWithWhereUniqueWithoutUserInput = {
    where: exerciselikeWhereUniqueInput
    data: XOR<exerciselikeUpdateWithoutUserInput, exerciselikeUncheckedUpdateWithoutUserInput>
  }

  export type exerciselikeUpdateManyWithWhereWithoutUserInput = {
    where: exerciselikeScalarWhereInput
    data: XOR<exerciselikeUpdateManyMutationInput, exerciselikeUncheckedUpdateManyWithoutUserInput>
  }

  export type exerciseprogressUpsertWithWhereUniqueWithoutUserInput = {
    where: exerciseprogressWhereUniqueInput
    update: XOR<exerciseprogressUpdateWithoutUserInput, exerciseprogressUncheckedUpdateWithoutUserInput>
    create: XOR<exerciseprogressCreateWithoutUserInput, exerciseprogressUncheckedCreateWithoutUserInput>
  }

  export type exerciseprogressUpdateWithWhereUniqueWithoutUserInput = {
    where: exerciseprogressWhereUniqueInput
    data: XOR<exerciseprogressUpdateWithoutUserInput, exerciseprogressUncheckedUpdateWithoutUserInput>
  }

  export type exerciseprogressUpdateManyWithWhereWithoutUserInput = {
    where: exerciseprogressScalarWhereInput
    data: XOR<exerciseprogressUpdateManyMutationInput, exerciseprogressUncheckedUpdateManyWithoutUserInput>
  }

  export type friendshipUpsertWithWhereUniqueWithoutUser_friendship_requesterTouserInput = {
    where: friendshipWhereUniqueInput
    update: XOR<friendshipUpdateWithoutUser_friendship_requesterTouserInput, friendshipUncheckedUpdateWithoutUser_friendship_requesterTouserInput>
    create: XOR<friendshipCreateWithoutUser_friendship_requesterTouserInput, friendshipUncheckedCreateWithoutUser_friendship_requesterTouserInput>
  }

  export type friendshipUpdateWithWhereUniqueWithoutUser_friendship_requesterTouserInput = {
    where: friendshipWhereUniqueInput
    data: XOR<friendshipUpdateWithoutUser_friendship_requesterTouserInput, friendshipUncheckedUpdateWithoutUser_friendship_requesterTouserInput>
  }

  export type friendshipUpdateManyWithWhereWithoutUser_friendship_requesterTouserInput = {
    where: friendshipScalarWhereInput
    data: XOR<friendshipUpdateManyMutationInput, friendshipUncheckedUpdateManyWithoutUser_friendship_requesterTouserInput>
  }

  export type friendshipScalarWhereInput = {
    AND?: friendshipScalarWhereInput | friendshipScalarWhereInput[]
    OR?: friendshipScalarWhereInput[]
    NOT?: friendshipScalarWhereInput | friendshipScalarWhereInput[]
    FID?: IntFilter<"friendship"> | number
    requester?: StringFilter<"friendship"> | string
    addressee?: StringFilter<"friendship"> | string
    status?: Enumfriendship_statusFilter<"friendship"> | $Enums.friendship_status
    CreatedAt?: DateTimeNullableFilter<"friendship"> | Date | string | null
  }

  export type friendshipUpsertWithWhereUniqueWithoutUser_friendship_addresseeTouserInput = {
    where: friendshipWhereUniqueInput
    update: XOR<friendshipUpdateWithoutUser_friendship_addresseeTouserInput, friendshipUncheckedUpdateWithoutUser_friendship_addresseeTouserInput>
    create: XOR<friendshipCreateWithoutUser_friendship_addresseeTouserInput, friendshipUncheckedCreateWithoutUser_friendship_addresseeTouserInput>
  }

  export type friendshipUpdateWithWhereUniqueWithoutUser_friendship_addresseeTouserInput = {
    where: friendshipWhereUniqueInput
    data: XOR<friendshipUpdateWithoutUser_friendship_addresseeTouserInput, friendshipUncheckedUpdateWithoutUser_friendship_addresseeTouserInput>
  }

  export type friendshipUpdateManyWithWhereWithoutUser_friendship_addresseeTouserInput = {
    where: friendshipScalarWhereInput
    data: XOR<friendshipUpdateManyMutationInput, friendshipUncheckedUpdateManyWithoutUser_friendship_addresseeTouserInput>
  }

  export type listUpsertWithWhereUniqueWithoutUserInput = {
    where: listWhereUniqueInput
    update: XOR<listUpdateWithoutUserInput, listUncheckedUpdateWithoutUserInput>
    create: XOR<listCreateWithoutUserInput, listUncheckedCreateWithoutUserInput>
  }

  export type listUpdateWithWhereUniqueWithoutUserInput = {
    where: listWhereUniqueInput
    data: XOR<listUpdateWithoutUserInput, listUncheckedUpdateWithoutUserInput>
  }

  export type listUpdateManyWithWhereWithoutUserInput = {
    where: listScalarWhereInput
    data: XOR<listUpdateManyMutationInput, listUncheckedUpdateManyWithoutUserInput>
  }

  export type listScalarWhereInput = {
    AND?: listScalarWhereInput | listScalarWhereInput[]
    OR?: listScalarWhereInput[]
    NOT?: listScalarWhereInput | listScalarWhereInput[]
    LID?: IntFilter<"list"> | number
    UID?: StringFilter<"list"> | string
    Name?: StringFilter<"list"> | string
    Description?: StringNullableFilter<"list"> | string | null
    CreatedAt?: DateTimeNullableFilter<"list"> | Date | string | null
  }

  export type notificationUpsertWithWhereUniqueWithoutUser_notification_UIDTouserInput = {
    where: notificationWhereUniqueInput
    update: XOR<notificationUpdateWithoutUser_notification_UIDTouserInput, notificationUncheckedUpdateWithoutUser_notification_UIDTouserInput>
    create: XOR<notificationCreateWithoutUser_notification_UIDTouserInput, notificationUncheckedCreateWithoutUser_notification_UIDTouserInput>
  }

  export type notificationUpdateWithWhereUniqueWithoutUser_notification_UIDTouserInput = {
    where: notificationWhereUniqueInput
    data: XOR<notificationUpdateWithoutUser_notification_UIDTouserInput, notificationUncheckedUpdateWithoutUser_notification_UIDTouserInput>
  }

  export type notificationUpdateManyWithWhereWithoutUser_notification_UIDTouserInput = {
    where: notificationScalarWhereInput
    data: XOR<notificationUpdateManyMutationInput, notificationUncheckedUpdateManyWithoutUser_notification_UIDTouserInput>
  }

  export type notificationScalarWhereInput = {
    AND?: notificationScalarWhereInput | notificationScalarWhereInput[]
    OR?: notificationScalarWhereInput[]
    NOT?: notificationScalarWhereInput | notificationScalarWhereInput[]
    NID?: IntFilter<"notification"> | number
    UID?: StringFilter<"notification"> | string
    Type?: Enumnotification_TypeFilter<"notification"> | $Enums.notification_Type
    FromUser?: StringFilter<"notification"> | string
    Message?: StringFilter<"notification"> | string
    CoID?: IntNullableFilter<"notification"> | number | null
    CreatedAt?: DateTimeNullableFilter<"notification"> | Date | string | null
    isRead?: BoolNullableFilter<"notification"> | boolean | null
  }

  export type notificationUpsertWithWhereUniqueWithoutUser_notification_FromUserTouserInput = {
    where: notificationWhereUniqueInput
    update: XOR<notificationUpdateWithoutUser_notification_FromUserTouserInput, notificationUncheckedUpdateWithoutUser_notification_FromUserTouserInput>
    create: XOR<notificationCreateWithoutUser_notification_FromUserTouserInput, notificationUncheckedCreateWithoutUser_notification_FromUserTouserInput>
  }

  export type notificationUpdateWithWhereUniqueWithoutUser_notification_FromUserTouserInput = {
    where: notificationWhereUniqueInput
    data: XOR<notificationUpdateWithoutUser_notification_FromUserTouserInput, notificationUncheckedUpdateWithoutUser_notification_FromUserTouserInput>
  }

  export type notificationUpdateManyWithWhereWithoutUser_notification_FromUserTouserInput = {
    where: notificationScalarWhereInput
    data: XOR<notificationUpdateManyMutationInput, notificationUncheckedUpdateManyWithoutUser_notification_FromUserTouserInput>
  }

  export type studyplanprogressUpsertWithWhereUniqueWithoutUserInput = {
    where: studyplanprogressWhereUniqueInput
    update: XOR<studyplanprogressUpdateWithoutUserInput, studyplanprogressUncheckedUpdateWithoutUserInput>
    create: XOR<studyplanprogressCreateWithoutUserInput, studyplanprogressUncheckedCreateWithoutUserInput>
  }

  export type studyplanprogressUpdateWithWhereUniqueWithoutUserInput = {
    where: studyplanprogressWhereUniqueInput
    data: XOR<studyplanprogressUpdateWithoutUserInput, studyplanprogressUncheckedUpdateWithoutUserInput>
  }

  export type studyplanprogressUpdateManyWithWhereWithoutUserInput = {
    where: studyplanprogressScalarWhereInput
    data: XOR<studyplanprogressUpdateManyMutationInput, studyplanprogressUncheckedUpdateManyWithoutUserInput>
  }

  export type studyplanprogressScalarWhereInput = {
    AND?: studyplanprogressScalarWhereInput | studyplanprogressScalarWhereInput[]
    OR?: studyplanprogressScalarWhereInput[]
    NOT?: studyplanprogressScalarWhereInput | studyplanprogressScalarWhereInput[]
    SPPID?: IntFilter<"studyplanprogress"> | number
    SPID?: IntFilter<"studyplanprogress"> | number
    UID?: StringFilter<"studyplanprogress"> | string
    Status?: Enumstudyplanprogress_StatusFilter<"studyplanprogress"> | $Enums.studyplanprogress_Status
    StartTime?: DateTimeNullableFilter<"studyplanprogress"> | Date | string | null
    EndTime?: DateTimeNullableFilter<"studyplanprogress"> | Date | string | null
  }

  export type submissionUpsertWithWhereUniqueWithoutUserInput = {
    where: submissionWhereUniqueInput
    update: XOR<submissionUpdateWithoutUserInput, submissionUncheckedUpdateWithoutUserInput>
    create: XOR<submissionCreateWithoutUserInput, submissionUncheckedCreateWithoutUserInput>
  }

  export type submissionUpdateWithWhereUniqueWithoutUserInput = {
    where: submissionWhereUniqueInput
    data: XOR<submissionUpdateWithoutUserInput, submissionUncheckedUpdateWithoutUserInput>
  }

  export type submissionUpdateManyWithWhereWithoutUserInput = {
    where: submissionScalarWhereInput
    data: XOR<submissionUpdateManyMutationInput, submissionUncheckedUpdateManyWithoutUserInput>
  }

  export type userCreateWithoutFriendship_friendship_requesterTouserInput = {
    UID?: string
    Username: string
    Email: string
    Password: string
    Role?: $Enums.user_Role
    CreatedAt?: Date | string | null
    Image?: string | null
    comment?: commentCreateNestedManyWithoutUserInput
    commentlike?: commentlikeCreateNestedManyWithoutUserInput
    exerciselike?: exerciselikeCreateNestedManyWithoutUserInput
    exerciseprogress?: exerciseprogressCreateNestedManyWithoutUserInput
    friendship_friendship_addresseeTouser?: friendshipCreateNestedManyWithoutUser_friendship_addresseeTouserInput
    list?: listCreateNestedManyWithoutUserInput
    notification_notification_UIDTouser?: notificationCreateNestedManyWithoutUser_notification_UIDTouserInput
    notification_notification_FromUserTouser?: notificationCreateNestedManyWithoutUser_notification_FromUserTouserInput
    studyplanprogress?: studyplanprogressCreateNestedManyWithoutUserInput
    submission?: submissionCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutFriendship_friendship_requesterTouserInput = {
    UID?: string
    Username: string
    Email: string
    Password: string
    Role?: $Enums.user_Role
    CreatedAt?: Date | string | null
    Image?: string | null
    comment?: commentUncheckedCreateNestedManyWithoutUserInput
    commentlike?: commentlikeUncheckedCreateNestedManyWithoutUserInput
    exerciselike?: exerciselikeUncheckedCreateNestedManyWithoutUserInput
    exerciseprogress?: exerciseprogressUncheckedCreateNestedManyWithoutUserInput
    friendship_friendship_addresseeTouser?: friendshipUncheckedCreateNestedManyWithoutUser_friendship_addresseeTouserInput
    list?: listUncheckedCreateNestedManyWithoutUserInput
    notification_notification_UIDTouser?: notificationUncheckedCreateNestedManyWithoutUser_notification_UIDTouserInput
    notification_notification_FromUserTouser?: notificationUncheckedCreateNestedManyWithoutUser_notification_FromUserTouserInput
    studyplanprogress?: studyplanprogressUncheckedCreateNestedManyWithoutUserInput
    submission?: submissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutFriendship_friendship_requesterTouserInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutFriendship_friendship_requesterTouserInput, userUncheckedCreateWithoutFriendship_friendship_requesterTouserInput>
  }

  export type userCreateWithoutFriendship_friendship_addresseeTouserInput = {
    UID?: string
    Username: string
    Email: string
    Password: string
    Role?: $Enums.user_Role
    CreatedAt?: Date | string | null
    Image?: string | null
    comment?: commentCreateNestedManyWithoutUserInput
    commentlike?: commentlikeCreateNestedManyWithoutUserInput
    exerciselike?: exerciselikeCreateNestedManyWithoutUserInput
    exerciseprogress?: exerciseprogressCreateNestedManyWithoutUserInput
    friendship_friendship_requesterTouser?: friendshipCreateNestedManyWithoutUser_friendship_requesterTouserInput
    list?: listCreateNestedManyWithoutUserInput
    notification_notification_UIDTouser?: notificationCreateNestedManyWithoutUser_notification_UIDTouserInput
    notification_notification_FromUserTouser?: notificationCreateNestedManyWithoutUser_notification_FromUserTouserInput
    studyplanprogress?: studyplanprogressCreateNestedManyWithoutUserInput
    submission?: submissionCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutFriendship_friendship_addresseeTouserInput = {
    UID?: string
    Username: string
    Email: string
    Password: string
    Role?: $Enums.user_Role
    CreatedAt?: Date | string | null
    Image?: string | null
    comment?: commentUncheckedCreateNestedManyWithoutUserInput
    commentlike?: commentlikeUncheckedCreateNestedManyWithoutUserInput
    exerciselike?: exerciselikeUncheckedCreateNestedManyWithoutUserInput
    exerciseprogress?: exerciseprogressUncheckedCreateNestedManyWithoutUserInput
    friendship_friendship_requesterTouser?: friendshipUncheckedCreateNestedManyWithoutUser_friendship_requesterTouserInput
    list?: listUncheckedCreateNestedManyWithoutUserInput
    notification_notification_UIDTouser?: notificationUncheckedCreateNestedManyWithoutUser_notification_UIDTouserInput
    notification_notification_FromUserTouser?: notificationUncheckedCreateNestedManyWithoutUser_notification_FromUserTouserInput
    studyplanprogress?: studyplanprogressUncheckedCreateNestedManyWithoutUserInput
    submission?: submissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutFriendship_friendship_addresseeTouserInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutFriendship_friendship_addresseeTouserInput, userUncheckedCreateWithoutFriendship_friendship_addresseeTouserInput>
  }

  export type userUpsertWithoutFriendship_friendship_requesterTouserInput = {
    update: XOR<userUpdateWithoutFriendship_friendship_requesterTouserInput, userUncheckedUpdateWithoutFriendship_friendship_requesterTouserInput>
    create: XOR<userCreateWithoutFriendship_friendship_requesterTouserInput, userUncheckedCreateWithoutFriendship_friendship_requesterTouserInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutFriendship_friendship_requesterTouserInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutFriendship_friendship_requesterTouserInput, userUncheckedUpdateWithoutFriendship_friendship_requesterTouserInput>
  }

  export type userUpdateWithoutFriendship_friendship_requesterTouserInput = {
    UID?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: Enumuser_RoleFieldUpdateOperationsInput | $Enums.user_Role
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Image?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: commentUpdateManyWithoutUserNestedInput
    commentlike?: commentlikeUpdateManyWithoutUserNestedInput
    exerciselike?: exerciselikeUpdateManyWithoutUserNestedInput
    exerciseprogress?: exerciseprogressUpdateManyWithoutUserNestedInput
    friendship_friendship_addresseeTouser?: friendshipUpdateManyWithoutUser_friendship_addresseeTouserNestedInput
    list?: listUpdateManyWithoutUserNestedInput
    notification_notification_UIDTouser?: notificationUpdateManyWithoutUser_notification_UIDTouserNestedInput
    notification_notification_FromUserTouser?: notificationUpdateManyWithoutUser_notification_FromUserTouserNestedInput
    studyplanprogress?: studyplanprogressUpdateManyWithoutUserNestedInput
    submission?: submissionUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutFriendship_friendship_requesterTouserInput = {
    UID?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: Enumuser_RoleFieldUpdateOperationsInput | $Enums.user_Role
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Image?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: commentUncheckedUpdateManyWithoutUserNestedInput
    commentlike?: commentlikeUncheckedUpdateManyWithoutUserNestedInput
    exerciselike?: exerciselikeUncheckedUpdateManyWithoutUserNestedInput
    exerciseprogress?: exerciseprogressUncheckedUpdateManyWithoutUserNestedInput
    friendship_friendship_addresseeTouser?: friendshipUncheckedUpdateManyWithoutUser_friendship_addresseeTouserNestedInput
    list?: listUncheckedUpdateManyWithoutUserNestedInput
    notification_notification_UIDTouser?: notificationUncheckedUpdateManyWithoutUser_notification_UIDTouserNestedInput
    notification_notification_FromUserTouser?: notificationUncheckedUpdateManyWithoutUser_notification_FromUserTouserNestedInput
    studyplanprogress?: studyplanprogressUncheckedUpdateManyWithoutUserNestedInput
    submission?: submissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type userUpsertWithoutFriendship_friendship_addresseeTouserInput = {
    update: XOR<userUpdateWithoutFriendship_friendship_addresseeTouserInput, userUncheckedUpdateWithoutFriendship_friendship_addresseeTouserInput>
    create: XOR<userCreateWithoutFriendship_friendship_addresseeTouserInput, userUncheckedCreateWithoutFriendship_friendship_addresseeTouserInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutFriendship_friendship_addresseeTouserInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutFriendship_friendship_addresseeTouserInput, userUncheckedUpdateWithoutFriendship_friendship_addresseeTouserInput>
  }

  export type userUpdateWithoutFriendship_friendship_addresseeTouserInput = {
    UID?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: Enumuser_RoleFieldUpdateOperationsInput | $Enums.user_Role
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Image?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: commentUpdateManyWithoutUserNestedInput
    commentlike?: commentlikeUpdateManyWithoutUserNestedInput
    exerciselike?: exerciselikeUpdateManyWithoutUserNestedInput
    exerciseprogress?: exerciseprogressUpdateManyWithoutUserNestedInput
    friendship_friendship_requesterTouser?: friendshipUpdateManyWithoutUser_friendship_requesterTouserNestedInput
    list?: listUpdateManyWithoutUserNestedInput
    notification_notification_UIDTouser?: notificationUpdateManyWithoutUser_notification_UIDTouserNestedInput
    notification_notification_FromUserTouser?: notificationUpdateManyWithoutUser_notification_FromUserTouserNestedInput
    studyplanprogress?: studyplanprogressUpdateManyWithoutUserNestedInput
    submission?: submissionUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutFriendship_friendship_addresseeTouserInput = {
    UID?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: Enumuser_RoleFieldUpdateOperationsInput | $Enums.user_Role
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Image?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: commentUncheckedUpdateManyWithoutUserNestedInput
    commentlike?: commentlikeUncheckedUpdateManyWithoutUserNestedInput
    exerciselike?: exerciselikeUncheckedUpdateManyWithoutUserNestedInput
    exerciseprogress?: exerciseprogressUncheckedUpdateManyWithoutUserNestedInput
    friendship_friendship_requesterTouser?: friendshipUncheckedUpdateManyWithoutUser_friendship_requesterTouserNestedInput
    list?: listUncheckedUpdateManyWithoutUserNestedInput
    notification_notification_UIDTouser?: notificationUncheckedUpdateManyWithoutUser_notification_UIDTouserNestedInput
    notification_notification_FromUserTouser?: notificationUncheckedUpdateManyWithoutUser_notification_FromUserTouserNestedInput
    studyplanprogress?: studyplanprogressUncheckedUpdateManyWithoutUserNestedInput
    submission?: submissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type lessonCreateWithoutChapterInput = {
    LessonIndex: number
    Title: string
    Slug: string
    comment?: commentCreateNestedManyWithoutLessonInput
  }

  export type lessonUncheckedCreateWithoutChapterInput = {
    LID?: number
    LessonIndex: number
    Title: string
    Slug: string
    comment?: commentUncheckedCreateNestedManyWithoutLessonInput
  }

  export type lessonCreateOrConnectWithoutChapterInput = {
    where: lessonWhereUniqueInput
    create: XOR<lessonCreateWithoutChapterInput, lessonUncheckedCreateWithoutChapterInput>
  }

  export type lessonCreateManyChapterInputEnvelope = {
    data: lessonCreateManyChapterInput | lessonCreateManyChapterInput[]
    skipDuplicates?: boolean
  }

  export type lessonUpsertWithWhereUniqueWithoutChapterInput = {
    where: lessonWhereUniqueInput
    update: XOR<lessonUpdateWithoutChapterInput, lessonUncheckedUpdateWithoutChapterInput>
    create: XOR<lessonCreateWithoutChapterInput, lessonUncheckedCreateWithoutChapterInput>
  }

  export type lessonUpdateWithWhereUniqueWithoutChapterInput = {
    where: lessonWhereUniqueInput
    data: XOR<lessonUpdateWithoutChapterInput, lessonUncheckedUpdateWithoutChapterInput>
  }

  export type lessonUpdateManyWithWhereWithoutChapterInput = {
    where: lessonScalarWhereInput
    data: XOR<lessonUpdateManyMutationInput, lessonUncheckedUpdateManyWithoutChapterInput>
  }

  export type lessonScalarWhereInput = {
    AND?: lessonScalarWhereInput | lessonScalarWhereInput[]
    OR?: lessonScalarWhereInput[]
    NOT?: lessonScalarWhereInput | lessonScalarWhereInput[]
    LID?: IntFilter<"lesson"> | number
    CID?: IntFilter<"lesson"> | number
    LessonIndex?: IntFilter<"lesson"> | number
    Title?: StringFilter<"lesson"> | string
    Slug?: StringFilter<"lesson"> | string
  }

  export type userCreateWithoutCommentInput = {
    UID?: string
    Username: string
    Email: string
    Password: string
    Role?: $Enums.user_Role
    CreatedAt?: Date | string | null
    Image?: string | null
    commentlike?: commentlikeCreateNestedManyWithoutUserInput
    exerciselike?: exerciselikeCreateNestedManyWithoutUserInput
    exerciseprogress?: exerciseprogressCreateNestedManyWithoutUserInput
    friendship_friendship_requesterTouser?: friendshipCreateNestedManyWithoutUser_friendship_requesterTouserInput
    friendship_friendship_addresseeTouser?: friendshipCreateNestedManyWithoutUser_friendship_addresseeTouserInput
    list?: listCreateNestedManyWithoutUserInput
    notification_notification_UIDTouser?: notificationCreateNestedManyWithoutUser_notification_UIDTouserInput
    notification_notification_FromUserTouser?: notificationCreateNestedManyWithoutUser_notification_FromUserTouserInput
    studyplanprogress?: studyplanprogressCreateNestedManyWithoutUserInput
    submission?: submissionCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutCommentInput = {
    UID?: string
    Username: string
    Email: string
    Password: string
    Role?: $Enums.user_Role
    CreatedAt?: Date | string | null
    Image?: string | null
    commentlike?: commentlikeUncheckedCreateNestedManyWithoutUserInput
    exerciselike?: exerciselikeUncheckedCreateNestedManyWithoutUserInput
    exerciseprogress?: exerciseprogressUncheckedCreateNestedManyWithoutUserInput
    friendship_friendship_requesterTouser?: friendshipUncheckedCreateNestedManyWithoutUser_friendship_requesterTouserInput
    friendship_friendship_addresseeTouser?: friendshipUncheckedCreateNestedManyWithoutUser_friendship_addresseeTouserInput
    list?: listUncheckedCreateNestedManyWithoutUserInput
    notification_notification_UIDTouser?: notificationUncheckedCreateNestedManyWithoutUser_notification_UIDTouserInput
    notification_notification_FromUserTouser?: notificationUncheckedCreateNestedManyWithoutUser_notification_FromUserTouserInput
    studyplanprogress?: studyplanprogressUncheckedCreateNestedManyWithoutUserInput
    submission?: submissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutCommentInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutCommentInput, userUncheckedCreateWithoutCommentInput>
  }

  export type lessonCreateWithoutCommentInput = {
    LessonIndex: number
    Title: string
    Slug: string
    chapter: chapterCreateNestedOneWithoutLessonInput
  }

  export type lessonUncheckedCreateWithoutCommentInput = {
    LID?: number
    CID: number
    LessonIndex: number
    Title: string
    Slug: string
  }

  export type lessonCreateOrConnectWithoutCommentInput = {
    where: lessonWhereUniqueInput
    create: XOR<lessonCreateWithoutCommentInput, lessonUncheckedCreateWithoutCommentInput>
  }

  export type exerciseCreateWithoutCommentInput = {
    Name: string
    Slug: string
    Content: string
    Difficulty?: $Enums.exercise_Difficulty
    template?: string | null
    topic?: topicCreateNestedOneWithoutExerciseInput
    studyplanitem?: studyplanitemCreateNestedOneWithoutExerciseInput
    exerciselike?: exerciselikeCreateNestedManyWithoutExerciseInput
    exerciseprogress?: exerciseprogressCreateNestedManyWithoutExerciseInput
    listitem?: listitemCreateNestedManyWithoutExerciseInput
    submission?: submissionCreateNestedManyWithoutExerciseInput
    testcase?: testcaseCreateNestedManyWithoutExerciseInput
  }

  export type exerciseUncheckedCreateWithoutCommentInput = {
    EID?: number
    TpID?: number | null
    SPIID?: number | null
    Name: string
    Slug: string
    Content: string
    Difficulty?: $Enums.exercise_Difficulty
    template?: string | null
    exerciselike?: exerciselikeUncheckedCreateNestedManyWithoutExerciseInput
    exerciseprogress?: exerciseprogressUncheckedCreateNestedManyWithoutExerciseInput
    listitem?: listitemUncheckedCreateNestedManyWithoutExerciseInput
    submission?: submissionUncheckedCreateNestedManyWithoutExerciseInput
    testcase?: testcaseUncheckedCreateNestedManyWithoutExerciseInput
  }

  export type exerciseCreateOrConnectWithoutCommentInput = {
    where: exerciseWhereUniqueInput
    create: XOR<exerciseCreateWithoutCommentInput, exerciseUncheckedCreateWithoutCommentInput>
  }

  export type commentlikeCreateWithoutCommentInput = {
    CreatedAt?: Date | string | null
    user: userCreateNestedOneWithoutCommentlikeInput
  }

  export type commentlikeUncheckedCreateWithoutCommentInput = {
    CLID?: number
    UID: string
    CreatedAt?: Date | string | null
  }

  export type commentlikeCreateOrConnectWithoutCommentInput = {
    where: commentlikeWhereUniqueInput
    create: XOR<commentlikeCreateWithoutCommentInput, commentlikeUncheckedCreateWithoutCommentInput>
  }

  export type commentlikeCreateManyCommentInputEnvelope = {
    data: commentlikeCreateManyCommentInput | commentlikeCreateManyCommentInput[]
    skipDuplicates?: boolean
  }

  export type notificationCreateWithoutCommentInput = {
    Type: $Enums.notification_Type
    Message: string
    CreatedAt?: Date | string | null
    isRead?: boolean | null
    user_notification_UIDTouser: userCreateNestedOneWithoutNotification_notification_UIDTouserInput
    user_notification_FromUserTouser: userCreateNestedOneWithoutNotification_notification_FromUserTouserInput
  }

  export type notificationUncheckedCreateWithoutCommentInput = {
    NID?: number
    UID: string
    Type: $Enums.notification_Type
    FromUser: string
    Message: string
    CreatedAt?: Date | string | null
    isRead?: boolean | null
  }

  export type notificationCreateOrConnectWithoutCommentInput = {
    where: notificationWhereUniqueInput
    create: XOR<notificationCreateWithoutCommentInput, notificationUncheckedCreateWithoutCommentInput>
  }

  export type notificationCreateManyCommentInputEnvelope = {
    data: notificationCreateManyCommentInput | notificationCreateManyCommentInput[]
    skipDuplicates?: boolean
  }

  export type userUpsertWithoutCommentInput = {
    update: XOR<userUpdateWithoutCommentInput, userUncheckedUpdateWithoutCommentInput>
    create: XOR<userCreateWithoutCommentInput, userUncheckedCreateWithoutCommentInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutCommentInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutCommentInput, userUncheckedUpdateWithoutCommentInput>
  }

  export type userUpdateWithoutCommentInput = {
    UID?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: Enumuser_RoleFieldUpdateOperationsInput | $Enums.user_Role
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Image?: NullableStringFieldUpdateOperationsInput | string | null
    commentlike?: commentlikeUpdateManyWithoutUserNestedInput
    exerciselike?: exerciselikeUpdateManyWithoutUserNestedInput
    exerciseprogress?: exerciseprogressUpdateManyWithoutUserNestedInput
    friendship_friendship_requesterTouser?: friendshipUpdateManyWithoutUser_friendship_requesterTouserNestedInput
    friendship_friendship_addresseeTouser?: friendshipUpdateManyWithoutUser_friendship_addresseeTouserNestedInput
    list?: listUpdateManyWithoutUserNestedInput
    notification_notification_UIDTouser?: notificationUpdateManyWithoutUser_notification_UIDTouserNestedInput
    notification_notification_FromUserTouser?: notificationUpdateManyWithoutUser_notification_FromUserTouserNestedInput
    studyplanprogress?: studyplanprogressUpdateManyWithoutUserNestedInput
    submission?: submissionUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutCommentInput = {
    UID?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: Enumuser_RoleFieldUpdateOperationsInput | $Enums.user_Role
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Image?: NullableStringFieldUpdateOperationsInput | string | null
    commentlike?: commentlikeUncheckedUpdateManyWithoutUserNestedInput
    exerciselike?: exerciselikeUncheckedUpdateManyWithoutUserNestedInput
    exerciseprogress?: exerciseprogressUncheckedUpdateManyWithoutUserNestedInput
    friendship_friendship_requesterTouser?: friendshipUncheckedUpdateManyWithoutUser_friendship_requesterTouserNestedInput
    friendship_friendship_addresseeTouser?: friendshipUncheckedUpdateManyWithoutUser_friendship_addresseeTouserNestedInput
    list?: listUncheckedUpdateManyWithoutUserNestedInput
    notification_notification_UIDTouser?: notificationUncheckedUpdateManyWithoutUser_notification_UIDTouserNestedInput
    notification_notification_FromUserTouser?: notificationUncheckedUpdateManyWithoutUser_notification_FromUserTouserNestedInput
    studyplanprogress?: studyplanprogressUncheckedUpdateManyWithoutUserNestedInput
    submission?: submissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type lessonUpsertWithoutCommentInput = {
    update: XOR<lessonUpdateWithoutCommentInput, lessonUncheckedUpdateWithoutCommentInput>
    create: XOR<lessonCreateWithoutCommentInput, lessonUncheckedCreateWithoutCommentInput>
    where?: lessonWhereInput
  }

  export type lessonUpdateToOneWithWhereWithoutCommentInput = {
    where?: lessonWhereInput
    data: XOR<lessonUpdateWithoutCommentInput, lessonUncheckedUpdateWithoutCommentInput>
  }

  export type lessonUpdateWithoutCommentInput = {
    LessonIndex?: IntFieldUpdateOperationsInput | number
    Title?: StringFieldUpdateOperationsInput | string
    Slug?: StringFieldUpdateOperationsInput | string
    chapter?: chapterUpdateOneRequiredWithoutLessonNestedInput
  }

  export type lessonUncheckedUpdateWithoutCommentInput = {
    LID?: IntFieldUpdateOperationsInput | number
    CID?: IntFieldUpdateOperationsInput | number
    LessonIndex?: IntFieldUpdateOperationsInput | number
    Title?: StringFieldUpdateOperationsInput | string
    Slug?: StringFieldUpdateOperationsInput | string
  }

  export type exerciseUpsertWithoutCommentInput = {
    update: XOR<exerciseUpdateWithoutCommentInput, exerciseUncheckedUpdateWithoutCommentInput>
    create: XOR<exerciseCreateWithoutCommentInput, exerciseUncheckedCreateWithoutCommentInput>
    where?: exerciseWhereInput
  }

  export type exerciseUpdateToOneWithWhereWithoutCommentInput = {
    where?: exerciseWhereInput
    data: XOR<exerciseUpdateWithoutCommentInput, exerciseUncheckedUpdateWithoutCommentInput>
  }

  export type exerciseUpdateWithoutCommentInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Slug?: StringFieldUpdateOperationsInput | string
    Content?: StringFieldUpdateOperationsInput | string
    Difficulty?: Enumexercise_DifficultyFieldUpdateOperationsInput | $Enums.exercise_Difficulty
    template?: NullableStringFieldUpdateOperationsInput | string | null
    topic?: topicUpdateOneWithoutExerciseNestedInput
    studyplanitem?: studyplanitemUpdateOneWithoutExerciseNestedInput
    exerciselike?: exerciselikeUpdateManyWithoutExerciseNestedInput
    exerciseprogress?: exerciseprogressUpdateManyWithoutExerciseNestedInput
    listitem?: listitemUpdateManyWithoutExerciseNestedInput
    submission?: submissionUpdateManyWithoutExerciseNestedInput
    testcase?: testcaseUpdateManyWithoutExerciseNestedInput
  }

  export type exerciseUncheckedUpdateWithoutCommentInput = {
    EID?: IntFieldUpdateOperationsInput | number
    TpID?: NullableIntFieldUpdateOperationsInput | number | null
    SPIID?: NullableIntFieldUpdateOperationsInput | number | null
    Name?: StringFieldUpdateOperationsInput | string
    Slug?: StringFieldUpdateOperationsInput | string
    Content?: StringFieldUpdateOperationsInput | string
    Difficulty?: Enumexercise_DifficultyFieldUpdateOperationsInput | $Enums.exercise_Difficulty
    template?: NullableStringFieldUpdateOperationsInput | string | null
    exerciselike?: exerciselikeUncheckedUpdateManyWithoutExerciseNestedInput
    exerciseprogress?: exerciseprogressUncheckedUpdateManyWithoutExerciseNestedInput
    listitem?: listitemUncheckedUpdateManyWithoutExerciseNestedInput
    submission?: submissionUncheckedUpdateManyWithoutExerciseNestedInput
    testcase?: testcaseUncheckedUpdateManyWithoutExerciseNestedInput
  }

  export type commentlikeUpsertWithWhereUniqueWithoutCommentInput = {
    where: commentlikeWhereUniqueInput
    update: XOR<commentlikeUpdateWithoutCommentInput, commentlikeUncheckedUpdateWithoutCommentInput>
    create: XOR<commentlikeCreateWithoutCommentInput, commentlikeUncheckedCreateWithoutCommentInput>
  }

  export type commentlikeUpdateWithWhereUniqueWithoutCommentInput = {
    where: commentlikeWhereUniqueInput
    data: XOR<commentlikeUpdateWithoutCommentInput, commentlikeUncheckedUpdateWithoutCommentInput>
  }

  export type commentlikeUpdateManyWithWhereWithoutCommentInput = {
    where: commentlikeScalarWhereInput
    data: XOR<commentlikeUpdateManyMutationInput, commentlikeUncheckedUpdateManyWithoutCommentInput>
  }

  export type notificationUpsertWithWhereUniqueWithoutCommentInput = {
    where: notificationWhereUniqueInput
    update: XOR<notificationUpdateWithoutCommentInput, notificationUncheckedUpdateWithoutCommentInput>
    create: XOR<notificationCreateWithoutCommentInput, notificationUncheckedCreateWithoutCommentInput>
  }

  export type notificationUpdateWithWhereUniqueWithoutCommentInput = {
    where: notificationWhereUniqueInput
    data: XOR<notificationUpdateWithoutCommentInput, notificationUncheckedUpdateWithoutCommentInput>
  }

  export type notificationUpdateManyWithWhereWithoutCommentInput = {
    where: notificationScalarWhereInput
    data: XOR<notificationUpdateManyMutationInput, notificationUncheckedUpdateManyWithoutCommentInput>
  }

  export type userCreateWithoutCommentlikeInput = {
    UID?: string
    Username: string
    Email: string
    Password: string
    Role?: $Enums.user_Role
    CreatedAt?: Date | string | null
    Image?: string | null
    comment?: commentCreateNestedManyWithoutUserInput
    exerciselike?: exerciselikeCreateNestedManyWithoutUserInput
    exerciseprogress?: exerciseprogressCreateNestedManyWithoutUserInput
    friendship_friendship_requesterTouser?: friendshipCreateNestedManyWithoutUser_friendship_requesterTouserInput
    friendship_friendship_addresseeTouser?: friendshipCreateNestedManyWithoutUser_friendship_addresseeTouserInput
    list?: listCreateNestedManyWithoutUserInput
    notification_notification_UIDTouser?: notificationCreateNestedManyWithoutUser_notification_UIDTouserInput
    notification_notification_FromUserTouser?: notificationCreateNestedManyWithoutUser_notification_FromUserTouserInput
    studyplanprogress?: studyplanprogressCreateNestedManyWithoutUserInput
    submission?: submissionCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutCommentlikeInput = {
    UID?: string
    Username: string
    Email: string
    Password: string
    Role?: $Enums.user_Role
    CreatedAt?: Date | string | null
    Image?: string | null
    comment?: commentUncheckedCreateNestedManyWithoutUserInput
    exerciselike?: exerciselikeUncheckedCreateNestedManyWithoutUserInput
    exerciseprogress?: exerciseprogressUncheckedCreateNestedManyWithoutUserInput
    friendship_friendship_requesterTouser?: friendshipUncheckedCreateNestedManyWithoutUser_friendship_requesterTouserInput
    friendship_friendship_addresseeTouser?: friendshipUncheckedCreateNestedManyWithoutUser_friendship_addresseeTouserInput
    list?: listUncheckedCreateNestedManyWithoutUserInput
    notification_notification_UIDTouser?: notificationUncheckedCreateNestedManyWithoutUser_notification_UIDTouserInput
    notification_notification_FromUserTouser?: notificationUncheckedCreateNestedManyWithoutUser_notification_FromUserTouserInput
    studyplanprogress?: studyplanprogressUncheckedCreateNestedManyWithoutUserInput
    submission?: submissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutCommentlikeInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutCommentlikeInput, userUncheckedCreateWithoutCommentlikeInput>
  }

  export type commentCreateWithoutCommentlikeInput = {
    Content: string
    CreatedAt?: Date | string | null
    user: userCreateNestedOneWithoutCommentInput
    lesson?: lessonCreateNestedOneWithoutCommentInput
    exercise?: exerciseCreateNestedOneWithoutCommentInput
    notification?: notificationCreateNestedManyWithoutCommentInput
  }

  export type commentUncheckedCreateWithoutCommentlikeInput = {
    CoID?: number
    UID: string
    LID?: number | null
    EID?: number | null
    Content: string
    CreatedAt?: Date | string | null
    notification?: notificationUncheckedCreateNestedManyWithoutCommentInput
  }

  export type commentCreateOrConnectWithoutCommentlikeInput = {
    where: commentWhereUniqueInput
    create: XOR<commentCreateWithoutCommentlikeInput, commentUncheckedCreateWithoutCommentlikeInput>
  }

  export type userUpsertWithoutCommentlikeInput = {
    update: XOR<userUpdateWithoutCommentlikeInput, userUncheckedUpdateWithoutCommentlikeInput>
    create: XOR<userCreateWithoutCommentlikeInput, userUncheckedCreateWithoutCommentlikeInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutCommentlikeInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutCommentlikeInput, userUncheckedUpdateWithoutCommentlikeInput>
  }

  export type userUpdateWithoutCommentlikeInput = {
    UID?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: Enumuser_RoleFieldUpdateOperationsInput | $Enums.user_Role
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Image?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: commentUpdateManyWithoutUserNestedInput
    exerciselike?: exerciselikeUpdateManyWithoutUserNestedInput
    exerciseprogress?: exerciseprogressUpdateManyWithoutUserNestedInput
    friendship_friendship_requesterTouser?: friendshipUpdateManyWithoutUser_friendship_requesterTouserNestedInput
    friendship_friendship_addresseeTouser?: friendshipUpdateManyWithoutUser_friendship_addresseeTouserNestedInput
    list?: listUpdateManyWithoutUserNestedInput
    notification_notification_UIDTouser?: notificationUpdateManyWithoutUser_notification_UIDTouserNestedInput
    notification_notification_FromUserTouser?: notificationUpdateManyWithoutUser_notification_FromUserTouserNestedInput
    studyplanprogress?: studyplanprogressUpdateManyWithoutUserNestedInput
    submission?: submissionUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutCommentlikeInput = {
    UID?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: Enumuser_RoleFieldUpdateOperationsInput | $Enums.user_Role
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Image?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: commentUncheckedUpdateManyWithoutUserNestedInput
    exerciselike?: exerciselikeUncheckedUpdateManyWithoutUserNestedInput
    exerciseprogress?: exerciseprogressUncheckedUpdateManyWithoutUserNestedInput
    friendship_friendship_requesterTouser?: friendshipUncheckedUpdateManyWithoutUser_friendship_requesterTouserNestedInput
    friendship_friendship_addresseeTouser?: friendshipUncheckedUpdateManyWithoutUser_friendship_addresseeTouserNestedInput
    list?: listUncheckedUpdateManyWithoutUserNestedInput
    notification_notification_UIDTouser?: notificationUncheckedUpdateManyWithoutUser_notification_UIDTouserNestedInput
    notification_notification_FromUserTouser?: notificationUncheckedUpdateManyWithoutUser_notification_FromUserTouserNestedInput
    studyplanprogress?: studyplanprogressUncheckedUpdateManyWithoutUserNestedInput
    submission?: submissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type commentUpsertWithoutCommentlikeInput = {
    update: XOR<commentUpdateWithoutCommentlikeInput, commentUncheckedUpdateWithoutCommentlikeInput>
    create: XOR<commentCreateWithoutCommentlikeInput, commentUncheckedCreateWithoutCommentlikeInput>
    where?: commentWhereInput
  }

  export type commentUpdateToOneWithWhereWithoutCommentlikeInput = {
    where?: commentWhereInput
    data: XOR<commentUpdateWithoutCommentlikeInput, commentUncheckedUpdateWithoutCommentlikeInput>
  }

  export type commentUpdateWithoutCommentlikeInput = {
    Content?: StringFieldUpdateOperationsInput | string
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: userUpdateOneRequiredWithoutCommentNestedInput
    lesson?: lessonUpdateOneWithoutCommentNestedInput
    exercise?: exerciseUpdateOneWithoutCommentNestedInput
    notification?: notificationUpdateManyWithoutCommentNestedInput
  }

  export type commentUncheckedUpdateWithoutCommentlikeInput = {
    CoID?: IntFieldUpdateOperationsInput | number
    UID?: StringFieldUpdateOperationsInput | string
    LID?: NullableIntFieldUpdateOperationsInput | number | null
    EID?: NullableIntFieldUpdateOperationsInput | number | null
    Content?: StringFieldUpdateOperationsInput | string
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notification?: notificationUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type userCreateWithoutExerciselikeInput = {
    UID?: string
    Username: string
    Email: string
    Password: string
    Role?: $Enums.user_Role
    CreatedAt?: Date | string | null
    Image?: string | null
    comment?: commentCreateNestedManyWithoutUserInput
    commentlike?: commentlikeCreateNestedManyWithoutUserInput
    exerciseprogress?: exerciseprogressCreateNestedManyWithoutUserInput
    friendship_friendship_requesterTouser?: friendshipCreateNestedManyWithoutUser_friendship_requesterTouserInput
    friendship_friendship_addresseeTouser?: friendshipCreateNestedManyWithoutUser_friendship_addresseeTouserInput
    list?: listCreateNestedManyWithoutUserInput
    notification_notification_UIDTouser?: notificationCreateNestedManyWithoutUser_notification_UIDTouserInput
    notification_notification_FromUserTouser?: notificationCreateNestedManyWithoutUser_notification_FromUserTouserInput
    studyplanprogress?: studyplanprogressCreateNestedManyWithoutUserInput
    submission?: submissionCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutExerciselikeInput = {
    UID?: string
    Username: string
    Email: string
    Password: string
    Role?: $Enums.user_Role
    CreatedAt?: Date | string | null
    Image?: string | null
    comment?: commentUncheckedCreateNestedManyWithoutUserInput
    commentlike?: commentlikeUncheckedCreateNestedManyWithoutUserInput
    exerciseprogress?: exerciseprogressUncheckedCreateNestedManyWithoutUserInput
    friendship_friendship_requesterTouser?: friendshipUncheckedCreateNestedManyWithoutUser_friendship_requesterTouserInput
    friendship_friendship_addresseeTouser?: friendshipUncheckedCreateNestedManyWithoutUser_friendship_addresseeTouserInput
    list?: listUncheckedCreateNestedManyWithoutUserInput
    notification_notification_UIDTouser?: notificationUncheckedCreateNestedManyWithoutUser_notification_UIDTouserInput
    notification_notification_FromUserTouser?: notificationUncheckedCreateNestedManyWithoutUser_notification_FromUserTouserInput
    studyplanprogress?: studyplanprogressUncheckedCreateNestedManyWithoutUserInput
    submission?: submissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutExerciselikeInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutExerciselikeInput, userUncheckedCreateWithoutExerciselikeInput>
  }

  export type exerciseCreateWithoutExerciselikeInput = {
    Name: string
    Slug: string
    Content: string
    Difficulty?: $Enums.exercise_Difficulty
    template?: string | null
    comment?: commentCreateNestedManyWithoutExerciseInput
    topic?: topicCreateNestedOneWithoutExerciseInput
    studyplanitem?: studyplanitemCreateNestedOneWithoutExerciseInput
    exerciseprogress?: exerciseprogressCreateNestedManyWithoutExerciseInput
    listitem?: listitemCreateNestedManyWithoutExerciseInput
    submission?: submissionCreateNestedManyWithoutExerciseInput
    testcase?: testcaseCreateNestedManyWithoutExerciseInput
  }

  export type exerciseUncheckedCreateWithoutExerciselikeInput = {
    EID?: number
    TpID?: number | null
    SPIID?: number | null
    Name: string
    Slug: string
    Content: string
    Difficulty?: $Enums.exercise_Difficulty
    template?: string | null
    comment?: commentUncheckedCreateNestedManyWithoutExerciseInput
    exerciseprogress?: exerciseprogressUncheckedCreateNestedManyWithoutExerciseInput
    listitem?: listitemUncheckedCreateNestedManyWithoutExerciseInput
    submission?: submissionUncheckedCreateNestedManyWithoutExerciseInput
    testcase?: testcaseUncheckedCreateNestedManyWithoutExerciseInput
  }

  export type exerciseCreateOrConnectWithoutExerciselikeInput = {
    where: exerciseWhereUniqueInput
    create: XOR<exerciseCreateWithoutExerciselikeInput, exerciseUncheckedCreateWithoutExerciselikeInput>
  }

  export type userUpsertWithoutExerciselikeInput = {
    update: XOR<userUpdateWithoutExerciselikeInput, userUncheckedUpdateWithoutExerciselikeInput>
    create: XOR<userCreateWithoutExerciselikeInput, userUncheckedCreateWithoutExerciselikeInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutExerciselikeInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutExerciselikeInput, userUncheckedUpdateWithoutExerciselikeInput>
  }

  export type userUpdateWithoutExerciselikeInput = {
    UID?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: Enumuser_RoleFieldUpdateOperationsInput | $Enums.user_Role
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Image?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: commentUpdateManyWithoutUserNestedInput
    commentlike?: commentlikeUpdateManyWithoutUserNestedInput
    exerciseprogress?: exerciseprogressUpdateManyWithoutUserNestedInput
    friendship_friendship_requesterTouser?: friendshipUpdateManyWithoutUser_friendship_requesterTouserNestedInput
    friendship_friendship_addresseeTouser?: friendshipUpdateManyWithoutUser_friendship_addresseeTouserNestedInput
    list?: listUpdateManyWithoutUserNestedInput
    notification_notification_UIDTouser?: notificationUpdateManyWithoutUser_notification_UIDTouserNestedInput
    notification_notification_FromUserTouser?: notificationUpdateManyWithoutUser_notification_FromUserTouserNestedInput
    studyplanprogress?: studyplanprogressUpdateManyWithoutUserNestedInput
    submission?: submissionUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutExerciselikeInput = {
    UID?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: Enumuser_RoleFieldUpdateOperationsInput | $Enums.user_Role
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Image?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: commentUncheckedUpdateManyWithoutUserNestedInput
    commentlike?: commentlikeUncheckedUpdateManyWithoutUserNestedInput
    exerciseprogress?: exerciseprogressUncheckedUpdateManyWithoutUserNestedInput
    friendship_friendship_requesterTouser?: friendshipUncheckedUpdateManyWithoutUser_friendship_requesterTouserNestedInput
    friendship_friendship_addresseeTouser?: friendshipUncheckedUpdateManyWithoutUser_friendship_addresseeTouserNestedInput
    list?: listUncheckedUpdateManyWithoutUserNestedInput
    notification_notification_UIDTouser?: notificationUncheckedUpdateManyWithoutUser_notification_UIDTouserNestedInput
    notification_notification_FromUserTouser?: notificationUncheckedUpdateManyWithoutUser_notification_FromUserTouserNestedInput
    studyplanprogress?: studyplanprogressUncheckedUpdateManyWithoutUserNestedInput
    submission?: submissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type exerciseUpsertWithoutExerciselikeInput = {
    update: XOR<exerciseUpdateWithoutExerciselikeInput, exerciseUncheckedUpdateWithoutExerciselikeInput>
    create: XOR<exerciseCreateWithoutExerciselikeInput, exerciseUncheckedCreateWithoutExerciselikeInput>
    where?: exerciseWhereInput
  }

  export type exerciseUpdateToOneWithWhereWithoutExerciselikeInput = {
    where?: exerciseWhereInput
    data: XOR<exerciseUpdateWithoutExerciselikeInput, exerciseUncheckedUpdateWithoutExerciselikeInput>
  }

  export type exerciseUpdateWithoutExerciselikeInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Slug?: StringFieldUpdateOperationsInput | string
    Content?: StringFieldUpdateOperationsInput | string
    Difficulty?: Enumexercise_DifficultyFieldUpdateOperationsInput | $Enums.exercise_Difficulty
    template?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: commentUpdateManyWithoutExerciseNestedInput
    topic?: topicUpdateOneWithoutExerciseNestedInput
    studyplanitem?: studyplanitemUpdateOneWithoutExerciseNestedInput
    exerciseprogress?: exerciseprogressUpdateManyWithoutExerciseNestedInput
    listitem?: listitemUpdateManyWithoutExerciseNestedInput
    submission?: submissionUpdateManyWithoutExerciseNestedInput
    testcase?: testcaseUpdateManyWithoutExerciseNestedInput
  }

  export type exerciseUncheckedUpdateWithoutExerciselikeInput = {
    EID?: IntFieldUpdateOperationsInput | number
    TpID?: NullableIntFieldUpdateOperationsInput | number | null
    SPIID?: NullableIntFieldUpdateOperationsInput | number | null
    Name?: StringFieldUpdateOperationsInput | string
    Slug?: StringFieldUpdateOperationsInput | string
    Content?: StringFieldUpdateOperationsInput | string
    Difficulty?: Enumexercise_DifficultyFieldUpdateOperationsInput | $Enums.exercise_Difficulty
    template?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: commentUncheckedUpdateManyWithoutExerciseNestedInput
    exerciseprogress?: exerciseprogressUncheckedUpdateManyWithoutExerciseNestedInput
    listitem?: listitemUncheckedUpdateManyWithoutExerciseNestedInput
    submission?: submissionUncheckedUpdateManyWithoutExerciseNestedInput
    testcase?: testcaseUncheckedUpdateManyWithoutExerciseNestedInput
  }

  export type commentCreateWithoutLessonInput = {
    Content: string
    CreatedAt?: Date | string | null
    user: userCreateNestedOneWithoutCommentInput
    exercise?: exerciseCreateNestedOneWithoutCommentInput
    commentlike?: commentlikeCreateNestedManyWithoutCommentInput
    notification?: notificationCreateNestedManyWithoutCommentInput
  }

  export type commentUncheckedCreateWithoutLessonInput = {
    CoID?: number
    UID: string
    EID?: number | null
    Content: string
    CreatedAt?: Date | string | null
    commentlike?: commentlikeUncheckedCreateNestedManyWithoutCommentInput
    notification?: notificationUncheckedCreateNestedManyWithoutCommentInput
  }

  export type commentCreateOrConnectWithoutLessonInput = {
    where: commentWhereUniqueInput
    create: XOR<commentCreateWithoutLessonInput, commentUncheckedCreateWithoutLessonInput>
  }

  export type commentCreateManyLessonInputEnvelope = {
    data: commentCreateManyLessonInput | commentCreateManyLessonInput[]
    skipDuplicates?: boolean
  }

  export type chapterCreateWithoutLessonInput = {
    ChapterIndex: number
    Name: string
  }

  export type chapterUncheckedCreateWithoutLessonInput = {
    CID?: number
    ChapterIndex: number
    Name: string
  }

  export type chapterCreateOrConnectWithoutLessonInput = {
    where: chapterWhereUniqueInput
    create: XOR<chapterCreateWithoutLessonInput, chapterUncheckedCreateWithoutLessonInput>
  }

  export type commentUpsertWithWhereUniqueWithoutLessonInput = {
    where: commentWhereUniqueInput
    update: XOR<commentUpdateWithoutLessonInput, commentUncheckedUpdateWithoutLessonInput>
    create: XOR<commentCreateWithoutLessonInput, commentUncheckedCreateWithoutLessonInput>
  }

  export type commentUpdateWithWhereUniqueWithoutLessonInput = {
    where: commentWhereUniqueInput
    data: XOR<commentUpdateWithoutLessonInput, commentUncheckedUpdateWithoutLessonInput>
  }

  export type commentUpdateManyWithWhereWithoutLessonInput = {
    where: commentScalarWhereInput
    data: XOR<commentUpdateManyMutationInput, commentUncheckedUpdateManyWithoutLessonInput>
  }

  export type chapterUpsertWithoutLessonInput = {
    update: XOR<chapterUpdateWithoutLessonInput, chapterUncheckedUpdateWithoutLessonInput>
    create: XOR<chapterCreateWithoutLessonInput, chapterUncheckedCreateWithoutLessonInput>
    where?: chapterWhereInput
  }

  export type chapterUpdateToOneWithWhereWithoutLessonInput = {
    where?: chapterWhereInput
    data: XOR<chapterUpdateWithoutLessonInput, chapterUncheckedUpdateWithoutLessonInput>
  }

  export type chapterUpdateWithoutLessonInput = {
    ChapterIndex?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
  }

  export type chapterUncheckedUpdateWithoutLessonInput = {
    CID?: IntFieldUpdateOperationsInput | number
    ChapterIndex?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
  }

  export type userCreateWithoutNotification_notification_UIDTouserInput = {
    UID?: string
    Username: string
    Email: string
    Password: string
    Role?: $Enums.user_Role
    CreatedAt?: Date | string | null
    Image?: string | null
    comment?: commentCreateNestedManyWithoutUserInput
    commentlike?: commentlikeCreateNestedManyWithoutUserInput
    exerciselike?: exerciselikeCreateNestedManyWithoutUserInput
    exerciseprogress?: exerciseprogressCreateNestedManyWithoutUserInput
    friendship_friendship_requesterTouser?: friendshipCreateNestedManyWithoutUser_friendship_requesterTouserInput
    friendship_friendship_addresseeTouser?: friendshipCreateNestedManyWithoutUser_friendship_addresseeTouserInput
    list?: listCreateNestedManyWithoutUserInput
    notification_notification_FromUserTouser?: notificationCreateNestedManyWithoutUser_notification_FromUserTouserInput
    studyplanprogress?: studyplanprogressCreateNestedManyWithoutUserInput
    submission?: submissionCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutNotification_notification_UIDTouserInput = {
    UID?: string
    Username: string
    Email: string
    Password: string
    Role?: $Enums.user_Role
    CreatedAt?: Date | string | null
    Image?: string | null
    comment?: commentUncheckedCreateNestedManyWithoutUserInput
    commentlike?: commentlikeUncheckedCreateNestedManyWithoutUserInput
    exerciselike?: exerciselikeUncheckedCreateNestedManyWithoutUserInput
    exerciseprogress?: exerciseprogressUncheckedCreateNestedManyWithoutUserInput
    friendship_friendship_requesterTouser?: friendshipUncheckedCreateNestedManyWithoutUser_friendship_requesterTouserInput
    friendship_friendship_addresseeTouser?: friendshipUncheckedCreateNestedManyWithoutUser_friendship_addresseeTouserInput
    list?: listUncheckedCreateNestedManyWithoutUserInput
    notification_notification_FromUserTouser?: notificationUncheckedCreateNestedManyWithoutUser_notification_FromUserTouserInput
    studyplanprogress?: studyplanprogressUncheckedCreateNestedManyWithoutUserInput
    submission?: submissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutNotification_notification_UIDTouserInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutNotification_notification_UIDTouserInput, userUncheckedCreateWithoutNotification_notification_UIDTouserInput>
  }

  export type userCreateWithoutNotification_notification_FromUserTouserInput = {
    UID?: string
    Username: string
    Email: string
    Password: string
    Role?: $Enums.user_Role
    CreatedAt?: Date | string | null
    Image?: string | null
    comment?: commentCreateNestedManyWithoutUserInput
    commentlike?: commentlikeCreateNestedManyWithoutUserInput
    exerciselike?: exerciselikeCreateNestedManyWithoutUserInput
    exerciseprogress?: exerciseprogressCreateNestedManyWithoutUserInput
    friendship_friendship_requesterTouser?: friendshipCreateNestedManyWithoutUser_friendship_requesterTouserInput
    friendship_friendship_addresseeTouser?: friendshipCreateNestedManyWithoutUser_friendship_addresseeTouserInput
    list?: listCreateNestedManyWithoutUserInput
    notification_notification_UIDTouser?: notificationCreateNestedManyWithoutUser_notification_UIDTouserInput
    studyplanprogress?: studyplanprogressCreateNestedManyWithoutUserInput
    submission?: submissionCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutNotification_notification_FromUserTouserInput = {
    UID?: string
    Username: string
    Email: string
    Password: string
    Role?: $Enums.user_Role
    CreatedAt?: Date | string | null
    Image?: string | null
    comment?: commentUncheckedCreateNestedManyWithoutUserInput
    commentlike?: commentlikeUncheckedCreateNestedManyWithoutUserInput
    exerciselike?: exerciselikeUncheckedCreateNestedManyWithoutUserInput
    exerciseprogress?: exerciseprogressUncheckedCreateNestedManyWithoutUserInput
    friendship_friendship_requesterTouser?: friendshipUncheckedCreateNestedManyWithoutUser_friendship_requesterTouserInput
    friendship_friendship_addresseeTouser?: friendshipUncheckedCreateNestedManyWithoutUser_friendship_addresseeTouserInput
    list?: listUncheckedCreateNestedManyWithoutUserInput
    notification_notification_UIDTouser?: notificationUncheckedCreateNestedManyWithoutUser_notification_UIDTouserInput
    studyplanprogress?: studyplanprogressUncheckedCreateNestedManyWithoutUserInput
    submission?: submissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutNotification_notification_FromUserTouserInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutNotification_notification_FromUserTouserInput, userUncheckedCreateWithoutNotification_notification_FromUserTouserInput>
  }

  export type commentCreateWithoutNotificationInput = {
    Content: string
    CreatedAt?: Date | string | null
    user: userCreateNestedOneWithoutCommentInput
    lesson?: lessonCreateNestedOneWithoutCommentInput
    exercise?: exerciseCreateNestedOneWithoutCommentInput
    commentlike?: commentlikeCreateNestedManyWithoutCommentInput
  }

  export type commentUncheckedCreateWithoutNotificationInput = {
    CoID?: number
    UID: string
    LID?: number | null
    EID?: number | null
    Content: string
    CreatedAt?: Date | string | null
    commentlike?: commentlikeUncheckedCreateNestedManyWithoutCommentInput
  }

  export type commentCreateOrConnectWithoutNotificationInput = {
    where: commentWhereUniqueInput
    create: XOR<commentCreateWithoutNotificationInput, commentUncheckedCreateWithoutNotificationInput>
  }

  export type userUpsertWithoutNotification_notification_UIDTouserInput = {
    update: XOR<userUpdateWithoutNotification_notification_UIDTouserInput, userUncheckedUpdateWithoutNotification_notification_UIDTouserInput>
    create: XOR<userCreateWithoutNotification_notification_UIDTouserInput, userUncheckedCreateWithoutNotification_notification_UIDTouserInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutNotification_notification_UIDTouserInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutNotification_notification_UIDTouserInput, userUncheckedUpdateWithoutNotification_notification_UIDTouserInput>
  }

  export type userUpdateWithoutNotification_notification_UIDTouserInput = {
    UID?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: Enumuser_RoleFieldUpdateOperationsInput | $Enums.user_Role
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Image?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: commentUpdateManyWithoutUserNestedInput
    commentlike?: commentlikeUpdateManyWithoutUserNestedInput
    exerciselike?: exerciselikeUpdateManyWithoutUserNestedInput
    exerciseprogress?: exerciseprogressUpdateManyWithoutUserNestedInput
    friendship_friendship_requesterTouser?: friendshipUpdateManyWithoutUser_friendship_requesterTouserNestedInput
    friendship_friendship_addresseeTouser?: friendshipUpdateManyWithoutUser_friendship_addresseeTouserNestedInput
    list?: listUpdateManyWithoutUserNestedInput
    notification_notification_FromUserTouser?: notificationUpdateManyWithoutUser_notification_FromUserTouserNestedInput
    studyplanprogress?: studyplanprogressUpdateManyWithoutUserNestedInput
    submission?: submissionUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutNotification_notification_UIDTouserInput = {
    UID?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: Enumuser_RoleFieldUpdateOperationsInput | $Enums.user_Role
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Image?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: commentUncheckedUpdateManyWithoutUserNestedInput
    commentlike?: commentlikeUncheckedUpdateManyWithoutUserNestedInput
    exerciselike?: exerciselikeUncheckedUpdateManyWithoutUserNestedInput
    exerciseprogress?: exerciseprogressUncheckedUpdateManyWithoutUserNestedInput
    friendship_friendship_requesterTouser?: friendshipUncheckedUpdateManyWithoutUser_friendship_requesterTouserNestedInput
    friendship_friendship_addresseeTouser?: friendshipUncheckedUpdateManyWithoutUser_friendship_addresseeTouserNestedInput
    list?: listUncheckedUpdateManyWithoutUserNestedInput
    notification_notification_FromUserTouser?: notificationUncheckedUpdateManyWithoutUser_notification_FromUserTouserNestedInput
    studyplanprogress?: studyplanprogressUncheckedUpdateManyWithoutUserNestedInput
    submission?: submissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type userUpsertWithoutNotification_notification_FromUserTouserInput = {
    update: XOR<userUpdateWithoutNotification_notification_FromUserTouserInput, userUncheckedUpdateWithoutNotification_notification_FromUserTouserInput>
    create: XOR<userCreateWithoutNotification_notification_FromUserTouserInput, userUncheckedCreateWithoutNotification_notification_FromUserTouserInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutNotification_notification_FromUserTouserInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutNotification_notification_FromUserTouserInput, userUncheckedUpdateWithoutNotification_notification_FromUserTouserInput>
  }

  export type userUpdateWithoutNotification_notification_FromUserTouserInput = {
    UID?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: Enumuser_RoleFieldUpdateOperationsInput | $Enums.user_Role
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Image?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: commentUpdateManyWithoutUserNestedInput
    commentlike?: commentlikeUpdateManyWithoutUserNestedInput
    exerciselike?: exerciselikeUpdateManyWithoutUserNestedInput
    exerciseprogress?: exerciseprogressUpdateManyWithoutUserNestedInput
    friendship_friendship_requesterTouser?: friendshipUpdateManyWithoutUser_friendship_requesterTouserNestedInput
    friendship_friendship_addresseeTouser?: friendshipUpdateManyWithoutUser_friendship_addresseeTouserNestedInput
    list?: listUpdateManyWithoutUserNestedInput
    notification_notification_UIDTouser?: notificationUpdateManyWithoutUser_notification_UIDTouserNestedInput
    studyplanprogress?: studyplanprogressUpdateManyWithoutUserNestedInput
    submission?: submissionUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutNotification_notification_FromUserTouserInput = {
    UID?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: Enumuser_RoleFieldUpdateOperationsInput | $Enums.user_Role
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Image?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: commentUncheckedUpdateManyWithoutUserNestedInput
    commentlike?: commentlikeUncheckedUpdateManyWithoutUserNestedInput
    exerciselike?: exerciselikeUncheckedUpdateManyWithoutUserNestedInput
    exerciseprogress?: exerciseprogressUncheckedUpdateManyWithoutUserNestedInput
    friendship_friendship_requesterTouser?: friendshipUncheckedUpdateManyWithoutUser_friendship_requesterTouserNestedInput
    friendship_friendship_addresseeTouser?: friendshipUncheckedUpdateManyWithoutUser_friendship_addresseeTouserNestedInput
    list?: listUncheckedUpdateManyWithoutUserNestedInput
    notification_notification_UIDTouser?: notificationUncheckedUpdateManyWithoutUser_notification_UIDTouserNestedInput
    studyplanprogress?: studyplanprogressUncheckedUpdateManyWithoutUserNestedInput
    submission?: submissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type commentUpsertWithoutNotificationInput = {
    update: XOR<commentUpdateWithoutNotificationInput, commentUncheckedUpdateWithoutNotificationInput>
    create: XOR<commentCreateWithoutNotificationInput, commentUncheckedCreateWithoutNotificationInput>
    where?: commentWhereInput
  }

  export type commentUpdateToOneWithWhereWithoutNotificationInput = {
    where?: commentWhereInput
    data: XOR<commentUpdateWithoutNotificationInput, commentUncheckedUpdateWithoutNotificationInput>
  }

  export type commentUpdateWithoutNotificationInput = {
    Content?: StringFieldUpdateOperationsInput | string
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: userUpdateOneRequiredWithoutCommentNestedInput
    lesson?: lessonUpdateOneWithoutCommentNestedInput
    exercise?: exerciseUpdateOneWithoutCommentNestedInput
    commentlike?: commentlikeUpdateManyWithoutCommentNestedInput
  }

  export type commentUncheckedUpdateWithoutNotificationInput = {
    CoID?: IntFieldUpdateOperationsInput | number
    UID?: StringFieldUpdateOperationsInput | string
    LID?: NullableIntFieldUpdateOperationsInput | number | null
    EID?: NullableIntFieldUpdateOperationsInput | number | null
    Content?: StringFieldUpdateOperationsInput | string
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    commentlike?: commentlikeUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type studyplanitemCreateWithoutStudyplanInput = {
    Name: string
    exercise?: exerciseCreateNestedManyWithoutStudyplanitemInput
  }

  export type studyplanitemUncheckedCreateWithoutStudyplanInput = {
    SPIID?: number
    Name: string
    exercise?: exerciseUncheckedCreateNestedManyWithoutStudyplanitemInput
  }

  export type studyplanitemCreateOrConnectWithoutStudyplanInput = {
    where: studyplanitemWhereUniqueInput
    create: XOR<studyplanitemCreateWithoutStudyplanInput, studyplanitemUncheckedCreateWithoutStudyplanInput>
  }

  export type studyplanitemCreateManyStudyplanInputEnvelope = {
    data: studyplanitemCreateManyStudyplanInput | studyplanitemCreateManyStudyplanInput[]
    skipDuplicates?: boolean
  }

  export type studyplanprogressCreateWithoutStudyplanInput = {
    Status: $Enums.studyplanprogress_Status
    StartTime?: Date | string | null
    EndTime?: Date | string | null
    user: userCreateNestedOneWithoutStudyplanprogressInput
  }

  export type studyplanprogressUncheckedCreateWithoutStudyplanInput = {
    SPPID?: number
    UID: string
    Status: $Enums.studyplanprogress_Status
    StartTime?: Date | string | null
    EndTime?: Date | string | null
  }

  export type studyplanprogressCreateOrConnectWithoutStudyplanInput = {
    where: studyplanprogressWhereUniqueInput
    create: XOR<studyplanprogressCreateWithoutStudyplanInput, studyplanprogressUncheckedCreateWithoutStudyplanInput>
  }

  export type studyplanprogressCreateManyStudyplanInputEnvelope = {
    data: studyplanprogressCreateManyStudyplanInput | studyplanprogressCreateManyStudyplanInput[]
    skipDuplicates?: boolean
  }

  export type studyplanitemUpsertWithWhereUniqueWithoutStudyplanInput = {
    where: studyplanitemWhereUniqueInput
    update: XOR<studyplanitemUpdateWithoutStudyplanInput, studyplanitemUncheckedUpdateWithoutStudyplanInput>
    create: XOR<studyplanitemCreateWithoutStudyplanInput, studyplanitemUncheckedCreateWithoutStudyplanInput>
  }

  export type studyplanitemUpdateWithWhereUniqueWithoutStudyplanInput = {
    where: studyplanitemWhereUniqueInput
    data: XOR<studyplanitemUpdateWithoutStudyplanInput, studyplanitemUncheckedUpdateWithoutStudyplanInput>
  }

  export type studyplanitemUpdateManyWithWhereWithoutStudyplanInput = {
    where: studyplanitemScalarWhereInput
    data: XOR<studyplanitemUpdateManyMutationInput, studyplanitemUncheckedUpdateManyWithoutStudyplanInput>
  }

  export type studyplanitemScalarWhereInput = {
    AND?: studyplanitemScalarWhereInput | studyplanitemScalarWhereInput[]
    OR?: studyplanitemScalarWhereInput[]
    NOT?: studyplanitemScalarWhereInput | studyplanitemScalarWhereInput[]
    SPIID?: IntFilter<"studyplanitem"> | number
    SPID?: IntFilter<"studyplanitem"> | number
    Name?: StringFilter<"studyplanitem"> | string
  }

  export type studyplanprogressUpsertWithWhereUniqueWithoutStudyplanInput = {
    where: studyplanprogressWhereUniqueInput
    update: XOR<studyplanprogressUpdateWithoutStudyplanInput, studyplanprogressUncheckedUpdateWithoutStudyplanInput>
    create: XOR<studyplanprogressCreateWithoutStudyplanInput, studyplanprogressUncheckedCreateWithoutStudyplanInput>
  }

  export type studyplanprogressUpdateWithWhereUniqueWithoutStudyplanInput = {
    where: studyplanprogressWhereUniqueInput
    data: XOR<studyplanprogressUpdateWithoutStudyplanInput, studyplanprogressUncheckedUpdateWithoutStudyplanInput>
  }

  export type studyplanprogressUpdateManyWithWhereWithoutStudyplanInput = {
    where: studyplanprogressScalarWhereInput
    data: XOR<studyplanprogressUpdateManyMutationInput, studyplanprogressUncheckedUpdateManyWithoutStudyplanInput>
  }

  export type exerciseCreateWithoutStudyplanitemInput = {
    Name: string
    Slug: string
    Content: string
    Difficulty?: $Enums.exercise_Difficulty
    template?: string | null
    comment?: commentCreateNestedManyWithoutExerciseInput
    topic?: topicCreateNestedOneWithoutExerciseInput
    exerciselike?: exerciselikeCreateNestedManyWithoutExerciseInput
    exerciseprogress?: exerciseprogressCreateNestedManyWithoutExerciseInput
    listitem?: listitemCreateNestedManyWithoutExerciseInput
    submission?: submissionCreateNestedManyWithoutExerciseInput
    testcase?: testcaseCreateNestedManyWithoutExerciseInput
  }

  export type exerciseUncheckedCreateWithoutStudyplanitemInput = {
    EID?: number
    TpID?: number | null
    Name: string
    Slug: string
    Content: string
    Difficulty?: $Enums.exercise_Difficulty
    template?: string | null
    comment?: commentUncheckedCreateNestedManyWithoutExerciseInput
    exerciselike?: exerciselikeUncheckedCreateNestedManyWithoutExerciseInput
    exerciseprogress?: exerciseprogressUncheckedCreateNestedManyWithoutExerciseInput
    listitem?: listitemUncheckedCreateNestedManyWithoutExerciseInput
    submission?: submissionUncheckedCreateNestedManyWithoutExerciseInput
    testcase?: testcaseUncheckedCreateNestedManyWithoutExerciseInput
  }

  export type exerciseCreateOrConnectWithoutStudyplanitemInput = {
    where: exerciseWhereUniqueInput
    create: XOR<exerciseCreateWithoutStudyplanitemInput, exerciseUncheckedCreateWithoutStudyplanitemInput>
  }

  export type exerciseCreateManyStudyplanitemInputEnvelope = {
    data: exerciseCreateManyStudyplanitemInput | exerciseCreateManyStudyplanitemInput[]
    skipDuplicates?: boolean
  }

  export type studyplanCreateWithoutStudyplanitemInput = {
    Name: string
    Description: string
    Icon?: string | null
    Slug?: string | null
    studyplanprogress?: studyplanprogressCreateNestedManyWithoutStudyplanInput
  }

  export type studyplanUncheckedCreateWithoutStudyplanitemInput = {
    SPID?: number
    Name: string
    Description: string
    Icon?: string | null
    Slug?: string | null
    studyplanprogress?: studyplanprogressUncheckedCreateNestedManyWithoutStudyplanInput
  }

  export type studyplanCreateOrConnectWithoutStudyplanitemInput = {
    where: studyplanWhereUniqueInput
    create: XOR<studyplanCreateWithoutStudyplanitemInput, studyplanUncheckedCreateWithoutStudyplanitemInput>
  }

  export type exerciseUpsertWithWhereUniqueWithoutStudyplanitemInput = {
    where: exerciseWhereUniqueInput
    update: XOR<exerciseUpdateWithoutStudyplanitemInput, exerciseUncheckedUpdateWithoutStudyplanitemInput>
    create: XOR<exerciseCreateWithoutStudyplanitemInput, exerciseUncheckedCreateWithoutStudyplanitemInput>
  }

  export type exerciseUpdateWithWhereUniqueWithoutStudyplanitemInput = {
    where: exerciseWhereUniqueInput
    data: XOR<exerciseUpdateWithoutStudyplanitemInput, exerciseUncheckedUpdateWithoutStudyplanitemInput>
  }

  export type exerciseUpdateManyWithWhereWithoutStudyplanitemInput = {
    where: exerciseScalarWhereInput
    data: XOR<exerciseUpdateManyMutationInput, exerciseUncheckedUpdateManyWithoutStudyplanitemInput>
  }

  export type studyplanUpsertWithoutStudyplanitemInput = {
    update: XOR<studyplanUpdateWithoutStudyplanitemInput, studyplanUncheckedUpdateWithoutStudyplanitemInput>
    create: XOR<studyplanCreateWithoutStudyplanitemInput, studyplanUncheckedCreateWithoutStudyplanitemInput>
    where?: studyplanWhereInput
  }

  export type studyplanUpdateToOneWithWhereWithoutStudyplanitemInput = {
    where?: studyplanWhereInput
    data: XOR<studyplanUpdateWithoutStudyplanitemInput, studyplanUncheckedUpdateWithoutStudyplanitemInput>
  }

  export type studyplanUpdateWithoutStudyplanitemInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    Icon?: NullableStringFieldUpdateOperationsInput | string | null
    Slug?: NullableStringFieldUpdateOperationsInput | string | null
    studyplanprogress?: studyplanprogressUpdateManyWithoutStudyplanNestedInput
  }

  export type studyplanUncheckedUpdateWithoutStudyplanitemInput = {
    SPID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    Icon?: NullableStringFieldUpdateOperationsInput | string | null
    Slug?: NullableStringFieldUpdateOperationsInput | string | null
    studyplanprogress?: studyplanprogressUncheckedUpdateManyWithoutStudyplanNestedInput
  }

  export type userCreateWithoutExerciseprogressInput = {
    UID?: string
    Username: string
    Email: string
    Password: string
    Role?: $Enums.user_Role
    CreatedAt?: Date | string | null
    Image?: string | null
    comment?: commentCreateNestedManyWithoutUserInput
    commentlike?: commentlikeCreateNestedManyWithoutUserInput
    exerciselike?: exerciselikeCreateNestedManyWithoutUserInput
    friendship_friendship_requesterTouser?: friendshipCreateNestedManyWithoutUser_friendship_requesterTouserInput
    friendship_friendship_addresseeTouser?: friendshipCreateNestedManyWithoutUser_friendship_addresseeTouserInput
    list?: listCreateNestedManyWithoutUserInput
    notification_notification_UIDTouser?: notificationCreateNestedManyWithoutUser_notification_UIDTouserInput
    notification_notification_FromUserTouser?: notificationCreateNestedManyWithoutUser_notification_FromUserTouserInput
    studyplanprogress?: studyplanprogressCreateNestedManyWithoutUserInput
    submission?: submissionCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutExerciseprogressInput = {
    UID?: string
    Username: string
    Email: string
    Password: string
    Role?: $Enums.user_Role
    CreatedAt?: Date | string | null
    Image?: string | null
    comment?: commentUncheckedCreateNestedManyWithoutUserInput
    commentlike?: commentlikeUncheckedCreateNestedManyWithoutUserInput
    exerciselike?: exerciselikeUncheckedCreateNestedManyWithoutUserInput
    friendship_friendship_requesterTouser?: friendshipUncheckedCreateNestedManyWithoutUser_friendship_requesterTouserInput
    friendship_friendship_addresseeTouser?: friendshipUncheckedCreateNestedManyWithoutUser_friendship_addresseeTouserInput
    list?: listUncheckedCreateNestedManyWithoutUserInput
    notification_notification_UIDTouser?: notificationUncheckedCreateNestedManyWithoutUser_notification_UIDTouserInput
    notification_notification_FromUserTouser?: notificationUncheckedCreateNestedManyWithoutUser_notification_FromUserTouserInput
    studyplanprogress?: studyplanprogressUncheckedCreateNestedManyWithoutUserInput
    submission?: submissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutExerciseprogressInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutExerciseprogressInput, userUncheckedCreateWithoutExerciseprogressInput>
  }

  export type exerciseCreateWithoutExerciseprogressInput = {
    Name: string
    Slug: string
    Content: string
    Difficulty?: $Enums.exercise_Difficulty
    template?: string | null
    comment?: commentCreateNestedManyWithoutExerciseInput
    topic?: topicCreateNestedOneWithoutExerciseInput
    studyplanitem?: studyplanitemCreateNestedOneWithoutExerciseInput
    exerciselike?: exerciselikeCreateNestedManyWithoutExerciseInput
    listitem?: listitemCreateNestedManyWithoutExerciseInput
    submission?: submissionCreateNestedManyWithoutExerciseInput
    testcase?: testcaseCreateNestedManyWithoutExerciseInput
  }

  export type exerciseUncheckedCreateWithoutExerciseprogressInput = {
    EID?: number
    TpID?: number | null
    SPIID?: number | null
    Name: string
    Slug: string
    Content: string
    Difficulty?: $Enums.exercise_Difficulty
    template?: string | null
    comment?: commentUncheckedCreateNestedManyWithoutExerciseInput
    exerciselike?: exerciselikeUncheckedCreateNestedManyWithoutExerciseInput
    listitem?: listitemUncheckedCreateNestedManyWithoutExerciseInput
    submission?: submissionUncheckedCreateNestedManyWithoutExerciseInput
    testcase?: testcaseUncheckedCreateNestedManyWithoutExerciseInput
  }

  export type exerciseCreateOrConnectWithoutExerciseprogressInput = {
    where: exerciseWhereUniqueInput
    create: XOR<exerciseCreateWithoutExerciseprogressInput, exerciseUncheckedCreateWithoutExerciseprogressInput>
  }

  export type userUpsertWithoutExerciseprogressInput = {
    update: XOR<userUpdateWithoutExerciseprogressInput, userUncheckedUpdateWithoutExerciseprogressInput>
    create: XOR<userCreateWithoutExerciseprogressInput, userUncheckedCreateWithoutExerciseprogressInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutExerciseprogressInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutExerciseprogressInput, userUncheckedUpdateWithoutExerciseprogressInput>
  }

  export type userUpdateWithoutExerciseprogressInput = {
    UID?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: Enumuser_RoleFieldUpdateOperationsInput | $Enums.user_Role
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Image?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: commentUpdateManyWithoutUserNestedInput
    commentlike?: commentlikeUpdateManyWithoutUserNestedInput
    exerciselike?: exerciselikeUpdateManyWithoutUserNestedInput
    friendship_friendship_requesterTouser?: friendshipUpdateManyWithoutUser_friendship_requesterTouserNestedInput
    friendship_friendship_addresseeTouser?: friendshipUpdateManyWithoutUser_friendship_addresseeTouserNestedInput
    list?: listUpdateManyWithoutUserNestedInput
    notification_notification_UIDTouser?: notificationUpdateManyWithoutUser_notification_UIDTouserNestedInput
    notification_notification_FromUserTouser?: notificationUpdateManyWithoutUser_notification_FromUserTouserNestedInput
    studyplanprogress?: studyplanprogressUpdateManyWithoutUserNestedInput
    submission?: submissionUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutExerciseprogressInput = {
    UID?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: Enumuser_RoleFieldUpdateOperationsInput | $Enums.user_Role
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Image?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: commentUncheckedUpdateManyWithoutUserNestedInput
    commentlike?: commentlikeUncheckedUpdateManyWithoutUserNestedInput
    exerciselike?: exerciselikeUncheckedUpdateManyWithoutUserNestedInput
    friendship_friendship_requesterTouser?: friendshipUncheckedUpdateManyWithoutUser_friendship_requesterTouserNestedInput
    friendship_friendship_addresseeTouser?: friendshipUncheckedUpdateManyWithoutUser_friendship_addresseeTouserNestedInput
    list?: listUncheckedUpdateManyWithoutUserNestedInput
    notification_notification_UIDTouser?: notificationUncheckedUpdateManyWithoutUser_notification_UIDTouserNestedInput
    notification_notification_FromUserTouser?: notificationUncheckedUpdateManyWithoutUser_notification_FromUserTouserNestedInput
    studyplanprogress?: studyplanprogressUncheckedUpdateManyWithoutUserNestedInput
    submission?: submissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type exerciseUpsertWithoutExerciseprogressInput = {
    update: XOR<exerciseUpdateWithoutExerciseprogressInput, exerciseUncheckedUpdateWithoutExerciseprogressInput>
    create: XOR<exerciseCreateWithoutExerciseprogressInput, exerciseUncheckedCreateWithoutExerciseprogressInput>
    where?: exerciseWhereInput
  }

  export type exerciseUpdateToOneWithWhereWithoutExerciseprogressInput = {
    where?: exerciseWhereInput
    data: XOR<exerciseUpdateWithoutExerciseprogressInput, exerciseUncheckedUpdateWithoutExerciseprogressInput>
  }

  export type exerciseUpdateWithoutExerciseprogressInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Slug?: StringFieldUpdateOperationsInput | string
    Content?: StringFieldUpdateOperationsInput | string
    Difficulty?: Enumexercise_DifficultyFieldUpdateOperationsInput | $Enums.exercise_Difficulty
    template?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: commentUpdateManyWithoutExerciseNestedInput
    topic?: topicUpdateOneWithoutExerciseNestedInput
    studyplanitem?: studyplanitemUpdateOneWithoutExerciseNestedInput
    exerciselike?: exerciselikeUpdateManyWithoutExerciseNestedInput
    listitem?: listitemUpdateManyWithoutExerciseNestedInput
    submission?: submissionUpdateManyWithoutExerciseNestedInput
    testcase?: testcaseUpdateManyWithoutExerciseNestedInput
  }

  export type exerciseUncheckedUpdateWithoutExerciseprogressInput = {
    EID?: IntFieldUpdateOperationsInput | number
    TpID?: NullableIntFieldUpdateOperationsInput | number | null
    SPIID?: NullableIntFieldUpdateOperationsInput | number | null
    Name?: StringFieldUpdateOperationsInput | string
    Slug?: StringFieldUpdateOperationsInput | string
    Content?: StringFieldUpdateOperationsInput | string
    Difficulty?: Enumexercise_DifficultyFieldUpdateOperationsInput | $Enums.exercise_Difficulty
    template?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: commentUncheckedUpdateManyWithoutExerciseNestedInput
    exerciselike?: exerciselikeUncheckedUpdateManyWithoutExerciseNestedInput
    listitem?: listitemUncheckedUpdateManyWithoutExerciseNestedInput
    submission?: submissionUncheckedUpdateManyWithoutExerciseNestedInput
    testcase?: testcaseUncheckedUpdateManyWithoutExerciseNestedInput
  }

  export type studyplanCreateWithoutStudyplanprogressInput = {
    Name: string
    Description: string
    Icon?: string | null
    Slug?: string | null
    studyplanitem?: studyplanitemCreateNestedManyWithoutStudyplanInput
  }

  export type studyplanUncheckedCreateWithoutStudyplanprogressInput = {
    SPID?: number
    Name: string
    Description: string
    Icon?: string | null
    Slug?: string | null
    studyplanitem?: studyplanitemUncheckedCreateNestedManyWithoutStudyplanInput
  }

  export type studyplanCreateOrConnectWithoutStudyplanprogressInput = {
    where: studyplanWhereUniqueInput
    create: XOR<studyplanCreateWithoutStudyplanprogressInput, studyplanUncheckedCreateWithoutStudyplanprogressInput>
  }

  export type userCreateWithoutStudyplanprogressInput = {
    UID?: string
    Username: string
    Email: string
    Password: string
    Role?: $Enums.user_Role
    CreatedAt?: Date | string | null
    Image?: string | null
    comment?: commentCreateNestedManyWithoutUserInput
    commentlike?: commentlikeCreateNestedManyWithoutUserInput
    exerciselike?: exerciselikeCreateNestedManyWithoutUserInput
    exerciseprogress?: exerciseprogressCreateNestedManyWithoutUserInput
    friendship_friendship_requesterTouser?: friendshipCreateNestedManyWithoutUser_friendship_requesterTouserInput
    friendship_friendship_addresseeTouser?: friendshipCreateNestedManyWithoutUser_friendship_addresseeTouserInput
    list?: listCreateNestedManyWithoutUserInput
    notification_notification_UIDTouser?: notificationCreateNestedManyWithoutUser_notification_UIDTouserInput
    notification_notification_FromUserTouser?: notificationCreateNestedManyWithoutUser_notification_FromUserTouserInput
    submission?: submissionCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutStudyplanprogressInput = {
    UID?: string
    Username: string
    Email: string
    Password: string
    Role?: $Enums.user_Role
    CreatedAt?: Date | string | null
    Image?: string | null
    comment?: commentUncheckedCreateNestedManyWithoutUserInput
    commentlike?: commentlikeUncheckedCreateNestedManyWithoutUserInput
    exerciselike?: exerciselikeUncheckedCreateNestedManyWithoutUserInput
    exerciseprogress?: exerciseprogressUncheckedCreateNestedManyWithoutUserInput
    friendship_friendship_requesterTouser?: friendshipUncheckedCreateNestedManyWithoutUser_friendship_requesterTouserInput
    friendship_friendship_addresseeTouser?: friendshipUncheckedCreateNestedManyWithoutUser_friendship_addresseeTouserInput
    list?: listUncheckedCreateNestedManyWithoutUserInput
    notification_notification_UIDTouser?: notificationUncheckedCreateNestedManyWithoutUser_notification_UIDTouserInput
    notification_notification_FromUserTouser?: notificationUncheckedCreateNestedManyWithoutUser_notification_FromUserTouserInput
    submission?: submissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutStudyplanprogressInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutStudyplanprogressInput, userUncheckedCreateWithoutStudyplanprogressInput>
  }

  export type studyplanUpsertWithoutStudyplanprogressInput = {
    update: XOR<studyplanUpdateWithoutStudyplanprogressInput, studyplanUncheckedUpdateWithoutStudyplanprogressInput>
    create: XOR<studyplanCreateWithoutStudyplanprogressInput, studyplanUncheckedCreateWithoutStudyplanprogressInput>
    where?: studyplanWhereInput
  }

  export type studyplanUpdateToOneWithWhereWithoutStudyplanprogressInput = {
    where?: studyplanWhereInput
    data: XOR<studyplanUpdateWithoutStudyplanprogressInput, studyplanUncheckedUpdateWithoutStudyplanprogressInput>
  }

  export type studyplanUpdateWithoutStudyplanprogressInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    Icon?: NullableStringFieldUpdateOperationsInput | string | null
    Slug?: NullableStringFieldUpdateOperationsInput | string | null
    studyplanitem?: studyplanitemUpdateManyWithoutStudyplanNestedInput
  }

  export type studyplanUncheckedUpdateWithoutStudyplanprogressInput = {
    SPID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    Icon?: NullableStringFieldUpdateOperationsInput | string | null
    Slug?: NullableStringFieldUpdateOperationsInput | string | null
    studyplanitem?: studyplanitemUncheckedUpdateManyWithoutStudyplanNestedInput
  }

  export type userUpsertWithoutStudyplanprogressInput = {
    update: XOR<userUpdateWithoutStudyplanprogressInput, userUncheckedUpdateWithoutStudyplanprogressInput>
    create: XOR<userCreateWithoutStudyplanprogressInput, userUncheckedCreateWithoutStudyplanprogressInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutStudyplanprogressInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutStudyplanprogressInput, userUncheckedUpdateWithoutStudyplanprogressInput>
  }

  export type userUpdateWithoutStudyplanprogressInput = {
    UID?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: Enumuser_RoleFieldUpdateOperationsInput | $Enums.user_Role
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Image?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: commentUpdateManyWithoutUserNestedInput
    commentlike?: commentlikeUpdateManyWithoutUserNestedInput
    exerciselike?: exerciselikeUpdateManyWithoutUserNestedInput
    exerciseprogress?: exerciseprogressUpdateManyWithoutUserNestedInput
    friendship_friendship_requesterTouser?: friendshipUpdateManyWithoutUser_friendship_requesterTouserNestedInput
    friendship_friendship_addresseeTouser?: friendshipUpdateManyWithoutUser_friendship_addresseeTouserNestedInput
    list?: listUpdateManyWithoutUserNestedInput
    notification_notification_UIDTouser?: notificationUpdateManyWithoutUser_notification_UIDTouserNestedInput
    notification_notification_FromUserTouser?: notificationUpdateManyWithoutUser_notification_FromUserTouserNestedInput
    submission?: submissionUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutStudyplanprogressInput = {
    UID?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: Enumuser_RoleFieldUpdateOperationsInput | $Enums.user_Role
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Image?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: commentUncheckedUpdateManyWithoutUserNestedInput
    commentlike?: commentlikeUncheckedUpdateManyWithoutUserNestedInput
    exerciselike?: exerciselikeUncheckedUpdateManyWithoutUserNestedInput
    exerciseprogress?: exerciseprogressUncheckedUpdateManyWithoutUserNestedInput
    friendship_friendship_requesterTouser?: friendshipUncheckedUpdateManyWithoutUser_friendship_requesterTouserNestedInput
    friendship_friendship_addresseeTouser?: friendshipUncheckedUpdateManyWithoutUser_friendship_addresseeTouserNestedInput
    list?: listUncheckedUpdateManyWithoutUserNestedInput
    notification_notification_UIDTouser?: notificationUncheckedUpdateManyWithoutUser_notification_UIDTouserNestedInput
    notification_notification_FromUserTouser?: notificationUncheckedUpdateManyWithoutUser_notification_FromUserTouserNestedInput
    submission?: submissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type userCreateWithoutListInput = {
    UID?: string
    Username: string
    Email: string
    Password: string
    Role?: $Enums.user_Role
    CreatedAt?: Date | string | null
    Image?: string | null
    comment?: commentCreateNestedManyWithoutUserInput
    commentlike?: commentlikeCreateNestedManyWithoutUserInput
    exerciselike?: exerciselikeCreateNestedManyWithoutUserInput
    exerciseprogress?: exerciseprogressCreateNestedManyWithoutUserInput
    friendship_friendship_requesterTouser?: friendshipCreateNestedManyWithoutUser_friendship_requesterTouserInput
    friendship_friendship_addresseeTouser?: friendshipCreateNestedManyWithoutUser_friendship_addresseeTouserInput
    notification_notification_UIDTouser?: notificationCreateNestedManyWithoutUser_notification_UIDTouserInput
    notification_notification_FromUserTouser?: notificationCreateNestedManyWithoutUser_notification_FromUserTouserInput
    studyplanprogress?: studyplanprogressCreateNestedManyWithoutUserInput
    submission?: submissionCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutListInput = {
    UID?: string
    Username: string
    Email: string
    Password: string
    Role?: $Enums.user_Role
    CreatedAt?: Date | string | null
    Image?: string | null
    comment?: commentUncheckedCreateNestedManyWithoutUserInput
    commentlike?: commentlikeUncheckedCreateNestedManyWithoutUserInput
    exerciselike?: exerciselikeUncheckedCreateNestedManyWithoutUserInput
    exerciseprogress?: exerciseprogressUncheckedCreateNestedManyWithoutUserInput
    friendship_friendship_requesterTouser?: friendshipUncheckedCreateNestedManyWithoutUser_friendship_requesterTouserInput
    friendship_friendship_addresseeTouser?: friendshipUncheckedCreateNestedManyWithoutUser_friendship_addresseeTouserInput
    notification_notification_UIDTouser?: notificationUncheckedCreateNestedManyWithoutUser_notification_UIDTouserInput
    notification_notification_FromUserTouser?: notificationUncheckedCreateNestedManyWithoutUser_notification_FromUserTouserInput
    studyplanprogress?: studyplanprogressUncheckedCreateNestedManyWithoutUserInput
    submission?: submissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutListInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutListInput, userUncheckedCreateWithoutListInput>
  }

  export type listitemCreateWithoutListInput = {
    exercise: exerciseCreateNestedOneWithoutListitemInput
  }

  export type listitemUncheckedCreateWithoutListInput = {
    EID: number
  }

  export type listitemCreateOrConnectWithoutListInput = {
    where: listitemWhereUniqueInput
    create: XOR<listitemCreateWithoutListInput, listitemUncheckedCreateWithoutListInput>
  }

  export type listitemCreateManyListInputEnvelope = {
    data: listitemCreateManyListInput | listitemCreateManyListInput[]
    skipDuplicates?: boolean
  }

  export type userUpsertWithoutListInput = {
    update: XOR<userUpdateWithoutListInput, userUncheckedUpdateWithoutListInput>
    create: XOR<userCreateWithoutListInput, userUncheckedCreateWithoutListInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutListInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutListInput, userUncheckedUpdateWithoutListInput>
  }

  export type userUpdateWithoutListInput = {
    UID?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: Enumuser_RoleFieldUpdateOperationsInput | $Enums.user_Role
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Image?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: commentUpdateManyWithoutUserNestedInput
    commentlike?: commentlikeUpdateManyWithoutUserNestedInput
    exerciselike?: exerciselikeUpdateManyWithoutUserNestedInput
    exerciseprogress?: exerciseprogressUpdateManyWithoutUserNestedInput
    friendship_friendship_requesterTouser?: friendshipUpdateManyWithoutUser_friendship_requesterTouserNestedInput
    friendship_friendship_addresseeTouser?: friendshipUpdateManyWithoutUser_friendship_addresseeTouserNestedInput
    notification_notification_UIDTouser?: notificationUpdateManyWithoutUser_notification_UIDTouserNestedInput
    notification_notification_FromUserTouser?: notificationUpdateManyWithoutUser_notification_FromUserTouserNestedInput
    studyplanprogress?: studyplanprogressUpdateManyWithoutUserNestedInput
    submission?: submissionUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutListInput = {
    UID?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: Enumuser_RoleFieldUpdateOperationsInput | $Enums.user_Role
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Image?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: commentUncheckedUpdateManyWithoutUserNestedInput
    commentlike?: commentlikeUncheckedUpdateManyWithoutUserNestedInput
    exerciselike?: exerciselikeUncheckedUpdateManyWithoutUserNestedInput
    exerciseprogress?: exerciseprogressUncheckedUpdateManyWithoutUserNestedInput
    friendship_friendship_requesterTouser?: friendshipUncheckedUpdateManyWithoutUser_friendship_requesterTouserNestedInput
    friendship_friendship_addresseeTouser?: friendshipUncheckedUpdateManyWithoutUser_friendship_addresseeTouserNestedInput
    notification_notification_UIDTouser?: notificationUncheckedUpdateManyWithoutUser_notification_UIDTouserNestedInput
    notification_notification_FromUserTouser?: notificationUncheckedUpdateManyWithoutUser_notification_FromUserTouserNestedInput
    studyplanprogress?: studyplanprogressUncheckedUpdateManyWithoutUserNestedInput
    submission?: submissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type listitemUpsertWithWhereUniqueWithoutListInput = {
    where: listitemWhereUniqueInput
    update: XOR<listitemUpdateWithoutListInput, listitemUncheckedUpdateWithoutListInput>
    create: XOR<listitemCreateWithoutListInput, listitemUncheckedCreateWithoutListInput>
  }

  export type listitemUpdateWithWhereUniqueWithoutListInput = {
    where: listitemWhereUniqueInput
    data: XOR<listitemUpdateWithoutListInput, listitemUncheckedUpdateWithoutListInput>
  }

  export type listitemUpdateManyWithWhereWithoutListInput = {
    where: listitemScalarWhereInput
    data: XOR<listitemUpdateManyMutationInput, listitemUncheckedUpdateManyWithoutListInput>
  }

  export type listCreateWithoutListitemInput = {
    Name: string
    Description?: string | null
    CreatedAt?: Date | string | null
    user: userCreateNestedOneWithoutListInput
  }

  export type listUncheckedCreateWithoutListitemInput = {
    LID?: number
    UID: string
    Name: string
    Description?: string | null
    CreatedAt?: Date | string | null
  }

  export type listCreateOrConnectWithoutListitemInput = {
    where: listWhereUniqueInput
    create: XOR<listCreateWithoutListitemInput, listUncheckedCreateWithoutListitemInput>
  }

  export type exerciseCreateWithoutListitemInput = {
    Name: string
    Slug: string
    Content: string
    Difficulty?: $Enums.exercise_Difficulty
    template?: string | null
    comment?: commentCreateNestedManyWithoutExerciseInput
    topic?: topicCreateNestedOneWithoutExerciseInput
    studyplanitem?: studyplanitemCreateNestedOneWithoutExerciseInput
    exerciselike?: exerciselikeCreateNestedManyWithoutExerciseInput
    exerciseprogress?: exerciseprogressCreateNestedManyWithoutExerciseInput
    submission?: submissionCreateNestedManyWithoutExerciseInput
    testcase?: testcaseCreateNestedManyWithoutExerciseInput
  }

  export type exerciseUncheckedCreateWithoutListitemInput = {
    EID?: number
    TpID?: number | null
    SPIID?: number | null
    Name: string
    Slug: string
    Content: string
    Difficulty?: $Enums.exercise_Difficulty
    template?: string | null
    comment?: commentUncheckedCreateNestedManyWithoutExerciseInput
    exerciselike?: exerciselikeUncheckedCreateNestedManyWithoutExerciseInput
    exerciseprogress?: exerciseprogressUncheckedCreateNestedManyWithoutExerciseInput
    submission?: submissionUncheckedCreateNestedManyWithoutExerciseInput
    testcase?: testcaseUncheckedCreateNestedManyWithoutExerciseInput
  }

  export type exerciseCreateOrConnectWithoutListitemInput = {
    where: exerciseWhereUniqueInput
    create: XOR<exerciseCreateWithoutListitemInput, exerciseUncheckedCreateWithoutListitemInput>
  }

  export type listUpsertWithoutListitemInput = {
    update: XOR<listUpdateWithoutListitemInput, listUncheckedUpdateWithoutListitemInput>
    create: XOR<listCreateWithoutListitemInput, listUncheckedCreateWithoutListitemInput>
    where?: listWhereInput
  }

  export type listUpdateToOneWithWhereWithoutListitemInput = {
    where?: listWhereInput
    data: XOR<listUpdateWithoutListitemInput, listUncheckedUpdateWithoutListitemInput>
  }

  export type listUpdateWithoutListitemInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: userUpdateOneRequiredWithoutListNestedInput
  }

  export type listUncheckedUpdateWithoutListitemInput = {
    LID?: IntFieldUpdateOperationsInput | number
    UID?: StringFieldUpdateOperationsInput | string
    Name?: StringFieldUpdateOperationsInput | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type exerciseUpsertWithoutListitemInput = {
    update: XOR<exerciseUpdateWithoutListitemInput, exerciseUncheckedUpdateWithoutListitemInput>
    create: XOR<exerciseCreateWithoutListitemInput, exerciseUncheckedCreateWithoutListitemInput>
    where?: exerciseWhereInput
  }

  export type exerciseUpdateToOneWithWhereWithoutListitemInput = {
    where?: exerciseWhereInput
    data: XOR<exerciseUpdateWithoutListitemInput, exerciseUncheckedUpdateWithoutListitemInput>
  }

  export type exerciseUpdateWithoutListitemInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Slug?: StringFieldUpdateOperationsInput | string
    Content?: StringFieldUpdateOperationsInput | string
    Difficulty?: Enumexercise_DifficultyFieldUpdateOperationsInput | $Enums.exercise_Difficulty
    template?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: commentUpdateManyWithoutExerciseNestedInput
    topic?: topicUpdateOneWithoutExerciseNestedInput
    studyplanitem?: studyplanitemUpdateOneWithoutExerciseNestedInput
    exerciselike?: exerciselikeUpdateManyWithoutExerciseNestedInput
    exerciseprogress?: exerciseprogressUpdateManyWithoutExerciseNestedInput
    submission?: submissionUpdateManyWithoutExerciseNestedInput
    testcase?: testcaseUpdateManyWithoutExerciseNestedInput
  }

  export type exerciseUncheckedUpdateWithoutListitemInput = {
    EID?: IntFieldUpdateOperationsInput | number
    TpID?: NullableIntFieldUpdateOperationsInput | number | null
    SPIID?: NullableIntFieldUpdateOperationsInput | number | null
    Name?: StringFieldUpdateOperationsInput | string
    Slug?: StringFieldUpdateOperationsInput | string
    Content?: StringFieldUpdateOperationsInput | string
    Difficulty?: Enumexercise_DifficultyFieldUpdateOperationsInput | $Enums.exercise_Difficulty
    template?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: commentUncheckedUpdateManyWithoutExerciseNestedInput
    exerciselike?: exerciselikeUncheckedUpdateManyWithoutExerciseNestedInput
    exerciseprogress?: exerciseprogressUncheckedUpdateManyWithoutExerciseNestedInput
    submission?: submissionUncheckedUpdateManyWithoutExerciseNestedInput
    testcase?: testcaseUncheckedUpdateManyWithoutExerciseNestedInput
  }

  export type commentCreateManyExerciseInput = {
    CoID?: number
    UID: string
    LID?: number | null
    Content: string
    CreatedAt?: Date | string | null
  }

  export type exerciselikeCreateManyExerciseInput = {
    ELID?: number
    UID: string
    CreatedAt?: Date | string | null
  }

  export type exerciseprogressCreateManyExerciseInput = {
    ID?: number
    UID: string
    Status?: $Enums.exerciseprogress_Status | null
    UpdatedAt?: Date | string | null
  }

  export type listitemCreateManyExerciseInput = {
    LID: number
  }

  export type submissionCreateManyExerciseInput = {
    SID?: number
    UID: string
    Code?: string | null
    CreatedAt?: Date | string | null
    Result?: $Enums.submission_Result | null
    isPublic?: boolean | null
  }

  export type testcaseCreateManyExerciseInput = {
    TCID?: number
    Input?: string | null
    ExpectedOutput: string
    isHidden?: boolean | null
  }

  export type commentUpdateWithoutExerciseInput = {
    Content?: StringFieldUpdateOperationsInput | string
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: userUpdateOneRequiredWithoutCommentNestedInput
    lesson?: lessonUpdateOneWithoutCommentNestedInput
    commentlike?: commentlikeUpdateManyWithoutCommentNestedInput
    notification?: notificationUpdateManyWithoutCommentNestedInput
  }

  export type commentUncheckedUpdateWithoutExerciseInput = {
    CoID?: IntFieldUpdateOperationsInput | number
    UID?: StringFieldUpdateOperationsInput | string
    LID?: NullableIntFieldUpdateOperationsInput | number | null
    Content?: StringFieldUpdateOperationsInput | string
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    commentlike?: commentlikeUncheckedUpdateManyWithoutCommentNestedInput
    notification?: notificationUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type commentUncheckedUpdateManyWithoutExerciseInput = {
    CoID?: IntFieldUpdateOperationsInput | number
    UID?: StringFieldUpdateOperationsInput | string
    LID?: NullableIntFieldUpdateOperationsInput | number | null
    Content?: StringFieldUpdateOperationsInput | string
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type exerciselikeUpdateWithoutExerciseInput = {
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: userUpdateOneRequiredWithoutExerciselikeNestedInput
  }

  export type exerciselikeUncheckedUpdateWithoutExerciseInput = {
    ELID?: IntFieldUpdateOperationsInput | number
    UID?: StringFieldUpdateOperationsInput | string
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type exerciselikeUncheckedUpdateManyWithoutExerciseInput = {
    ELID?: IntFieldUpdateOperationsInput | number
    UID?: StringFieldUpdateOperationsInput | string
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type exerciseprogressUpdateWithoutExerciseInput = {
    Status?: NullableEnumexerciseprogress_StatusFieldUpdateOperationsInput | $Enums.exerciseprogress_Status | null
    UpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: userUpdateOneRequiredWithoutExerciseprogressNestedInput
  }

  export type exerciseprogressUncheckedUpdateWithoutExerciseInput = {
    ID?: IntFieldUpdateOperationsInput | number
    UID?: StringFieldUpdateOperationsInput | string
    Status?: NullableEnumexerciseprogress_StatusFieldUpdateOperationsInput | $Enums.exerciseprogress_Status | null
    UpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type exerciseprogressUncheckedUpdateManyWithoutExerciseInput = {
    ID?: IntFieldUpdateOperationsInput | number
    UID?: StringFieldUpdateOperationsInput | string
    Status?: NullableEnumexerciseprogress_StatusFieldUpdateOperationsInput | $Enums.exerciseprogress_Status | null
    UpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type listitemUpdateWithoutExerciseInput = {
    list?: listUpdateOneRequiredWithoutListitemNestedInput
  }

  export type listitemUncheckedUpdateWithoutExerciseInput = {
    LID?: IntFieldUpdateOperationsInput | number
  }

  export type listitemUncheckedUpdateManyWithoutExerciseInput = {
    LID?: IntFieldUpdateOperationsInput | number
  }

  export type submissionUpdateWithoutExerciseInput = {
    Code?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Result?: NullableEnumsubmission_ResultFieldUpdateOperationsInput | $Enums.submission_Result | null
    isPublic?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user?: userUpdateOneRequiredWithoutSubmissionNestedInput
    testcaseresult?: testcaseresultUpdateManyWithoutSubmissionNestedInput
  }

  export type submissionUncheckedUpdateWithoutExerciseInput = {
    SID?: IntFieldUpdateOperationsInput | number
    UID?: StringFieldUpdateOperationsInput | string
    Code?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Result?: NullableEnumsubmission_ResultFieldUpdateOperationsInput | $Enums.submission_Result | null
    isPublic?: NullableBoolFieldUpdateOperationsInput | boolean | null
    testcaseresult?: testcaseresultUncheckedUpdateManyWithoutSubmissionNestedInput
  }

  export type submissionUncheckedUpdateManyWithoutExerciseInput = {
    SID?: IntFieldUpdateOperationsInput | number
    UID?: StringFieldUpdateOperationsInput | string
    Code?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Result?: NullableEnumsubmission_ResultFieldUpdateOperationsInput | $Enums.submission_Result | null
    isPublic?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type testcaseUpdateWithoutExerciseInput = {
    Input?: NullableStringFieldUpdateOperationsInput | string | null
    ExpectedOutput?: StringFieldUpdateOperationsInput | string
    isHidden?: NullableBoolFieldUpdateOperationsInput | boolean | null
    testcaseresult?: testcaseresultUpdateManyWithoutTestcaseNestedInput
  }

  export type testcaseUncheckedUpdateWithoutExerciseInput = {
    TCID?: IntFieldUpdateOperationsInput | number
    Input?: NullableStringFieldUpdateOperationsInput | string | null
    ExpectedOutput?: StringFieldUpdateOperationsInput | string
    isHidden?: NullableBoolFieldUpdateOperationsInput | boolean | null
    testcaseresult?: testcaseresultUncheckedUpdateManyWithoutTestcaseNestedInput
  }

  export type testcaseUncheckedUpdateManyWithoutExerciseInput = {
    TCID?: IntFieldUpdateOperationsInput | number
    Input?: NullableStringFieldUpdateOperationsInput | string | null
    ExpectedOutput?: StringFieldUpdateOperationsInput | string
    isHidden?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type testcaseresultCreateManySubmissionInput = {
    TCRID?: number
    TCID: number
    ActualOutput: string
    Result?: $Enums.testcaseresult_Result
  }

  export type testcaseresultUpdateWithoutSubmissionInput = {
    ActualOutput?: StringFieldUpdateOperationsInput | string
    Result?: Enumtestcaseresult_ResultFieldUpdateOperationsInput | $Enums.testcaseresult_Result
    testcase?: testcaseUpdateOneRequiredWithoutTestcaseresultNestedInput
  }

  export type testcaseresultUncheckedUpdateWithoutSubmissionInput = {
    TCRID?: IntFieldUpdateOperationsInput | number
    TCID?: IntFieldUpdateOperationsInput | number
    ActualOutput?: StringFieldUpdateOperationsInput | string
    Result?: Enumtestcaseresult_ResultFieldUpdateOperationsInput | $Enums.testcaseresult_Result
  }

  export type testcaseresultUncheckedUpdateManyWithoutSubmissionInput = {
    TCRID?: IntFieldUpdateOperationsInput | number
    TCID?: IntFieldUpdateOperationsInput | number
    ActualOutput?: StringFieldUpdateOperationsInput | string
    Result?: Enumtestcaseresult_ResultFieldUpdateOperationsInput | $Enums.testcaseresult_Result
  }

  export type testcaseresultCreateManyTestcaseInput = {
    TCRID?: number
    SID: number
    ActualOutput: string
    Result?: $Enums.testcaseresult_Result
  }

  export type testcaseresultUpdateWithoutTestcaseInput = {
    ActualOutput?: StringFieldUpdateOperationsInput | string
    Result?: Enumtestcaseresult_ResultFieldUpdateOperationsInput | $Enums.testcaseresult_Result
    submission?: submissionUpdateOneRequiredWithoutTestcaseresultNestedInput
  }

  export type testcaseresultUncheckedUpdateWithoutTestcaseInput = {
    TCRID?: IntFieldUpdateOperationsInput | number
    SID?: IntFieldUpdateOperationsInput | number
    ActualOutput?: StringFieldUpdateOperationsInput | string
    Result?: Enumtestcaseresult_ResultFieldUpdateOperationsInput | $Enums.testcaseresult_Result
  }

  export type testcaseresultUncheckedUpdateManyWithoutTestcaseInput = {
    TCRID?: IntFieldUpdateOperationsInput | number
    SID?: IntFieldUpdateOperationsInput | number
    ActualOutput?: StringFieldUpdateOperationsInput | string
    Result?: Enumtestcaseresult_ResultFieldUpdateOperationsInput | $Enums.testcaseresult_Result
  }

  export type exerciseCreateManyTopicInput = {
    EID?: number
    SPIID?: number | null
    Name: string
    Slug: string
    Content: string
    Difficulty?: $Enums.exercise_Difficulty
    template?: string | null
  }

  export type exerciseUpdateWithoutTopicInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Slug?: StringFieldUpdateOperationsInput | string
    Content?: StringFieldUpdateOperationsInput | string
    Difficulty?: Enumexercise_DifficultyFieldUpdateOperationsInput | $Enums.exercise_Difficulty
    template?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: commentUpdateManyWithoutExerciseNestedInput
    studyplanitem?: studyplanitemUpdateOneWithoutExerciseNestedInput
    exerciselike?: exerciselikeUpdateManyWithoutExerciseNestedInput
    exerciseprogress?: exerciseprogressUpdateManyWithoutExerciseNestedInput
    listitem?: listitemUpdateManyWithoutExerciseNestedInput
    submission?: submissionUpdateManyWithoutExerciseNestedInput
    testcase?: testcaseUpdateManyWithoutExerciseNestedInput
  }

  export type exerciseUncheckedUpdateWithoutTopicInput = {
    EID?: IntFieldUpdateOperationsInput | number
    SPIID?: NullableIntFieldUpdateOperationsInput | number | null
    Name?: StringFieldUpdateOperationsInput | string
    Slug?: StringFieldUpdateOperationsInput | string
    Content?: StringFieldUpdateOperationsInput | string
    Difficulty?: Enumexercise_DifficultyFieldUpdateOperationsInput | $Enums.exercise_Difficulty
    template?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: commentUncheckedUpdateManyWithoutExerciseNestedInput
    exerciselike?: exerciselikeUncheckedUpdateManyWithoutExerciseNestedInput
    exerciseprogress?: exerciseprogressUncheckedUpdateManyWithoutExerciseNestedInput
    listitem?: listitemUncheckedUpdateManyWithoutExerciseNestedInput
    submission?: submissionUncheckedUpdateManyWithoutExerciseNestedInput
    testcase?: testcaseUncheckedUpdateManyWithoutExerciseNestedInput
  }

  export type exerciseUncheckedUpdateManyWithoutTopicInput = {
    EID?: IntFieldUpdateOperationsInput | number
    SPIID?: NullableIntFieldUpdateOperationsInput | number | null
    Name?: StringFieldUpdateOperationsInput | string
    Slug?: StringFieldUpdateOperationsInput | string
    Content?: StringFieldUpdateOperationsInput | string
    Difficulty?: Enumexercise_DifficultyFieldUpdateOperationsInput | $Enums.exercise_Difficulty
    template?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type commentCreateManyUserInput = {
    CoID?: number
    LID?: number | null
    EID?: number | null
    Content: string
    CreatedAt?: Date | string | null
  }

  export type commentlikeCreateManyUserInput = {
    CLID?: number
    CoID: number
    CreatedAt?: Date | string | null
  }

  export type exerciselikeCreateManyUserInput = {
    ELID?: number
    EID: number
    CreatedAt?: Date | string | null
  }

  export type exerciseprogressCreateManyUserInput = {
    ID?: number
    EID: number
    Status?: $Enums.exerciseprogress_Status | null
    UpdatedAt?: Date | string | null
  }

  export type friendshipCreateManyUser_friendship_requesterTouserInput = {
    FID?: number
    addressee: string
    status?: $Enums.friendship_status
    CreatedAt?: Date | string | null
  }

  export type friendshipCreateManyUser_friendship_addresseeTouserInput = {
    FID?: number
    requester: string
    status?: $Enums.friendship_status
    CreatedAt?: Date | string | null
  }

  export type listCreateManyUserInput = {
    LID?: number
    Name: string
    Description?: string | null
    CreatedAt?: Date | string | null
  }

  export type notificationCreateManyUser_notification_UIDTouserInput = {
    NID?: number
    Type: $Enums.notification_Type
    FromUser: string
    Message: string
    CoID?: number | null
    CreatedAt?: Date | string | null
    isRead?: boolean | null
  }

  export type notificationCreateManyUser_notification_FromUserTouserInput = {
    NID?: number
    UID: string
    Type: $Enums.notification_Type
    Message: string
    CoID?: number | null
    CreatedAt?: Date | string | null
    isRead?: boolean | null
  }

  export type studyplanprogressCreateManyUserInput = {
    SPPID?: number
    SPID: number
    Status: $Enums.studyplanprogress_Status
    StartTime?: Date | string | null
    EndTime?: Date | string | null
  }

  export type submissionCreateManyUserInput = {
    SID?: number
    EID: number
    Code?: string | null
    CreatedAt?: Date | string | null
    Result?: $Enums.submission_Result | null
    isPublic?: boolean | null
  }

  export type commentUpdateWithoutUserInput = {
    Content?: StringFieldUpdateOperationsInput | string
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lesson?: lessonUpdateOneWithoutCommentNestedInput
    exercise?: exerciseUpdateOneWithoutCommentNestedInput
    commentlike?: commentlikeUpdateManyWithoutCommentNestedInput
    notification?: notificationUpdateManyWithoutCommentNestedInput
  }

  export type commentUncheckedUpdateWithoutUserInput = {
    CoID?: IntFieldUpdateOperationsInput | number
    LID?: NullableIntFieldUpdateOperationsInput | number | null
    EID?: NullableIntFieldUpdateOperationsInput | number | null
    Content?: StringFieldUpdateOperationsInput | string
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    commentlike?: commentlikeUncheckedUpdateManyWithoutCommentNestedInput
    notification?: notificationUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type commentUncheckedUpdateManyWithoutUserInput = {
    CoID?: IntFieldUpdateOperationsInput | number
    LID?: NullableIntFieldUpdateOperationsInput | number | null
    EID?: NullableIntFieldUpdateOperationsInput | number | null
    Content?: StringFieldUpdateOperationsInput | string
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type commentlikeUpdateWithoutUserInput = {
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comment?: commentUpdateOneRequiredWithoutCommentlikeNestedInput
  }

  export type commentlikeUncheckedUpdateWithoutUserInput = {
    CLID?: IntFieldUpdateOperationsInput | number
    CoID?: IntFieldUpdateOperationsInput | number
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type commentlikeUncheckedUpdateManyWithoutUserInput = {
    CLID?: IntFieldUpdateOperationsInput | number
    CoID?: IntFieldUpdateOperationsInput | number
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type exerciselikeUpdateWithoutUserInput = {
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exercise?: exerciseUpdateOneRequiredWithoutExerciselikeNestedInput
  }

  export type exerciselikeUncheckedUpdateWithoutUserInput = {
    ELID?: IntFieldUpdateOperationsInput | number
    EID?: IntFieldUpdateOperationsInput | number
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type exerciselikeUncheckedUpdateManyWithoutUserInput = {
    ELID?: IntFieldUpdateOperationsInput | number
    EID?: IntFieldUpdateOperationsInput | number
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type exerciseprogressUpdateWithoutUserInput = {
    Status?: NullableEnumexerciseprogress_StatusFieldUpdateOperationsInput | $Enums.exerciseprogress_Status | null
    UpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exercise?: exerciseUpdateOneRequiredWithoutExerciseprogressNestedInput
  }

  export type exerciseprogressUncheckedUpdateWithoutUserInput = {
    ID?: IntFieldUpdateOperationsInput | number
    EID?: IntFieldUpdateOperationsInput | number
    Status?: NullableEnumexerciseprogress_StatusFieldUpdateOperationsInput | $Enums.exerciseprogress_Status | null
    UpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type exerciseprogressUncheckedUpdateManyWithoutUserInput = {
    ID?: IntFieldUpdateOperationsInput | number
    EID?: IntFieldUpdateOperationsInput | number
    Status?: NullableEnumexerciseprogress_StatusFieldUpdateOperationsInput | $Enums.exerciseprogress_Status | null
    UpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type friendshipUpdateWithoutUser_friendship_requesterTouserInput = {
    status?: Enumfriendship_statusFieldUpdateOperationsInput | $Enums.friendship_status
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user_friendship_addresseeTouser?: userUpdateOneRequiredWithoutFriendship_friendship_addresseeTouserNestedInput
  }

  export type friendshipUncheckedUpdateWithoutUser_friendship_requesterTouserInput = {
    FID?: IntFieldUpdateOperationsInput | number
    addressee?: StringFieldUpdateOperationsInput | string
    status?: Enumfriendship_statusFieldUpdateOperationsInput | $Enums.friendship_status
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type friendshipUncheckedUpdateManyWithoutUser_friendship_requesterTouserInput = {
    FID?: IntFieldUpdateOperationsInput | number
    addressee?: StringFieldUpdateOperationsInput | string
    status?: Enumfriendship_statusFieldUpdateOperationsInput | $Enums.friendship_status
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type friendshipUpdateWithoutUser_friendship_addresseeTouserInput = {
    status?: Enumfriendship_statusFieldUpdateOperationsInput | $Enums.friendship_status
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user_friendship_requesterTouser?: userUpdateOneRequiredWithoutFriendship_friendship_requesterTouserNestedInput
  }

  export type friendshipUncheckedUpdateWithoutUser_friendship_addresseeTouserInput = {
    FID?: IntFieldUpdateOperationsInput | number
    requester?: StringFieldUpdateOperationsInput | string
    status?: Enumfriendship_statusFieldUpdateOperationsInput | $Enums.friendship_status
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type friendshipUncheckedUpdateManyWithoutUser_friendship_addresseeTouserInput = {
    FID?: IntFieldUpdateOperationsInput | number
    requester?: StringFieldUpdateOperationsInput | string
    status?: Enumfriendship_statusFieldUpdateOperationsInput | $Enums.friendship_status
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type listUpdateWithoutUserInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    listitem?: listitemUpdateManyWithoutListNestedInput
  }

  export type listUncheckedUpdateWithoutUserInput = {
    LID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    listitem?: listitemUncheckedUpdateManyWithoutListNestedInput
  }

  export type listUncheckedUpdateManyWithoutUserInput = {
    LID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type notificationUpdateWithoutUser_notification_UIDTouserInput = {
    Type?: Enumnotification_TypeFieldUpdateOperationsInput | $Enums.notification_Type
    Message?: StringFieldUpdateOperationsInput | string
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isRead?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user_notification_FromUserTouser?: userUpdateOneRequiredWithoutNotification_notification_FromUserTouserNestedInput
    comment?: commentUpdateOneWithoutNotificationNestedInput
  }

  export type notificationUncheckedUpdateWithoutUser_notification_UIDTouserInput = {
    NID?: IntFieldUpdateOperationsInput | number
    Type?: Enumnotification_TypeFieldUpdateOperationsInput | $Enums.notification_Type
    FromUser?: StringFieldUpdateOperationsInput | string
    Message?: StringFieldUpdateOperationsInput | string
    CoID?: NullableIntFieldUpdateOperationsInput | number | null
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isRead?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type notificationUncheckedUpdateManyWithoutUser_notification_UIDTouserInput = {
    NID?: IntFieldUpdateOperationsInput | number
    Type?: Enumnotification_TypeFieldUpdateOperationsInput | $Enums.notification_Type
    FromUser?: StringFieldUpdateOperationsInput | string
    Message?: StringFieldUpdateOperationsInput | string
    CoID?: NullableIntFieldUpdateOperationsInput | number | null
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isRead?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type notificationUpdateWithoutUser_notification_FromUserTouserInput = {
    Type?: Enumnotification_TypeFieldUpdateOperationsInput | $Enums.notification_Type
    Message?: StringFieldUpdateOperationsInput | string
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isRead?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user_notification_UIDTouser?: userUpdateOneRequiredWithoutNotification_notification_UIDTouserNestedInput
    comment?: commentUpdateOneWithoutNotificationNestedInput
  }

  export type notificationUncheckedUpdateWithoutUser_notification_FromUserTouserInput = {
    NID?: IntFieldUpdateOperationsInput | number
    UID?: StringFieldUpdateOperationsInput | string
    Type?: Enumnotification_TypeFieldUpdateOperationsInput | $Enums.notification_Type
    Message?: StringFieldUpdateOperationsInput | string
    CoID?: NullableIntFieldUpdateOperationsInput | number | null
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isRead?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type notificationUncheckedUpdateManyWithoutUser_notification_FromUserTouserInput = {
    NID?: IntFieldUpdateOperationsInput | number
    UID?: StringFieldUpdateOperationsInput | string
    Type?: Enumnotification_TypeFieldUpdateOperationsInput | $Enums.notification_Type
    Message?: StringFieldUpdateOperationsInput | string
    CoID?: NullableIntFieldUpdateOperationsInput | number | null
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isRead?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type studyplanprogressUpdateWithoutUserInput = {
    Status?: Enumstudyplanprogress_StatusFieldUpdateOperationsInput | $Enums.studyplanprogress_Status
    StartTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    EndTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studyplan?: studyplanUpdateOneRequiredWithoutStudyplanprogressNestedInput
  }

  export type studyplanprogressUncheckedUpdateWithoutUserInput = {
    SPPID?: IntFieldUpdateOperationsInput | number
    SPID?: IntFieldUpdateOperationsInput | number
    Status?: Enumstudyplanprogress_StatusFieldUpdateOperationsInput | $Enums.studyplanprogress_Status
    StartTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    EndTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type studyplanprogressUncheckedUpdateManyWithoutUserInput = {
    SPPID?: IntFieldUpdateOperationsInput | number
    SPID?: IntFieldUpdateOperationsInput | number
    Status?: Enumstudyplanprogress_StatusFieldUpdateOperationsInput | $Enums.studyplanprogress_Status
    StartTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    EndTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type submissionUpdateWithoutUserInput = {
    Code?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Result?: NullableEnumsubmission_ResultFieldUpdateOperationsInput | $Enums.submission_Result | null
    isPublic?: NullableBoolFieldUpdateOperationsInput | boolean | null
    exercise?: exerciseUpdateOneRequiredWithoutSubmissionNestedInput
    testcaseresult?: testcaseresultUpdateManyWithoutSubmissionNestedInput
  }

  export type submissionUncheckedUpdateWithoutUserInput = {
    SID?: IntFieldUpdateOperationsInput | number
    EID?: IntFieldUpdateOperationsInput | number
    Code?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Result?: NullableEnumsubmission_ResultFieldUpdateOperationsInput | $Enums.submission_Result | null
    isPublic?: NullableBoolFieldUpdateOperationsInput | boolean | null
    testcaseresult?: testcaseresultUncheckedUpdateManyWithoutSubmissionNestedInput
  }

  export type submissionUncheckedUpdateManyWithoutUserInput = {
    SID?: IntFieldUpdateOperationsInput | number
    EID?: IntFieldUpdateOperationsInput | number
    Code?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Result?: NullableEnumsubmission_ResultFieldUpdateOperationsInput | $Enums.submission_Result | null
    isPublic?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type lessonCreateManyChapterInput = {
    LID?: number
    LessonIndex: number
    Title: string
    Slug: string
  }

  export type lessonUpdateWithoutChapterInput = {
    LessonIndex?: IntFieldUpdateOperationsInput | number
    Title?: StringFieldUpdateOperationsInput | string
    Slug?: StringFieldUpdateOperationsInput | string
    comment?: commentUpdateManyWithoutLessonNestedInput
  }

  export type lessonUncheckedUpdateWithoutChapterInput = {
    LID?: IntFieldUpdateOperationsInput | number
    LessonIndex?: IntFieldUpdateOperationsInput | number
    Title?: StringFieldUpdateOperationsInput | string
    Slug?: StringFieldUpdateOperationsInput | string
    comment?: commentUncheckedUpdateManyWithoutLessonNestedInput
  }

  export type lessonUncheckedUpdateManyWithoutChapterInput = {
    LID?: IntFieldUpdateOperationsInput | number
    LessonIndex?: IntFieldUpdateOperationsInput | number
    Title?: StringFieldUpdateOperationsInput | string
    Slug?: StringFieldUpdateOperationsInput | string
  }

  export type commentlikeCreateManyCommentInput = {
    CLID?: number
    UID: string
    CreatedAt?: Date | string | null
  }

  export type notificationCreateManyCommentInput = {
    NID?: number
    UID: string
    Type: $Enums.notification_Type
    FromUser: string
    Message: string
    CreatedAt?: Date | string | null
    isRead?: boolean | null
  }

  export type commentlikeUpdateWithoutCommentInput = {
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: userUpdateOneRequiredWithoutCommentlikeNestedInput
  }

  export type commentlikeUncheckedUpdateWithoutCommentInput = {
    CLID?: IntFieldUpdateOperationsInput | number
    UID?: StringFieldUpdateOperationsInput | string
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type commentlikeUncheckedUpdateManyWithoutCommentInput = {
    CLID?: IntFieldUpdateOperationsInput | number
    UID?: StringFieldUpdateOperationsInput | string
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type notificationUpdateWithoutCommentInput = {
    Type?: Enumnotification_TypeFieldUpdateOperationsInput | $Enums.notification_Type
    Message?: StringFieldUpdateOperationsInput | string
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isRead?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user_notification_UIDTouser?: userUpdateOneRequiredWithoutNotification_notification_UIDTouserNestedInput
    user_notification_FromUserTouser?: userUpdateOneRequiredWithoutNotification_notification_FromUserTouserNestedInput
  }

  export type notificationUncheckedUpdateWithoutCommentInput = {
    NID?: IntFieldUpdateOperationsInput | number
    UID?: StringFieldUpdateOperationsInput | string
    Type?: Enumnotification_TypeFieldUpdateOperationsInput | $Enums.notification_Type
    FromUser?: StringFieldUpdateOperationsInput | string
    Message?: StringFieldUpdateOperationsInput | string
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isRead?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type notificationUncheckedUpdateManyWithoutCommentInput = {
    NID?: IntFieldUpdateOperationsInput | number
    UID?: StringFieldUpdateOperationsInput | string
    Type?: Enumnotification_TypeFieldUpdateOperationsInput | $Enums.notification_Type
    FromUser?: StringFieldUpdateOperationsInput | string
    Message?: StringFieldUpdateOperationsInput | string
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isRead?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type commentCreateManyLessonInput = {
    CoID?: number
    UID: string
    EID?: number | null
    Content: string
    CreatedAt?: Date | string | null
  }

  export type commentUpdateWithoutLessonInput = {
    Content?: StringFieldUpdateOperationsInput | string
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: userUpdateOneRequiredWithoutCommentNestedInput
    exercise?: exerciseUpdateOneWithoutCommentNestedInput
    commentlike?: commentlikeUpdateManyWithoutCommentNestedInput
    notification?: notificationUpdateManyWithoutCommentNestedInput
  }

  export type commentUncheckedUpdateWithoutLessonInput = {
    CoID?: IntFieldUpdateOperationsInput | number
    UID?: StringFieldUpdateOperationsInput | string
    EID?: NullableIntFieldUpdateOperationsInput | number | null
    Content?: StringFieldUpdateOperationsInput | string
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    commentlike?: commentlikeUncheckedUpdateManyWithoutCommentNestedInput
    notification?: notificationUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type commentUncheckedUpdateManyWithoutLessonInput = {
    CoID?: IntFieldUpdateOperationsInput | number
    UID?: StringFieldUpdateOperationsInput | string
    EID?: NullableIntFieldUpdateOperationsInput | number | null
    Content?: StringFieldUpdateOperationsInput | string
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type studyplanitemCreateManyStudyplanInput = {
    SPIID?: number
    Name: string
  }

  export type studyplanprogressCreateManyStudyplanInput = {
    SPPID?: number
    UID: string
    Status: $Enums.studyplanprogress_Status
    StartTime?: Date | string | null
    EndTime?: Date | string | null
  }

  export type studyplanitemUpdateWithoutStudyplanInput = {
    Name?: StringFieldUpdateOperationsInput | string
    exercise?: exerciseUpdateManyWithoutStudyplanitemNestedInput
  }

  export type studyplanitemUncheckedUpdateWithoutStudyplanInput = {
    SPIID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    exercise?: exerciseUncheckedUpdateManyWithoutStudyplanitemNestedInput
  }

  export type studyplanitemUncheckedUpdateManyWithoutStudyplanInput = {
    SPIID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
  }

  export type studyplanprogressUpdateWithoutStudyplanInput = {
    Status?: Enumstudyplanprogress_StatusFieldUpdateOperationsInput | $Enums.studyplanprogress_Status
    StartTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    EndTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: userUpdateOneRequiredWithoutStudyplanprogressNestedInput
  }

  export type studyplanprogressUncheckedUpdateWithoutStudyplanInput = {
    SPPID?: IntFieldUpdateOperationsInput | number
    UID?: StringFieldUpdateOperationsInput | string
    Status?: Enumstudyplanprogress_StatusFieldUpdateOperationsInput | $Enums.studyplanprogress_Status
    StartTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    EndTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type studyplanprogressUncheckedUpdateManyWithoutStudyplanInput = {
    SPPID?: IntFieldUpdateOperationsInput | number
    UID?: StringFieldUpdateOperationsInput | string
    Status?: Enumstudyplanprogress_StatusFieldUpdateOperationsInput | $Enums.studyplanprogress_Status
    StartTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    EndTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type exerciseCreateManyStudyplanitemInput = {
    EID?: number
    TpID?: number | null
    Name: string
    Slug: string
    Content: string
    Difficulty?: $Enums.exercise_Difficulty
    template?: string | null
  }

  export type exerciseUpdateWithoutStudyplanitemInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Slug?: StringFieldUpdateOperationsInput | string
    Content?: StringFieldUpdateOperationsInput | string
    Difficulty?: Enumexercise_DifficultyFieldUpdateOperationsInput | $Enums.exercise_Difficulty
    template?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: commentUpdateManyWithoutExerciseNestedInput
    topic?: topicUpdateOneWithoutExerciseNestedInput
    exerciselike?: exerciselikeUpdateManyWithoutExerciseNestedInput
    exerciseprogress?: exerciseprogressUpdateManyWithoutExerciseNestedInput
    listitem?: listitemUpdateManyWithoutExerciseNestedInput
    submission?: submissionUpdateManyWithoutExerciseNestedInput
    testcase?: testcaseUpdateManyWithoutExerciseNestedInput
  }

  export type exerciseUncheckedUpdateWithoutStudyplanitemInput = {
    EID?: IntFieldUpdateOperationsInput | number
    TpID?: NullableIntFieldUpdateOperationsInput | number | null
    Name?: StringFieldUpdateOperationsInput | string
    Slug?: StringFieldUpdateOperationsInput | string
    Content?: StringFieldUpdateOperationsInput | string
    Difficulty?: Enumexercise_DifficultyFieldUpdateOperationsInput | $Enums.exercise_Difficulty
    template?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: commentUncheckedUpdateManyWithoutExerciseNestedInput
    exerciselike?: exerciselikeUncheckedUpdateManyWithoutExerciseNestedInput
    exerciseprogress?: exerciseprogressUncheckedUpdateManyWithoutExerciseNestedInput
    listitem?: listitemUncheckedUpdateManyWithoutExerciseNestedInput
    submission?: submissionUncheckedUpdateManyWithoutExerciseNestedInput
    testcase?: testcaseUncheckedUpdateManyWithoutExerciseNestedInput
  }

  export type exerciseUncheckedUpdateManyWithoutStudyplanitemInput = {
    EID?: IntFieldUpdateOperationsInput | number
    TpID?: NullableIntFieldUpdateOperationsInput | number | null
    Name?: StringFieldUpdateOperationsInput | string
    Slug?: StringFieldUpdateOperationsInput | string
    Content?: StringFieldUpdateOperationsInput | string
    Difficulty?: Enumexercise_DifficultyFieldUpdateOperationsInput | $Enums.exercise_Difficulty
    template?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type listitemCreateManyListInput = {
    EID: number
  }

  export type listitemUpdateWithoutListInput = {
    exercise?: exerciseUpdateOneRequiredWithoutListitemNestedInput
  }

  export type listitemUncheckedUpdateWithoutListInput = {
    EID?: IntFieldUpdateOperationsInput | number
  }

  export type listitemUncheckedUpdateManyWithoutListInput = {
    EID?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}