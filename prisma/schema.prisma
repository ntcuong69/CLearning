generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model exercise {
  EID        Int                 @id @default(autoincrement())
  TpID       Int
  Content    String              @db.Text
  Difficulty exercise_Difficulty @default(Easy)
  template   String?             @db.Text
  topic      topic               @relation(fields: [TpID], references: [TpID], onDelete: NoAction, onUpdate: NoAction, map: "exercise_ibfk_1")
  submission submission[]
  testcase   testcase[]

  @@index([TpID], map: "TpID")
}

model submission {
  SID            Int                @id @default(autoincrement())
  UID            String             @db.Char(36)
  EID            Int
  Code           String?            @db.Text
  CreatedAt      DateTime?          @default(now()) @db.Timestamp(0)
  Result         submission_Result? @default(Pending)
  isPublic       Boolean?           @default(false)
  exercise       exercise           @relation(fields: [EID], references: [EID], onDelete: NoAction, onUpdate: NoAction, map: "submission_ibfk_1")
  user           user               @relation(fields: [UID], references: [UID], onDelete: NoAction, onUpdate: NoAction, map: "submission_ibfk_2")
  testcaseresult testcaseresult[]

  @@index([EID], map: "EID")
  @@index([UID], map: "UID")
}

model testcase {
  TCID           Int              @id @default(autoincrement())
  EID            Int
  Input          String           @db.Text
  ExpectedOutput String           @db.Text
  isHidden       Boolean?         @default(false)
  exercise       exercise         @relation(fields: [EID], references: [EID], onDelete: NoAction, onUpdate: NoAction, map: "testcase_ibfk_1")
  testcaseresult testcaseresult[]

  @@index([EID], map: "EID")
}

model testcaseresult {
  TCRID         Int                   @id @default(autoincrement())
  SID           Int
  TCID          Int
  ActualOutput  String                @db.Text
  Result        testcaseresult_Result @default(Pending)
  ExecutionTime Float?                @db.Float
  submission    submission            @relation(fields: [SID], references: [SID], onDelete: NoAction, onUpdate: NoAction, map: "testcaseresult_ibfk_1")
  testcase      testcase              @relation(fields: [TCID], references: [TCID], onDelete: NoAction, onUpdate: NoAction, map: "testcaseresult_ibfk_2")

  @@index([SID], map: "SID")
  @@index([TCID], map: "TCID")
}

model topic {
  TpID     Int        @id @default(autoincrement())
  Name     String     @db.VarChar(50)
  exercise exercise[]
}

model user {
  UID                                   String       @id @default(dbgenerated("(uuid())")) @db.Char(36)
  Username                              String       @db.VarChar(50)
  Email                                 String       @unique(map: "Email") @db.VarChar(50)
  Password                              String       @db.VarChar(255)
  Role                                  user_Role    @default(User)
  CreatedAt                             DateTime?    @default(now()) @db.Timestamp(0)
  friendship_friendship_requesterTouser friendship[] @relation("friendship_requesterTouser")
  friendship_friendship_addresseeTouser friendship[] @relation("friendship_addresseeTouser")
  submission                            submission[]
}

model friendship {
  FID                             Int               @id @default(autoincrement())
  requester                       String            @db.Char(36)
  addressee                       String            @db.Char(36)
  status                          friendship_status @default(Pending)
  CreatedAt                       DateTime?         @default(now()) @db.Timestamp(0)
  user_friendship_requesterTouser user              @relation("friendship_requesterTouser", fields: [requester], references: [UID], onDelete: NoAction, onUpdate: NoAction, map: "friendship_ibfk_1")
  user_friendship_addresseeTouser user              @relation("friendship_addresseeTouser", fields: [addressee], references: [UID], onDelete: NoAction, onUpdate: NoAction, map: "friendship_ibfk_2")

  @@unique([requester, addressee], map: "requester")
  @@index([addressee], map: "addressee")
}

enum exercise_Difficulty {
  Easy
  Medium
  Hard
}

enum user_Role {
  User
  Admin
}

enum submission_Result {
  Pass
  Fail
  Pending
}

enum friendship_status {
  Pending
  Accepted
}

enum testcaseresult_Result {
  Correct
  Partial
  Wrong
  Error
  Pending
}
